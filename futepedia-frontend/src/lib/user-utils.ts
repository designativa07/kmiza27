/**
 * Utilit√°rios para gerenciar identificadores √∫nicos de usu√°rios do chat p√∫blico
 */

/**
 * Gera ou recupera o ID √∫nico do usu√°rio para o chat do site
 * Se n√£o existir, cria um novo UUID e salva no localStorage
 */
export function getOrCreateSiteUserId(): string {
  // Verificar se estamos no ambiente do navegador
  if (typeof window === 'undefined') {
    // Se estivermos no servidor (SSR), retornar um ID tempor√°rio
    return 'site-temp-' + Math.random().toString(36).substr(2, 9);
  }

  let id = localStorage.getItem('futepedia_site_user_id');
  
  if (!id) {
    // Gerar novo UUID com prefixo 'site-'
    id = 'site-' + crypto.randomUUID();
    localStorage.setItem('futepedia_site_user_id', id);
    console.log('üÜî Novo ID de usu√°rio gerado:', id);
  }
  
  return id;
}

/**
 * Limpa o ID do usu√°rio do localStorage
 * √ötil para testes ou reset de sess√£o
 */
export function clearSiteUserId(): void {
  if (typeof window !== 'undefined') {
    localStorage.removeItem('futepedia_site_user_id');
    console.log('üóëÔ∏è ID de usu√°rio removido');
  }
}

/**
 * Verifica se o usu√°rio j√° tem um ID salvo
 */
export function hasSiteUserId(): boolean {
  if (typeof window === 'undefined') {
    return false;
  }
  
  return localStorage.getItem('futepedia_site_user_id') !== null;
}

/**
 * Gera um nome de usu√°rio amig√°vel para exibi√ß√£o
 * baseado no ID do usu√°rio
 */
export function generateDisplayName(userId: string): string {
  if (userId.startsWith('site-')) {
    // Pegar os √∫ltimos 6 caracteres do UUID para criar um nome √∫nico
    const shortId = userId.slice(-6).toUpperCase();
    return `Visitante ${shortId}`;
  }
  
  return 'Usu√°rio';
} 