# üê≥ Dockerfile Backend Otimizado - Anti-Cache Issues
# Multi-stage build para melhor cache management

# Stage 1: Dependencies
FROM node:18-alpine AS deps
RUN apk add --no-cache libc6-compat python3 make g++ git curl

WORKDIR /app

# Cache busting com commit hash real
ARG CACHEBUST=1
ARG GIT_COMMIT=main
RUN echo "Build: $CACHEBUST - Commit: $GIT_COMMIT - $(date)" > /app/build-info.txt

# Clone espec√≠fico do commit
RUN git clone --depth 1 --branch $GIT_COMMIT https://github.com/designativa07/kmiza27.git /tmp/repo

# Copiar apenas package files primeiro (melhor cache)
RUN cp /tmp/repo/backend/package*.json ./
RUN rm -rf node_modules package-lock.json
RUN npm ci --only=production --legacy-peer-deps

# Stage 2: Builder
FROM node:18-alpine AS builder
WORKDIR /app

# Copiar depend√™ncias do stage anterior
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /tmp/repo/backend ./

# Build da aplica√ß√£o
RUN npm run build

# Stage 3: Runner
FROM node:18-alpine AS runner
WORKDIR /app

# Instalar apenas depend√™ncias de runtime
RUN apk add --no-cache curl dumb-init

# Criar usu√°rio n√£o-root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nestjs

# Copiar arquivos necess√°rios
COPY --from=builder --chown=nestjs:nodejs /app/dist ./dist
COPY --from=builder --chown=nestjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nestjs:nodejs /app/package.json ./package.json

# Configurar usu√°rio
USER nestjs

# Vari√°veis de ambiente
ENV NODE_ENV=production
ENV PORT=3000

# Health check otimizado
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Expor porta
EXPOSE 3000

# Usar dumb-init para melhor signal handling
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/main"] 