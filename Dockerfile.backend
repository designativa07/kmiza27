# üê≥ Dockerfile Backend Otimizado - Auto Commit Detection
# Multi-stage build com captura autom√°tica de commit

# Stage 1: Dependencies
FROM node:18-alpine AS deps
RUN apk add --no-cache libc6-compat python3 make g++ git curl

WORKDIR /app

# Cache busting com timestamp real
ARG CACHEBUST=1
ARG BUILD_TIMESTAMP
RUN echo "Build: $CACHEBUST - Timestamp: $BUILD_TIMESTAMP - $(date)" > /app/build-info.txt

# Clone do reposit√≥rio atual
RUN git clone https://github.com/designativa07/kmiza27.git /tmp/repo

# Capturar commit automaticamente do reposit√≥rio clonado
RUN cd /tmp/repo && \
    GIT_COMMIT_AUTO=$(git rev-parse HEAD 2>/dev/null || echo "unknown") && \
    echo "export GIT_COMMIT=$GIT_COMMIT_AUTO" > /app/git-commit.sh && \
    echo "GIT_COMMIT=$GIT_COMMIT_AUTO" > /app/build-vars.env && \
    echo "BUILD_TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> /app/build-vars.env && \
    echo "Commit capturado: $GIT_COMMIT_AUTO" && \
    git log --oneline -1

# Copiar apenas package files primeiro (melhor cache)
RUN cp /tmp/repo/backend/package*.json ./
RUN rm -rf node_modules
RUN npm install --only=production --legacy-peer-deps

# Stage 2: Builder
FROM node:18-alpine AS builder
WORKDIR /app

# Copiar depend√™ncias e vari√°veis do stage anterior
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/build-vars.env ./build-vars.env
COPY --from=deps /tmp/repo/backend ./

# Carregar vari√°veis de build
RUN . ./build-vars.env && \
    echo "Usando commit: $GIT_COMMIT" && \
    echo "Usando timestamp: $BUILD_TIMESTAMP"

# Instalar depend√™ncias de desenvolvimento para build
RUN npm install --legacy-peer-deps

# Build da aplica√ß√£o
RUN npm run build

# Stage 3: Runner
FROM node:18-alpine AS runner
WORKDIR /app

# Instalar apenas depend√™ncias de runtime
RUN apk add --no-cache curl dumb-init

# Criar usu√°rio n√£o-root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nestjs

# Copiar arquivos necess√°rios
COPY --from=builder --chown=nestjs:nodejs /app/dist ./dist
COPY --from=builder --chown=nestjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nestjs:nodejs /app/package.json ./package.json
COPY --from=builder --chown=nestjs:nodejs /app/build-vars.env ./build-vars.env

# Criar script de inicializa√ß√£o que carrega as vari√°veis
RUN echo '#!/bin/sh' > /app/start.sh && \
    echo '. /app/build-vars.env' >> /app/start.sh && \
    echo 'export GIT_COMMIT' >> /app/start.sh && \
    echo 'export BUILD_TIMESTAMP' >> /app/start.sh && \
    echo 'echo "Iniciando com commit: $GIT_COMMIT"' >> /app/start.sh && \
    echo 'node dist/main' >> /app/start.sh && \
    chmod +x /app/start.sh

# Criar pastas necess√°rias com permiss√µes corretas
RUN mkdir -p /app/uploads/escudos /app/logs /app/temp && \
    chown -R nestjs:nodejs /app/uploads /app/logs /app/temp && \
    chmod -R 755 /app/uploads /app/logs /app/temp

# Configurar usu√°rio
USER nestjs

# Vari√°veis de ambiente fixas
ENV NODE_ENV=production
ENV PORT=3000
ENV NODE_OPTIONS="--max-old-space-size=512"
ENV RESTART_POLICY=always

# Health check otimizado
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Expor porta
EXPOSE 3000

# Usar dumb-init para melhor signal handling
ENTRYPOINT ["dumb-init", "--"]
CMD ["/app/start.sh"] 