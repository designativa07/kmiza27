# üê≥ Dockerfile Backend - Cache Busting Otimizado
# For√ßa rebuild sempre que houver mudan√ßas no reposit√≥rio

# Stage 1: Dependencies
FROM node:18-alpine AS deps
RUN apk add --no-cache libc6-compat python3 make g++ git curl

WORKDIR /app

# Cache busting AGRESSIVO - sempre quebra cache
ARG CACHEBUST
ARG BUILD_TIMESTAMP
ARG GITHUB_SHA

# For√ßar rebuild usando timestamp atual se n√£o fornecido
RUN CURRENT_TIME=$(date +%s) && \
    CACHE_BUST=${CACHEBUST:-$CURRENT_TIME} && \
    BUILD_TS=${BUILD_TIMESTAMP:-$(date -u +%Y-%m-%dT%H:%M:%SZ)} && \
    echo "üî• CACHE BUSTER: $CACHE_BUST" && \
    echo "‚è∞ BUILD TIME: $BUILD_TS" && \
    echo "Build: $CACHE_BUST - Timestamp: $BUILD_TS - $(date)" > /app/build-info.txt

# SEMPRE clonar reposit√≥rio fresco (sem cache) - quebra cache a cada build
RUN RANDOM_BUST=$(date +%s%N | cut -b1-13) && \
    echo "üîÑ Random bust: $RANDOM_BUST" && \
    rm -rf /tmp/repo || true && \
    git clone --depth=1 https://github.com/designativa07/kmiza27.git /tmp/repo

# Capturar commit e for√ßar rebuild se mudou
RUN cd /tmp/repo && \
    GIT_COMMIT_AUTO=$(git rev-parse HEAD 2>/dev/null || echo "unknown") && \
    GIT_SHORT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown") && \
    CURRENT_TIME=$(date +%s) && \
    echo "export GIT_COMMIT=$GIT_COMMIT_AUTO" > /app/git-commit.sh && \
    echo "GIT_COMMIT=$GIT_COMMIT_AUTO" > /app/build-vars.env && \
    echo "GIT_SHORT=$GIT_SHORT" >> /app/build-vars.env && \
    echo "BUILD_TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> /app/build-vars.env && \
    echo "CACHE_BUSTER=$CURRENT_TIME" >> /app/build-vars.env && \
    echo "GITHUB_SHA=${GITHUB_SHA:-$GIT_COMMIT_AUTO}" >> /app/build-vars.env && \
    echo "üîÑ Commit capturado: $GIT_COMMIT_AUTO ($GIT_SHORT)" && \
    echo "üî• Cache buster: $CURRENT_TIME" && \
    git log --oneline -1

# Quebrar cache baseado no commit atual + timestamp
RUN cd /tmp/repo && \
    CURRENT_COMMIT=$(git rev-parse HEAD) && \
    TIMESTAMP=$(date +%s) && \
    echo "CURRENT_COMMIT=$CURRENT_COMMIT" && \
    echo "TIMESTAMP=$TIMESTAMP" && \
    echo "$CURRENT_COMMIT-$TIMESTAMP" > /app/commit-cache-buster.txt

# Copiar package files (sem modificar o JSON)
RUN cp /tmp/repo/backend/package*.json ./

# Limpar e reinstalar depend√™ncias - for√ßar sem cache
RUN rm -rf node_modules package-lock.json yarn.lock
RUN npm cache clean --force
RUN npm install --only=production --legacy-peer-deps --no-cache

# Stage 2: Builder
FROM node:18-alpine AS builder
WORKDIR /app

# Copiar depend√™ncias e vari√°veis do stage anterior
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/build-vars.env ./build-vars.env
COPY --from=deps /app/commit-cache-buster.txt ./commit-cache-buster.txt
COPY --from=deps /tmp/repo/backend ./

# Quebrar cache se commit mudou - mostrar informa√ß√µes de build
RUN . ./build-vars.env && \
    echo "üîÑ Usando commit: $GIT_COMMIT ($GIT_SHORT)" && \
    echo "‚è∞ Build timestamp: $BUILD_TIMESTAMP" && \
    echo "üî• Cache buster: $CACHE_BUSTER" && \
    echo "üêô GitHub SHA: $GITHUB_SHA"

# Instalar depend√™ncias de desenvolvimento para build (sem cache)
RUN npm cache clean --force
RUN npm install --legacy-peer-deps --no-cache

# Build da aplica√ß√£o com cache busting
RUN . ./build-vars.env && \
    echo "üèóÔ∏è Building with commit: $GIT_SHORT" && \
    echo "üî• Cache ID: $CACHE_BUSTER" && \
    npm run build

# Stage 3: Runner
FROM node:18-alpine AS runner
WORKDIR /app

# Instalar apenas depend√™ncias de runtime
RUN apk add --no-cache curl dumb-init

# Criar usu√°rio n√£o-root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nestjs

# Copiar arquivos necess√°rios
COPY --from=builder --chown=nestjs:nodejs /app/dist ./dist
COPY --from=builder --chown=nestjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nestjs:nodejs /app/package.json ./package.json
COPY --from=builder --chown=nestjs:nodejs /app/build-vars.env ./build-vars.env
COPY --from=builder --chown=nestjs:nodejs /app/commit-cache-buster.txt ./commit-cache-buster.txt

# Criar script de inicializa√ß√£o que carrega as vari√°veis
RUN echo '#!/bin/sh' > /app/start.sh && \
    echo '. /app/build-vars.env' >> /app/start.sh && \
    echo 'export GIT_COMMIT' >> /app/start.sh && \
    echo 'export GIT_SHORT' >> /app/start.sh && \
    echo 'export BUILD_TIMESTAMP' >> /app/start.sh && \
    echo 'export CACHE_BUSTER' >> /app/start.sh && \
    echo 'export GITHUB_SHA' >> /app/start.sh && \
    echo 'echo "üöÄ Iniciando backend com commit: $GIT_SHORT"' >> /app/start.sh && \
    echo 'echo "‚è∞ Build: $BUILD_TIMESTAMP"' >> /app/start.sh && \
    echo 'echo "üî• Cache: $CACHE_BUSTER"' >> /app/start.sh && \
    echo 'echo "üêô SHA: $GITHUB_SHA"' >> /app/start.sh && \
    echo 'node dist/main' >> /app/start.sh && \
    chmod +x /app/start.sh

# Criar pastas necess√°rias com permiss√µes corretas
RUN mkdir -p /app/uploads/escudos /app/logs /app/temp && \
    chown -R nestjs:nodejs /app/uploads /app/logs /app/temp && \
    chmod -R 755 /app/uploads /app/logs /app/temp

# Configurar usu√°rio
USER nestjs

# Vari√°veis de ambiente fixas
ENV NODE_ENV=production
ENV PORT=3000
ENV NODE_OPTIONS="--max-old-space-size=512"
ENV RESTART_POLICY=always

# Health check otimizado
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Expor porta
EXPOSE 3000

# Usar dumb-init para melhor signal handling
ENTRYPOINT ["dumb-init", "--"]
CMD ["/app/start.sh"] 