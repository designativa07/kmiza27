const { Pool } = require('pg');

// Configura√ß√£o do banco PostgreSQL
const pool = new Pool({
  host: '195.200.0.191',
  port: 5433,
  database: 'kmiza27',
  user: 'postgres',
  password: '8F1DC9A7F9CE32C4D32E88A1C5FF7',
});

// Simular an√°lise de inten√ß√£o melhorada
function analyzeMessage(message) {
  const lowerMessage = message.toLowerCase();
  console.log(`üîç Analisando: "${message}"`);
  
  // Detectar pr√≥ximo jogo
  if ((lowerMessage.includes('pr√≥ximo') && lowerMessage.includes('jogo')) || 
      (lowerMessage.includes('proximo') && lowerMessage.includes('jogo'))) {
    const team = extractTeamName(lowerMessage);
    return { intent: 'next_match', team, confidence: 0.95 };
  }

  // Detectar √∫ltimo jogo
  if ((lowerMessage.includes('√∫ltimo') && lowerMessage.includes('jogo')) || 
      (lowerMessage.includes('ultimo') && lowerMessage.includes('jogo'))) {
    const team = extractTeamName(lowerMessage);
    return { intent: 'last_match', team, confidence: 0.95 };
  }

  // Detectar posi√ß√£o do time
  if (lowerMessage.includes('posi√ß√£o') || lowerMessage.includes('posicao') ||
      lowerMessage.includes('classifica√ß√£o') || lowerMessage.includes('classificacao')) {
    const team = extractTeamName(lowerMessage);
    return { intent: 'team_position', team, confidence: 0.90 };
  }

  // Detectar estat√≠sticas
  if (lowerMessage.includes('estat√≠sticas') || lowerMessage.includes('estatisticas') ||
      lowerMessage.includes('stats')) {
    const team = extractTeamName(lowerMessage);
    const competition = extractCompetitionName(lowerMessage);
    
    if (team) {
      return { intent: 'team_statistics', team, confidence: 0.90 };
    } else if (competition) {
      return { intent: 'competition_stats', competition, confidence: 0.90 };
    }
  }

  // Detectar artilheiros
  if (lowerMessage.includes('artilheiro') || lowerMessage.includes('goleador') ||
      lowerMessage.includes('artilharia')) {
    const competition = extractCompetitionName(lowerMessage);
    return { intent: 'top_scorers', competition, confidence: 0.85 };
  }

  // Detectar canais
  if (lowerMessage.includes('canais') || lowerMessage.includes('lista') ||
      lowerMessage.includes('onde assistir')) {
    return { intent: 'channels_info', confidence: 0.80 };
  }

  // Detectar transmiss√£o
  if (lowerMessage.includes('onde passa') || lowerMessage.includes('transmiss√£o') ||
      lowerMessage.includes('transmissao')) {
    const team = extractTeamName(lowerMessage);
    return { intent: 'broadcast_info', team, confidence: 0.90 };
  }

  // Detectar jogos da semana
  if (lowerMessage.includes('jogos') && lowerMessage.includes('semana')) {
    return { intent: 'matches_week', confidence: 0.85 };
  }
  
  // Detectar tabela
  if (lowerMessage.includes('tabela')) {
    const competition = extractCompetitionName(lowerMessage);
    return { intent: 'table', competition: competition || 'brasileirao', confidence: 0.85 };
  }
  
  // Detectar jogos de hoje
  if (lowerMessage.includes('jogos') && lowerMessage.includes('hoje')) {
    return { intent: 'matches_today', confidence: 0.80 };
  }
  
  return { intent: 'greeting', confidence: 0.50 };
}

function extractTeamName(message) {
  const teams = [
    'flamengo', 'palmeiras', 'corinthians', 's√£o paulo', 'santos', 
    'botafogo', 'fluminense', 'vasco', 'atl√©tico-mg', 'cruzeiro', 
    'internacional', 'gr√™mio', 'bahia', 'fortaleza', 'cear√°'
  ];
  
  for (const team of teams) {
    if (message.includes(team)) {
      return team;
    }
  }
  return undefined;
}

function extractCompetitionName(message) {
  if (message.includes('libertadores')) return 'libertadores';
  if (message.includes('copa do brasil')) return 'copa-do-brasil';
  if (message.includes('brasileir√£o') || message.includes('brasileirao')) return 'brasileirao';
  if (message.includes('sul-americana')) return 'sul-americana';
  return undefined;
}

// Buscar pr√≥ximo jogo
async function findNextMatch(client, teamName) {
  try {
    const teamResult = await client.query(`
      SELECT id, name, short_name 
      FROM teams 
      WHERE LOWER(name) LIKE $1 OR LOWER(short_name) LIKE $1
      LIMIT 1
    `, [`%${teamName}%`]);
    
    if (teamResult.rows.length === 0) {
      return `‚ùå Time "${teamName}" n√£o encontrado.`;
    }
    
    const team = teamResult.rows[0];
    
    const matchResult = await client.query(`
      SELECT 
        c.name as competition,
        ht.name as home_team,
        at.name as away_team,
        m.match_date,
        s.name as stadium,
        r.name as round_name,
        m.broadcast_channels
      FROM matches m
      JOIN competitions c ON m.competition_id = c.id
      JOIN teams ht ON m.home_team_id = ht.id
      JOIN teams at ON m.away_team_id = at.id
      LEFT JOIN stadiums s ON m.stadium_id = s.id
      LEFT JOIN rounds r ON m.round_id = r.id
      WHERE (m.home_team_id = $1 OR m.away_team_id = $1)
        AND m.status = 'scheduled'
        AND m.match_date >= NOW()
      ORDER BY m.match_date
      LIMIT 1
    `, [team.id]);
    
    if (matchResult.rows.length === 0) {
      return `üòî N√£o encontrei jogos futuros para o ${team.name}.`;
    }
    
    const match = matchResult.rows[0];
    const date = new Date(match.match_date);
    const formattedDate = date.toLocaleDateString('pt-BR');
    const formattedTime = date.toLocaleTimeString('pt-BR', { 
      hour: '2-digit', 
      minute: '2-digit',
      timeZone: 'UTC'
    });
    
    const isHome = match.home_team === team.name;
    const opponent = isHome ? match.away_team : match.home_team;
    const venue = isHome ? 'em casa' : 'fora de casa';
    
    let broadcastInfo = '';
    if (match.broadcast_channels && Array.isArray(match.broadcast_channels)) {
      broadcastInfo = `\nüì∫ **Transmiss√£o:** ${match.broadcast_channels.join(', ')}`;
    }
    
    return `‚öΩ **PR√ìXIMO JOGO DO ${team.name.toUpperCase()}** ‚öΩ

üìÖ **Data:** ${formattedDate}
‚è∞ **Hor√°rio:** ${formattedTime}
üèÜ **Competi√ß√£o:** ${match.competition}
üÜö **Advers√°rio:** ${opponent}
üèüÔ∏è **Est√°dio:** ${match.stadium || 'A definir'}
üìç **Rodada:** ${match.round_name || 'A definir'}
üè† **Mando:** ${venue}${broadcastInfo}

Bora torcer! üî•‚öΩ`;
    
  } catch (error) {
    console.error('Erro ao buscar pr√≥ximo jogo:', error);
    return '‚ùå Erro ao buscar pr√≥ximo jogo.';
  }
}

// Buscar tabela de classifica√ß√£o
async function getCompetitionTable(client, competitionName) {
  try {
    const competitionResult = await client.query(`
      SELECT id, name 
      FROM competitions 
      WHERE LOWER(name) LIKE $1 
      LIMIT 1
    `, [`%${competitionName}%`]);
    
    if (competitionResult.rows.length === 0) {
      return `‚ùå Competi√ß√£o "${competitionName}" n√£o encontrada.`;
    }
    
    const competition = competitionResult.rows[0];
    
    const standingsResult = await client.query(`
      SELECT 
        t.name as team_name,
        ct.position,
        ct.points,
        ct.played,
        ct.won,
        ct.drawn,
        ct.lost,
        ct.goal_difference
      FROM competition_teams ct
      JOIN teams t ON ct.team_id = t.id
      WHERE ct.competition_id = $1
      ORDER BY ct.points DESC, ct.goal_difference DESC, ct.goals_for DESC
      LIMIT 10
    `, [competition.id]);
    
    if (standingsResult.rows.length === 0) {
      return `üìä **TABELA - ${competition.name.toUpperCase()}** üìä

üòî Ainda n√£o h√° dados de classifica√ß√£o dispon√≠veis.`;
    }
    
    let response = `üìä **TABELA - ${competition.name.toUpperCase()}** üìä\n\n`;
    
    standingsResult.rows.forEach((standing, index) => {
      const position = index + 1;
      const emoji = position === 1 ? 'ü•á' : position === 2 ? 'ü•à' : position === 3 ? 'ü•â' : `${position}¬∫`;
      
      response += `${emoji} ${standing.team_name} - ${standing.points} pts\n`;
      response += `   J:${standing.played} V:${standing.won} E:${standing.drawn} D:${standing.lost} SG:${standing.goal_difference}\n\n`;
    });
    
    return response;
    
  } catch (error) {
    console.error('Erro ao buscar tabela:', error);
    return '‚ùå Erro ao buscar tabela da competi√ß√£o.';
  }
}

// Buscar canais de transmiss√£o
async function getChannelInfo(client) {
  try {
    const channelsResult = await client.query(`
      SELECT name, channel_number, type
      FROM channels
      WHERE active = true
      ORDER BY type, name
    `);
    
    if (channelsResult.rows.length === 0) {
      return `üì∫ **CANAIS DE TRANSMISS√ÉO** üì∫

üòî N√£o h√° informa√ß√µes de canais dispon√≠veis.`;
    }
    
    let response = `üì∫ **CANAIS DE TRANSMISS√ÉO** üì∫\n\n`;
    
    const channelsByType = {};
    channelsResult.rows.forEach(channel => {
      if (!channelsByType[channel.type]) {
        channelsByType[channel.type] = [];
      }
      channelsByType[channel.type].push(channel);
    });
    
    const typeEmojis = {
      'tv': 'üì∫',
      'cable': 'üì°',
      'streaming': 'üíª',
      'other': 'üì±'
    };
    
    const typeNames = {
      'tv': 'TV Aberta',
      'cable': 'TV por Assinatura',
      'streaming': 'Streaming',
      'other': 'Outros'
    };
    
    Object.keys(channelsByType).forEach(type => {
      const emoji = typeEmojis[type] || 'üì∫';
      const typeName = typeNames[type] || type.toUpperCase();
      
      response += `${emoji} **${typeName}:**\n`;
      
      channelsByType[type].forEach(channel => {
        response += `‚Ä¢ ${channel.name}`;
        if (channel.channel_number) {
          response += ` (${channel.channel_number})`;
        }
        response += `\n`;
      });
      response += `\n`;
    });
    
    return response;
    
  } catch (error) {
    console.error('Erro ao buscar canais:', error);
    return '‚ùå Erro ao buscar informa√ß√µes de canais.';
  }
}

// Processar mensagem
async function processMessage(message) {
  const client = await pool.connect();
  
  try {
    const analysis = analyzeMessage(message);
    console.log(`üß† Inten√ß√£o: ${analysis.intent} (${(analysis.confidence * 100).toFixed(0)}%)`);
    
    let response;
    
    switch (analysis.intent) {
      case 'next_match':
        response = await findNextMatch(client, analysis.team);
        break;
        
      case 'table':
        response = await getCompetitionTable(client, analysis.competition);
        break;
        
      case 'channels_info':
        response = await getChannelInfo(client);
        break;
        
      default:
        response = `üëã **Ol√°! Sou o Kmiza27 Bot** ‚öΩ

ü§ñ Posso te ajudar com informa√ß√µes sobre futebol:

‚öΩ **Pr√≥ximos jogos** - "Pr√≥ximo jogo do Flamengo"
üèÅ **√öltimo jogo** - "√öltimo jogo do Palmeiras"
‚ÑπÔ∏è **Info do time** - "Informa√ß√µes do Corinthians"  
üìä **Tabelas** - "Tabela do Brasileir√£o"
üìç **Posi√ß√£o** - "Posi√ß√£o do S√£o Paulo"
üìà **Estat√≠sticas** - "Estat√≠sticas do Santos"
ü•á **Artilheiros** - "Artilheiros do Brasileir√£o"
üìÖ **Jogos hoje** - "Jogos de hoje"
üì∫ **Transmiss√£o** - "Onde passa o jogo do Botafogo"
üì° **Canais** - "Lista de canais"
üóìÔ∏è **Jogos da semana** - "Jogos da semana"
üèÜ **Competi√ß√µes** - "Estat√≠sticas da Libertadores"

üí¨ **O que voc√™ gostaria de saber?**`;
    }
    
    return response;
    
  } finally {
    client.release();
  }
}

// Executar testes
async function runTests() {
  console.log('üöÄ TESTE DAS MELHORIAS DO KMIZA27 BOT üöÄ\n');
  console.log('=' .repeat(60));
  
  const testMessages = [
    'Oi',
    'Pr√≥ximo jogo do Flamengo',
    '√öltimo jogo do Palmeiras',
    'Posi√ß√£o do Corinthians',
    'Estat√≠sticas do S√£o Paulo',
    'Artilheiros do Brasileir√£o',
    'Tabela do Brasileir√£o',
    'Lista de canais',
    'Onde passa o jogo do Santos',
    'Jogos da semana',
    'Jogos de hoje'
  ];
  
  for (let i = 0; i < testMessages.length; i++) {
    console.log(`\nüß™ TESTE ${i + 1}/${testMessages.length}`);
    console.log('-' .repeat(40));
    
    try {
      const response = await processMessage(testMessages[i]);
      console.log(`üìù Mensagem: "${testMessages[i]}"`);
      console.log(`ü§ñ Resposta:\n${response}\n`);
    } catch (error) {
      console.error(`‚ùå Erro no teste ${i + 1}:`, error.message);
    }
    
    // Pausa entre testes
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  console.log('‚úÖ Testes conclu√≠dos!');
  process.exit(0);
}

// Executar
runTests().catch(error => {
  console.error('‚ùå Erro geral:', error);
  process.exit(1);
}); 