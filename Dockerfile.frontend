# üê≥ Dockerfile Frontend - Cache Busting Otimizado
# For√ßa rebuild sempre que houver mudan√ßas no reposit√≥rio

# Stage 1: Dependencies
FROM node:18-alpine AS deps
RUN apk add --no-cache libc6-compat python3 make g++ git curl

WORKDIR /app

# Cache busting AGRESSIVO - sempre quebra cache
ARG CACHEBUST=1
ARG BUILD_TIMESTAMP
RUN echo "Build: $CACHEBUST - Timestamp: $BUILD_TIMESTAMP - $(date)" > /app/build-info.txt

# SEMPRE clonar reposit√≥rio fresco (sem cache)
RUN rm -rf /tmp/repo || true
RUN git clone --depth=1 https://github.com/designativa07/kmiza27.git /tmp/repo

# Capturar commit e for√ßar rebuild se mudou
RUN cd /tmp/repo && \
    GIT_COMMIT_AUTO=$(git rev-parse HEAD 2>/dev/null || echo "unknown") && \
    GIT_SHORT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown") && \
    echo "export GIT_COMMIT=$GIT_COMMIT_AUTO" > /app/git-commit.sh && \
    echo "GIT_COMMIT=$GIT_COMMIT_AUTO" > /app/build-vars.env && \
    echo "GIT_SHORT=$GIT_SHORT" >> /app/build-vars.env && \
    echo "BUILD_TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> /app/build-vars.env && \
    echo "CACHE_BUSTER=$(date +%s)" >> /app/build-vars.env && \
    echo "üîÑ Commit capturado: $GIT_COMMIT_AUTO ($GIT_SHORT)" && \
    git log --oneline -1

# Quebrar cache baseado no commit atual
RUN cd /tmp/repo && \
    CURRENT_COMMIT=$(git rev-parse HEAD) && \
    echo "CURRENT_COMMIT=$CURRENT_COMMIT" && \
    echo "$CURRENT_COMMIT" > /app/commit-cache-buster.txt

# Copiar package files (sem modificar o JSON)
RUN cp /tmp/repo/frontend/package*.json ./

# Limpar e reinstalar depend√™ncias
RUN rm -rf node_modules package-lock.json
RUN npm install --legacy-peer-deps --no-cache

# Stage 2: Builder
FROM node:18-alpine AS builder
WORKDIR /app

# Copiar depend√™ncias e vari√°veis do stage anterior
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/build-vars.env ./build-vars.env
COPY --from=deps /app/commit-cache-buster.txt ./commit-cache-buster.txt
COPY --from=deps /tmp/repo/frontend ./

# Quebrar cache se commit mudou
RUN . ./build-vars.env && \
    echo "üîÑ Usando commit: $GIT_COMMIT ($GIT_SHORT)" && \
    echo "‚è∞ Build timestamp: $BUILD_TIMESTAMP" && \
    echo "üî• Cache buster: $CACHE_BUSTER"

# Configurar vari√°veis espec√≠ficas do Next.js com cache busting
RUN . ./build-vars.env && \
    export NEXT_PUBLIC_API_URL=https://kmizabot.h4xd66.easypanel.host && \
    export NODE_ENV=production && \
    export NEXT_PUBLIC_BUILD_ID="$GIT_SHORT-$CACHE_BUSTER" && \
    echo "üé® Next.js Build with commit: $GIT_SHORT"

# Build da aplica√ß√£o Next.js com cache busting
RUN . ./build-vars.env && \
    export NEXT_PUBLIC_API_URL=https://kmizabot.h4xd66.easypanel.host && \
    export NODE_ENV=production && \
    export NEXT_PUBLIC_BUILD_ID="$GIT_SHORT-$CACHE_BUSTER" && \
    echo "üèóÔ∏è Building frontend with commit: $GIT_SHORT" && \
    npm run build

# Stage 3: Runner
FROM node:18-alpine AS runner
WORKDIR /app

# Instalar apenas depend√™ncias de runtime
RUN apk add --no-cache curl dumb-init

# Criar usu√°rio n√£o-root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copiar arquivos necess√°rios
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/build-vars.env ./build-vars.env
COPY --from=builder --chown=nextjs:nodejs /app/commit-cache-buster.txt ./commit-cache-buster.txt

# Criar script de inicializa√ß√£o que carrega as vari√°veis
RUN echo '#!/bin/sh' > /app/start.sh && \
    echo '. /app/build-vars.env' >> /app/start.sh && \
    echo 'export GIT_COMMIT' >> /app/start.sh && \
    echo 'export GIT_SHORT' >> /app/start.sh && \
    echo 'export BUILD_TIMESTAMP' >> /app/start.sh && \
    echo 'export CACHE_BUSTER' >> /app/start.sh && \
    echo 'export NEXT_PUBLIC_API_URL=https://kmizabot.h4xd66.easypanel.host' >> /app/start.sh && \
    echo 'export NEXT_PUBLIC_BUILD_ID="$GIT_SHORT-$CACHE_BUSTER"' >> /app/start.sh && \
    echo 'echo "üöÄ Iniciando frontend com commit: $GIT_SHORT"' >> /app/start.sh && \
    echo 'echo "‚è∞ Build: $BUILD_TIMESTAMP"' >> /app/start.sh && \
    echo 'echo "üî• Cache: $CACHE_BUSTER"' >> /app/start.sh && \
    echo 'node server.js' >> /app/start.sh && \
    chmod +x /app/start.sh

# Configurar usu√°rio
USER nextjs

# Vari√°veis de ambiente fixas
ENV NODE_ENV=production
ENV PORT=3002
ENV HOSTNAME="0.0.0.0"

# Health check otimizado
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3002/api/health || exit 1

# Expor porta
EXPOSE 3002

# Usar dumb-init para melhor signal handling
ENTRYPOINT ["dumb-init", "--"]
CMD ["/app/start.sh"] 