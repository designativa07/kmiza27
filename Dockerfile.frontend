# 游꿛 Dockerfile Frontend Otimizado - Auto Commit Detection
# Multi-stage build com captura autom치tica de commit

# Stage 1: Dependencies
FROM node:18-alpine AS deps
RUN apk add --no-cache libc6-compat git curl

WORKDIR /app

# Cache busting com timestamp real
ARG CACHEBUST=1
ARG NEXT_PUBLIC_API_URL=https://kmizabot.h4xd66.easypanel.host
ARG BUILD_TIMESTAMP
RUN echo "Build: $CACHEBUST - API: $NEXT_PUBLIC_API_URL - Timestamp: $BUILD_TIMESTAMP - $(date)" > /app/build-info.txt

# Clone do reposit칩rio atual
RUN git clone https://github.com/designativa07/kmiza27.git /tmp/repo

# Capturar commit automaticamente do reposit칩rio clonado
RUN cd /tmp/repo && \
    GIT_COMMIT_AUTO=$(git rev-parse HEAD 2>/dev/null || echo "unknown") && \
    echo "export GIT_COMMIT=$GIT_COMMIT_AUTO" > /app/git-commit.sh && \
    echo "GIT_COMMIT=$GIT_COMMIT_AUTO" > /app/build-vars.env && \
    echo "BUILD_TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> /app/build-vars.env && \
    echo "NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL" >> /app/build-vars.env && \
    echo "Commit capturado: $GIT_COMMIT_AUTO" && \
    git log --oneline -1

# Copiar apenas package files primeiro (melhor cache)
RUN cp /tmp/repo/frontend/package*.json ./
RUN rm -rf node_modules
RUN npm install --legacy-peer-deps

# Stage 2: Builder
FROM node:18-alpine AS builder
WORKDIR /app

# Copiar depend칡ncias e vari치veis do stage anterior
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/build-vars.env ./build-vars.env
COPY --from=deps /tmp/repo/frontend ./

# Carregar vari치veis de build
RUN . ./build-vars.env && \
    echo "Usando commit: $GIT_COMMIT" && \
    echo "Usando timestamp: $BUILD_TIMESTAMP" && \
    echo "Usando API URL: $NEXT_PUBLIC_API_URL"

# Configurar vari치veis de build para Next.js
ARG NEXT_PUBLIC_API_URL=https://kmizabot.h4xd66.easypanel.host
ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
ENV NODE_ENV=production
ENV DISABLE_ESLINT_PLUGIN=true

# Build da aplica칞칚o Next.js com vari치veis carregadas
RUN . ./build-vars.env && \
    export GIT_COMMIT && \
    export BUILD_TIMESTAMP && \
    npm run build

# Criar pasta public se n칚o existir
RUN mkdir -p ./public

# Stage 3: Runner
FROM node:18-alpine AS runner
WORKDIR /app

# Instalar apenas depend칡ncias de runtime
RUN apk add --no-cache curl dumb-init

# Criar usu치rio n칚o-root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copiar arquivos necess치rios do build
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/build-vars.env ./build-vars.env

# Criar script de inicializa칞칚o que carrega as vari치veis
RUN echo '#!/bin/sh' > /app/start.sh && \
    echo '. /app/build-vars.env' >> /app/start.sh && \
    echo 'export GIT_COMMIT' >> /app/start.sh && \
    echo 'export BUILD_TIMESTAMP' >> /app/start.sh && \
    echo 'export NEXT_PUBLIC_API_URL' >> /app/start.sh && \
    echo 'echo "Iniciando frontend com commit: $GIT_COMMIT"' >> /app/start.sh && \
    echo 'echo "Build timestamp: $BUILD_TIMESTAMP"' >> /app/start.sh && \
    echo 'node server.js' >> /app/start.sh && \
    chmod +x /app/start.sh

# Configurar usu치rio
USER nextjs

# Vari치veis de ambiente fixas
ENV NODE_ENV=production
ENV PORT=3002
ENV HOSTNAME="0.0.0.0"
ENV NODE_OPTIONS="--max-old-space-size=512"
ENV RESTART_POLICY=always

# Health check otimizado
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3002/api/health || curl -f http://localhost:3002 || exit 1

# Expor porta
EXPOSE 3002

# Usar dumb-init para melhor signal handling
ENTRYPOINT ["dumb-init", "--"]
CMD ["/app/start.sh"] 