# üé® Dockerfile Frontend Otimizado - Easypanel Compatible
# Multi-stage build otimizado com detec√ß√£o autom√°tica de commit

# Stage 1: Dependencies
FROM node:18-alpine AS deps
RUN apk add --no-cache libc6-compat

WORKDIR /app

# Copiar package files
COPY frontend/package*.json ./
RUN npm install --legacy-peer-deps

# Stage 2: Builder
FROM node:18-alpine AS builder
WORKDIR /app

# Instalar git para capturar commit
RUN apk add --no-cache git

# Copiar todo o contexto (incluindo .git)
COPY . ./project-root/

# Capturar commit automaticamente
RUN cd project-root && \
    GIT_COMMIT_AUTO=$(git rev-parse HEAD 2>/dev/null | cut -c1-8 || echo "84b849d") && \
    echo "üîç Commit detectado: $GIT_COMMIT_AUTO" && \
    echo $GIT_COMMIT_AUTO > /tmp/git-commit.txt

# Copiar depend√™ncias do stage anterior
COPY --from=deps /app/node_modules ./node_modules
COPY frontend ./

# Definir vari√°veis de build com commit autom√°tico
ARG NEXT_PUBLIC_API_URL=https://kmizabot.h4xd66.easypanel.host
ARG BUILD_TIMESTAMP

# Ler commit do arquivo gerado
RUN GIT_COMMIT_FROM_FILE=$(cat /tmp/git-commit.txt 2>/dev/null || echo "84b849d") && \
    export GIT_COMMIT=${GIT_COMMIT:-$GIT_COMMIT_FROM_FILE} && \
    export BUILD_TIMESTAMP=${BUILD_TIMESTAMP:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")} && \
    echo "üîç Build Info:" && \
    echo "API URL: $NEXT_PUBLIC_API_URL" && \
    echo "Git Commit: $GIT_COMMIT" && \
    echo "Build Time: $BUILD_TIMESTAMP" && \
    echo "GIT_COMMIT=$GIT_COMMIT" >> .env.local && \
    echo "BUILD_TIMESTAMP=$BUILD_TIMESTAMP" >> .env.local && \
    echo "NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL" >> .env.local

ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
ENV NODE_ENV=production
ENV DISABLE_ESLINT_PLUGIN=true

# Build da aplica√ß√£o Next.js
RUN npm run build

# Stage 3: Runner
FROM node:18-alpine AS runner
WORKDIR /app

# Instalar depend√™ncias de runtime
RUN apk add --no-cache curl dumb-init

# Criar usu√°rio n√£o-root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copiar arquivos necess√°rios do build
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/.env.local ./.env.local

# Criar pasta public (Next.js precisa dela mesmo se vazia)
RUN mkdir -p ./public

# Ler vari√°veis do build
RUN if [ -f .env.local ]; then \
      export $(cat .env.local | xargs) && \
      echo "üöÄ Runtime Info:" && \
      echo "Git Commit: $GIT_COMMIT" && \
      echo "Build Time: $BUILD_TIMESTAMP"; \
    fi

ENV NODE_ENV=production
ENV PORT=3002
ENV HOSTNAME="0.0.0.0"

# Configurar usu√°rio
USER nextjs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3002/api/health || exit 1

# Expor porta
EXPOSE 3002

# Iniciar aplica√ß√£o
CMD ["node", "server.js"] 