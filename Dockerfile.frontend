# üê≥ Dockerfile Frontend - Otimizado para Auto-Deploy
# Usa contexto local com cache busting eficiente

# Stage 1: Dependencies
FROM node:18-alpine AS deps
RUN apk add --no-cache libc6-compat python3 make g++

WORKDIR /app

# Cache busting com argumentos de build
ARG CACHEBUST
ARG BUILD_TIMESTAMP
ARG GITHUB_SHA

# Definir vari√°veis de cache busting
ENV CACHE_BUSTER=${CACHEBUST:-$(date +%s)}
ENV BUILD_TS=${BUILD_TIMESTAMP:-$(date -u +%Y-%m-%dT%H:%M:%SZ)}
ENV GIT_COMMIT=${GITHUB_SHA:-unknown}

# Log das vari√°veis de build
RUN echo "üî• CACHE BUSTER: $CACHE_BUSTER" && \
    echo "‚è∞ BUILD TIME: $BUILD_TS" && \
    echo "üêô GIT COMMIT: $GIT_COMMIT" && \
    echo "Build: $CACHE_BUSTER - Timestamp: $BUILD_TS - $(date)" > /app/build-info.txt

# Copiar package files do contexto local
COPY frontend/package*.json ./

# Limpar cache e instalar depend√™ncias
RUN npm cache clean --force && \
    rm -rf node_modules package-lock.json && \
    npm install --legacy-peer-deps

# Stage 2: Builder
FROM node:18-alpine AS builder
WORKDIR /app

# Copiar depend√™ncias do stage anterior
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/build-info.txt ./build-info.txt

# Copiar c√≥digo fonte do contexto local
COPY frontend/ ./

# Receber argumentos de build novamente
ARG CACHEBUST
ARG BUILD_TIMESTAMP
ARG GITHUB_SHA

# Configurar vari√°veis de ambiente para build
ENV NODE_ENV=production
ENV NEXT_PUBLIC_API_URL=https://kmizabot.h4xd66.easypanel.host
ENV NEXT_PUBLIC_BUILD_ID=${GITHUB_SHA:-unknown}-${CACHEBUST:-$(date +%s)}
ENV BUILD_TIMESTAMP=${BUILD_TIMESTAMP:-$(date -u +%Y-%m-%dT%H:%M:%SZ)}
ENV GIT_COMMIT=${GITHUB_SHA:-unknown}

# Log das vari√°veis de build
RUN echo "üèóÔ∏è Building frontend with:" && \
    echo "  üêô Commit: $GIT_COMMIT" && \
    echo "  üî• Build ID: $NEXT_PUBLIC_BUILD_ID" && \
    echo "  ‚è∞ Timestamp: $BUILD_TIMESTAMP"

# Build da aplica√ß√£o Next.js
RUN npm run build

# Stage 3: Runner
FROM node:18-alpine AS runner
WORKDIR /app

# Instalar depend√™ncias de runtime
RUN apk add --no-cache curl dumb-init

# Criar usu√°rio n√£o-root
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copiar arquivos necess√°rios
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Receber argumentos de build para runtime
ARG CACHEBUST
ARG BUILD_TIMESTAMP
ARG GITHUB_SHA

# Criar arquivo com vari√°veis de ambiente
RUN echo "export NODE_ENV=production" > /app/runtime-env.sh && \
    echo "export PORT=3002" >> /app/runtime-env.sh && \
    echo "export HOSTNAME=0.0.0.0" >> /app/runtime-env.sh && \
    echo "export NEXT_PUBLIC_API_URL=https://kmizabot.h4xd66.easypanel.host" >> /app/runtime-env.sh && \
    echo "export BUILD_TIMESTAMP=\"${BUILD_TIMESTAMP:-$(date -u +%Y-%m-%dT%H:%M:%SZ)}\"" >> /app/runtime-env.sh && \
    echo "export GIT_COMMIT=\"${GITHUB_SHA:-unknown}\"" >> /app/runtime-env.sh && \
    echo "export CACHE_BUSTER=\"${CACHEBUST:-$(date +%s)}\"" >> /app/runtime-env.sh && \
    chmod +x /app/runtime-env.sh

# Criar script de inicializa√ß√£o
RUN echo '#!/bin/sh' > /app/start.sh && \
    echo '. /app/runtime-env.sh' >> /app/start.sh && \
    echo 'echo "üöÄ Iniciando frontend..."' >> /app/start.sh && \
    echo 'echo "  üêô Commit: $GIT_COMMIT"' >> /app/start.sh && \
    echo 'echo "  ‚è∞ Build: $BUILD_TIMESTAMP"' >> /app/start.sh && \
    echo 'echo "  üî• Cache: $CACHE_BUSTER"' >> /app/start.sh && \
    echo 'node server.js' >> /app/start.sh && \
    chmod +x /app/start.sh

# Configurar usu√°rio
USER nextjs

# Vari√°veis de ambiente
ENV NODE_ENV=production
ENV PORT=3002
ENV HOSTNAME="0.0.0.0"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3002/api/health || exit 1

# Expor porta
EXPOSE 3002

# Inicializar com dumb-init
ENTRYPOINT ["dumb-init", "--"]
CMD ["/app/start.sh"] 