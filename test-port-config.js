const axios = require('axios');

async function testPortConfig() {
    console.log('üîç Testando configura√ß√£o de porta no Easypanel...');
    console.log('=' .repeat(60));
    
    const tests = [
        {
            name: 'P√°gina Principal',
            url: 'https://kmiza27-kmizabot.h4xd66.easypanel.host',
            expected: 'Deve retornar a p√°gina principal ou API'
        },
        {
            name: 'Health Check',
            url: 'https://kmiza27-kmizabot.h4xd66.easypanel.host/health',
            expected: 'Deve retornar status: ok'
        },
        {
            name: 'API Base',
            url: 'https://kmiza27-kmizabot.h4xd66.easypanel.host/api',
            expected: 'Pode retornar 404 (normal se n√£o tiver rota /api)'
        },
        {
            name: 'Webhook Endpoint',
            url: 'https://kmiza27-kmizabot.h4xd66.easypanel.host/chatbot/webhook',
            expected: 'Deve aceitar POST (pode dar erro em GET)'
        },
        {
            name: 'Porta 3000 Direta (N√ÉO deve funcionar)',
            url: 'https://kmiza27-kmizabot.h4xd66.easypanel.host:3000',
            expected: 'Deve falhar - porta interna n√£o exposta'
        }
    ];
    
    for (const test of tests) {
        console.log(`\nüß™ ${test.name}`);
        console.log(`üîó URL: ${test.url}`);
        console.log(`üìã Esperado: ${test.expected}`);
        
        try {
            const response = await axios.get(test.url, { 
                timeout: 10000,
                validateStatus: function (status) {
                    return status < 600; // Aceitar qualquer status < 600
                }
            });
            
            console.log(`‚úÖ Status: ${response.status} - ${response.statusText}`);
            
            if (response.status === 200 && response.data) {
                const preview = JSON.stringify(response.data).substring(0, 150);
                console.log(`üìä Resposta: ${preview}${preview.length >= 150 ? '...' : ''}`);
            }
            
        } catch (error) {
            if (error.code === 'ECONNREFUSED') {
                console.log(`‚ùå Conex√£o recusada - Container n√£o est√° rodando`);
            } else if (error.code === 'ETIMEDOUT') {
                console.log(`‚è±Ô∏è Timeout - Container pode estar iniciando`);
            } else if (error.response) {
                console.log(`‚ö†Ô∏è Status: ${error.response.status} - ${error.response.statusText}`);
                
                if (error.response.status === 502) {
                    console.log(`üîß Erro 502: Problema de configura√ß√£o de porta!`);
                }
            } else {
                console.log(`‚ùå Erro: ${error.message}`);
            }
        }
    }
    
    console.log('\n' + '=' .repeat(60));
    console.log('üìã Diagn√≥stico:');
    
    console.log('\nüéØ Se todos retornaram 502:');
    console.log('   ‚Üí Container n√£o est√° rodando na porta 3000');
    console.log('   ‚Üí Verificar configura√ß√£o de porta no Easypanel');
    console.log('   ‚Üí Verificar logs do container');
    
    console.log('\n‚úÖ Se /health retornou 200:');
    console.log('   ‚Üí Aplica√ß√£o est√° funcionando!');
    console.log('   ‚Üí Configura√ß√£o de porta est√° correta');
    
    console.log('\nüîß Pr√≥ximos passos se houver erro 502:');
    console.log('   1. No Easypanel: App Settings ‚Üí Port: 3000');
    console.log('   2. Verificar vari√°vel PORT=3000');
    console.log('   3. Rebuild/Restart o container');
    console.log('   4. Verificar logs para erros de inicializa√ß√£o');
}

testPortConfig(); 