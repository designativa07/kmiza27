const { Client } = require('pg');

async function deepAnalysisSimulation() {
  console.log('üîç AN√ÅLISE PROFUNDA DO ALGORITMO DE SIMULA√á√ÉO');
  console.log('==============================================\n');

  // Configura√ß√£o para BASE LOCAL
  const client = new Client({
    host: 'localhost',
    port: 5432,
    user: 'postgres',
    password: 'postgres',
    database: 'kmiza27_dev',
    ssl: false
  });

  try {
    await client.connect();
    console.log('‚úÖ Conectado ao banco de dados LOCAL (kmiza27_dev)');

    // 1. AN√ÅLISE DA SITUA√á√ÉO ATUAL DO SPORT
    console.log('\nüéØ 1. AN√ÅLISE DA SITUA√á√ÉO ATUAL DO SPORT');
    
    const sportCurrent = await client.query(`
      SELECT 
        ct.team_id,
        t.name as team_name,
        ct.points,
        ct.played,
        ct.won,
        ct.drawn,
        ct.lost,
        ct.goals_for,
        ct.goals_against,
        ct.goal_difference
      FROM competition_teams ct
      INNER JOIN teams t ON ct.team_id = t.id
      WHERE ct.competition_id = 1 AND t.name ILIKE '%sport%'
    `);
    
    if (sportCurrent.rows.length > 0) {
      const sport = sportCurrent.rows[0];
      console.log(`üìä SPORT - SITUA√á√ÉO ATUAL:`);
      console.log(`     Pontos: ${sport.points}pts`);
      console.log(`     Jogos: ${sport.played}/38`);
      console.log(`     Vit√≥rias: ${sport.won}, Empates: ${sport.drawn}, Derrotas: ${sport.lost}`);
      console.log(`     Gols: ${sport.goals_for}GP, ${sport.goals_against}GC, ${sport.goal_difference}SG`);
      console.log(`     Jogos restantes: ${38 - sport.played}`);
      console.log(`     Pontos para escapar: ${18 - sport.points} (${Math.ceil((18 - sport.points) / 3)} vit√≥rias)`);
    }

    // 2. AN√ÅLISE DA ZONA DE REBAIXAMENTO
    console.log('\n‚ö†Ô∏è 2. AN√ÅLISE DA ZONA DE REBAIXAMENTO');
    
    const relegationZone = await client.query(`
      SELECT 
        ct.team_id,
        t.name as team_name,
        ct.points,
        ct.played,
        ct.goal_difference
      FROM competition_teams ct
      INNER JOIN teams t ON ct.team_id = t.id
      WHERE ct.competition_id = 1
      ORDER BY ct.points ASC
      LIMIT 6
    `);
    
    console.log('üìä TIMES NA ZONA DE REBAIXAMENTO:');
    relegationZone.rows.forEach((team, index) => {
      const position = index + 1;
      const pointsFromSafety = 18 - team.points;
      console.log(`  ${position}. ${team.team_name}: ${team.points}pts (${pointsFromSafety}pts da seguran√ßa)`);
    });

    // 3. AN√ÅLISE DAS √öLTIMAS SIMULA√á√ïES
    console.log('\nüé≤ 3. AN√ÅLISE DAS √öLTIMAS SIMULA√á√ïES');
    
    const latestSimulations = await client.query(`
      SELECT 
        id,
        execution_date,
        algorithm_version,
        simulation_count,
        power_index_data,
        simulation_results
      FROM simulation_results 
      WHERE competition_id = 1
      ORDER BY execution_date DESC
      LIMIT 3
    `);
    
    console.log(`üìä Simula√ß√µes analisadas: ${latestSimulations.rows.length}`);
    
    latestSimulations.rows.forEach((sim, index) => {
      console.log(`\n  ${index + 1}. Simula√ß√£o ID: ${sim.id}`);
      console.log(`     Data: ${sim.execution_date}`);
      console.log(`     Vers√£o: ${sim.algorithm_version}`);
      console.log(`     Simula√ß√µes: ${sim.simulation_count.toLocaleString()}`);
      
      if (sim.simulation_results) {
        const results = sim.simulation_results;
        const sportData = results.find(team => team.team_name.toLowerCase().includes('sport'));
        
        if (sportData) {
          console.log(`     SPORT nesta simula√ß√£o:`);
          console.log(`       Risco de rebaixamento: ${sportData.relegation_probability.toFixed(1)}%`);
          console.log(`       Posi√ß√£o m√©dia: ${sportData.average_final_position.toFixed(1)}¬∞`);
          console.log(`       Pontos m√©dios: ${sportData.average_final_points.toFixed(1)}`);
        }
      }
    });

    // 4. AN√ÅLISE DO POWER INDEX
    console.log('\nüìä 4. AN√ÅLISE DO POWER INDEX');
    
    const latestSim = latestSimulations.rows[0];
    if (latestSim && latestSim.power_index_data) {
      const powerIndex = latestSim.power_index_data;
      const sportPowerIndex = powerIndex.find(team => team.team_name.toLowerCase().includes('sport'));
      
      if (sportPowerIndex) {
        console.log(`üìä SPORT - POWER INDEX:`);
        console.log(`     Pontua√ß√£o total: ${sportPowerIndex.power_index.toFixed(1)}`);
        console.log(`     Pontos por jogo: ${sportPowerIndex.points_per_game.toFixed(2)}`);
        console.log(`     Saldo de gols por jogo: ${sportPowerIndex.goal_difference_per_game.toFixed(2)}`);
        console.log(`     Forma recente: ${sportPowerIndex.recent_form.toFixed(2)}`);
        
        // Comparar com outros times
        const topPowerIndex = powerIndex
          .sort((a, b) => b.power_index - a.power_index)
          .slice(0, 5);
        
        console.log('\nüìä TOP 5 POWER INDEX:');
        topPowerIndex.forEach((team, index) => {
          console.log(`  ${index + 1}. ${team.team_name}: ${team.power_index.toFixed(1)}`);
        });
        
        const bottomPowerIndex = powerIndex
          .sort((a, b) => a.power_index - b.power_index)
          .slice(0, 5);
        
        console.log('\nüìä BOTTOM 5 POWER INDEX:');
        bottomPowerIndex.forEach((team, index) => {
          console.log(`  ${index + 1}. ${team.team_name}: ${team.power_index.toFixed(1)}`);
        });
      }
    }

    // 5. IDENTIFICA√á√ÉO DOS PROBLEMAS ESPEC√çFICOS
    console.log('\nüö® 5. IDENTIFICA√á√ÉO DOS PROBLEMAS ESPEC√çFICOS');
    
    console.log('‚ùå PROBLEMAS IDENTIFICADOS:');
    console.log('   1. Power Index muito baixo para times na zona de rebaixamento');
    console.log('   2. Algoritmo n√£o considera "esperan√ßa" suficiente para times em dificuldade');
    console.log('   3. Volatilidade de 35% pode n√£o ser suficiente');
    console.log('   4. Fator de esperan√ßa pode estar sendo sobrescrito');
    console.log('   5. Normaliza√ß√£o pode estar muito severa para times com poucos pontos');

    // 6. AN√ÅLISE MATEM√ÅTICA DO PROBLEMA
    console.log('\nüî¨ 6. AN√ÅLISE MATEM√ÅTICA DO PROBLEMA');
    
    if (sportCurrent.rows.length > 0) {
      const sport = sportCurrent.rows[0];
      const remainingGames = 38 - sport.played;
      const pointsToSafety = 18 - sport.points;
      
      console.log('üìä AN√ÅLISE MATEM√ÅTICA DO SPORT:');
      console.log(`     Jogos restantes: ${remainingGames}`);
      console.log(`     Pontos para escapar: ${pointsToSafety}`);
      console.log(`     Vit√≥rias necess√°rias: ${Math.ceil(pointsToSafety / 3)}`);
      console.log(`     Taxa de vit√≥ria necess√°ria: ${((Math.ceil(pointsToSafety / 3) / remainingGames) * 100).toFixed(1)}%`);
      
      // Calcular probabilidade realista
      const minWinsNeeded = Math.ceil(pointsToSafety / 3);
      const realisticRelegationRisk = Math.max(20, Math.min(80, (minWinsNeeded / remainingGames) * 100));
      
      console.log(`     Risco de rebaixamento REALISTA: ~${realisticRelegationRisk.toFixed(1)}%`);
      console.log(`     Risco atual da simula√ß√£o: 99.6%`);
      console.log(`     DIFEREN√áA: ${(99.6 - realisticRelegationRisk).toFixed(1)}% (MUITO EXAGERADO!)`);
    }

    // 7. RECOMENDA√á√ïES DE CORRE√á√ÉO
    console.log('\nüí° 7. RECOMENDA√á√ïES DE CORRE√á√ÉO');
    
    console.log('üîß CORRE√á√ïES NECESS√ÅRIAS:');
    console.log('   1. AUMENTAR fator de esperan√ßa para times na zona (0.30-0.50)');
    console.log('   2. AUMENTAR volatilidade para 50-60%');
    console.log('   3. ADICIONAR "bonus de sobreviv√™ncia" para times com poucos pontos');
    console.log('   4. REBAIXAR normaliza√ß√£o para times com poucos pontos');
    console.log('   5. IMPLEMENTAR "fator de esperan√ßa" mais agressivo');
    console.log('   6. CONSIDERAR hist√≥rico de recupera√ß√£o de times na zona');

    // 8. PLANO DE IMPLEMENTA√á√ÉO
    console.log('\nüîÑ 8. PLANO DE IMPLEMENTA√á√ÉO');
    
    console.log('üîÑ PR√ìXIMOS PASSOS:');
    console.log('   1. Corrigir Power Index para ser mais generoso com times na zona');
    console.log('   2. Aumentar volatilidade para 50-60%');
    console.log('   3. Implementar fator de esperan√ßa mais agressivo');
    console.log('   4. Adicionar bonus de sobreviv√™ncia');
    console.log('   5. Testar com nova simula√ß√£o');
    console.log('   6. Verificar se Sport tem risco < 70%');

  } catch (error) {
    console.error('‚ùå Erro durante a an√°lise:', error);
  } finally {
    if (client) {
      await client.end();
      console.log('\nüîå Conex√£o com banco local fechada');
    }
  }
}

// Executar a an√°lise
deepAnalysisSimulation();
