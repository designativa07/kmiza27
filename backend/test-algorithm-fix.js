const { Client } = require('pg');

async function testAlgorithmFix() {
  console.log('üß™ TESTANDO CORRE√á√ÉO DO ALGORITMO');
  console.log('===================================\n');

  // Configura√ß√£o para BASE LOCAL
  const client = new Client({
    host: 'localhost',
    port: 5432,
    user: 'postgres',
    password: 'postgres',
    database: 'kmiza27_dev',
    ssl: false
  });

  try {
    await client.connect();
    console.log('‚úÖ Conectado ao banco de dados LOCAL (kmiza27_dev)');

    // 1. VERIFICAR √öLTIMA SIMULA√á√ÉO
    console.log('\nüîç 1. VERIFICANDO √öLTIMA SIMULA√á√ÉO');
    
    const latestSimulation = await client.query(`
      SELECT 
        id,
        execution_date,
        algorithm_version,
        simulation_count,
        power_index_data,
        simulation_results
      FROM simulation_results 
      WHERE competition_id = 1
      ORDER BY execution_date DESC
      LIMIT 1
    `);
    
    if (latestSimulation.rows.length === 0) {
      console.log('‚ùå Nenhuma simula√ß√£o encontrada');
      return;
    }

    const latest = latestSimulation.rows[0];
    console.log(`üìä √öLTIMA SIMULA√á√ÉO:`);
    console.log(`     ID: ${latest.id}`);
    console.log(`     Data: ${latest.execution_date}`);
    console.log(`     Vers√£o: ${latest.algorithm_version}`);
    console.log(`     Simula√ß√µes: ${latest.simulation_count.toLocaleString()}`);

    // 2. RESUMO DA CORRE√á√ÉO IMPLEMENTADA
    console.log('\nüîß 2. CORRE√á√ÉO IMPLEMENTADA');
    
    console.log('üìä PROBLEMA IDENTIFICADO:');
    console.log('   ‚ùå simulateMatchResult estava sendo chamado com homeAdvantage = 0.20 fixo');
    console.log('   ‚ùå Isso sobrescrevia o valor padr√£o do m√©todo (0.15)');
    console.log('   ‚ùå O algoritmo refatorado n√£o estava sendo usado corretamente');
    
    console.log('\nüìä CORRE√á√ÉO APLICADA:');
    console.log('   ‚úÖ Removido o par√¢metro fixo 0.20');
    console.log('   ‚úÖ Agora usa o valor padr√£o do m√©todo (0.15)');
    console.log('   ‚úÖ O algoritmo refatorado ser√° executado corretamente');
    
    console.log('\nüìä EFEITOS ESPERADOS:');
    console.log('   ‚Ä¢ Vantagem de casa reduzida para 15% (n√£o mais 20%)');
    console.log('   ‚Ä¢ Probabilidades mais equilibradas');
    console.log('   ‚Ä¢ Sport com risco < 50% (n√£o mais 100%)');
    console.log('   ‚Ä¢ Flamengo com t√≠tulo < 40% (n√£o mais 84%)');

    // 3. AN√ÅLISE ATUAL (ANTES DA CORRE√á√ÉO)
    console.log('\nüìä 3. AN√ÅLISE ATUAL (ANTES DA CORRE√á√ÉO)');
    
    if (latest.simulation_results) {
      const results = latest.simulation_results;
      
      // An√°lise do Sport
      const sportData = results.find(team => team.team_name.toLowerCase().includes('sport'));
      if (sportData) {
        console.log('\nüéØ SPORT - SITUA√á√ÉO ATUAL:');
        console.log(`     Risco de rebaixamento: ${sportData.relegation_probability.toFixed(1)}%`);
        console.log(`     Posi√ß√£o m√©dia: ${sportData.average_final_position.toFixed(1)}¬∞`);
        console.log(`     Pontos m√©dios: ${sportData.average_final_points.toFixed(1)}`);
        console.log(`     Posi√ß√£o atual: ${sportData.current_position}¬∫`);
        
        if (sportData.relegation_probability > 90) {
          console.log('‚ùå RISCO AINDA MUITO ALTO - Corre√ß√£o necess√°ria');
        } else if (sportData.relegation_probability > 70) {
          console.log('‚ö†Ô∏è RISCO ALTO - Melhorou mas ainda precisa de ajustes');
        } else {
          console.log('‚úÖ RISCO ACEIT√ÅVEL - Corre√ß√£o funcionou!');
        }
      }
      
      // An√°lise do Flamengo
      const flamengoData = results.find(team => team.team_name.toLowerCase().includes('flamengo'));
      if (flamengoData) {
        console.log('\nü¶Ö FLAMENGO - SITUA√á√ÉO ATUAL:');
        console.log(`     Chance de t√≠tulo: ${flamengoData.title_probability.toFixed(1)}%`);
        console.log(`     Posi√ß√£o m√©dia: ${flamengoData.average_final_position.toFixed(1)}¬∞`);
        console.log(`     Pontos m√©dios: ${flamengoData.average_final_points.toFixed(1)}`);
        
        if (flamengoData.title_probability > 60) {
          console.log('‚ùå CHANCE AINDA MUITO ALTA - Corre√ß√£o necess√°ria');
        } else if (flamengoData.title_probability > 40) {
          console.log('‚ö†Ô∏è CHANCE ALTA - Melhorou mas ainda precisa de ajustes');
        } else {
          console.log('‚úÖ CHANCE ACEIT√ÅVEL - Corre√ß√£o funcionou!');
        }
      }
      
      // An√°lise geral
      const extremeTitle = results.filter(team => team.title_probability > 60);
      const extremeRelegation = results.filter(team => team.relegation_probability > 80);
      
      console.log('\nüìä PROBABILIDADES EXTREMAS ATUAIS:');
      console.log(`     Times com >60% t√≠tulo: ${extremeTitle.length}`);
      console.log(`     Times com >80% rebaixamento: ${extremeRelegation.length}`);
      
      if (extremeTitle.length > 0) {
        console.log('\n‚ö†Ô∏è TIMES COM PROBABILIDADE EXTREMA DE T√çTULO:');
        extremeTitle.forEach(team => {
          console.log(`     ${team.team_name}: ${team.title_probability.toFixed(1)}%`);
        });
      }
      
      if (extremeRelegation.length > 0) {
        console.log('\n‚ö†Ô∏è TIMES COM PROBABILIDADE EXTREMA DE REBAIXAMENTO:');
        extremeRelegation.forEach(team => {
          console.log(`     ${team.team_name}: ${team.relegation_probability.toFixed(1)}%`);
        });
      }
    }

    // 4. PR√ìXIMOS PASSOS
    console.log('\nüîÑ 4. PR√ìXIMOS PASSOS');
    
    console.log('üîÑ PARA TESTAR A CORRE√á√ÉO:');
    console.log('   1. ‚úÖ C√≥digo j√° foi recompilado');
    console.log('   2. üîÑ REINICIAR O BACKEND (obrigat√≥rio!)');
    console.log('   3. üéØ Executar nova simula√ß√£o de teste');
    console.log('   4. üìä Verificar se Sport tem risco < 50%');
    console.log('   5. üìä Verificar se Flamengo tem t√≠tulo < 40%');
    
    console.log('\n‚ö†Ô∏è IMPORTANTE:');
    console.log('   ‚Ä¢ A corre√ß√£o foi implementada e compilada');
    console.log('   ‚Ä¢ O erro estava no par√¢metro fixo 0.20');
    console.log('   ‚Ä¢ Agora o algoritmo refatorado ser√° executado corretamente');
    console.log('   ‚Ä¢ Backend PRECISA ser reiniciado');

    // 5. RESUMO FINAL
    console.log('\nüéØ 5. RESUMO FINAL');
    
    console.log('‚úÖ STATUS ATUAL:');
    console.log('   ‚Ä¢ Erro identificado e corrigido');
    console.log('   ‚Ä¢ Algoritmo refatorado ser√° executado corretamente');
    console.log('   ‚Ä¢ Vantagem de casa ser√° 15% (n√£o mais 20%)');
    console.log('   ‚Ä¢ Probabilidades devem ser muito mais realistas');
    console.log('   ‚Ä¢ Backend precisa ser reiniciado');
    
    console.log('\nüéâ PR√ìXIMA SIMULA√á√ÉO DEVE FUNCIONAR CORRETAMENTE!');
    console.log('   ‚Ä¢ Algoritmo refatorado ser√° executado');
    console.log('   ‚Ä¢ Probabilidades muito mais equilibradas');
    console.log('   ‚Ä¢ Sport com chance real de escapar da zona');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  } finally {
    if (client) {
      await client.end();
      console.log('\nüîå Conex√£o com banco local fechada');
    }
  }
}

// Executar o teste
testAlgorithmFix();
