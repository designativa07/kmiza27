const { Client } = require('pg');

async function checkCorrectedResults() {
  console.log('üîç VERIFICANDO RESULTADOS DAS SIMULA√á√ïES CORRIGIDAS');
  console.log('=====================================================\n');

  // Configura√ß√£o para BASE LOCAL
  const client = new Client({
    host: 'localhost',
    port: 5432,
    user: 'postgres',
    password: 'postgres',
    database: 'kmiza27_dev',
    ssl: false
  });

  try {
    await client.connect();
    console.log('‚úÖ Conectado ao banco de dados LOCAL (kmiza27_dev)');

    // 1. VERIFICAR SIMULA√á√ÉO MAIS RECENTE (VERS√ÉO 3.0.0)
    console.log('\nüéØ 1. VERIFICANDO SIMULA√á√ÉO MAIS RECENTE (VERS√ÉO 3.0.0)');
    
    const latestSimulation = await client.query(`
      SELECT 
        id,
        execution_date,
        simulation_count,
        algorithm_version,
        power_index_data,
        simulation_results
      FROM simulation_results 
      WHERE competition_id = 1 AND is_latest = true
      ORDER BY execution_date DESC
      LIMIT 1
    `);
    
    if (latestSimulation.rows.length === 0) {
      console.log('‚ùå Nenhuma simula√ß√£o mais recente encontrada!');
      return;
    }
    
    const simulation = latestSimulation.rows[0];
    console.log(`üìä Simula√ß√£o ID: ${simulation.id}`);
    console.log(`üìÖ Data: ${simulation.execution_date}`);
    console.log(`üé≤ Simula√ß√µes: ${simulation.simulation_count.toLocaleString()}`);
    console.log(`üîß Vers√£o: ${simulation.algorithm_version}`);

    // 2. ANALISAR POWER INDEX CORRIGIDO
    console.log('\nüìä 2. ANALISANDO POWER INDEX CORRIGIDO');
    
    if (!simulation.power_index_data) {
      console.log('‚ùå Dados do Power Index n√£o encontrados!');
      return;
    }
    
    const powerIndex = simulation.power_index_data;
    console.log(`üìã Total de times no Power Index: ${powerIndex.length}`);
    
    // Mostrar top 10 times com Power Index
    const topPowerIndex = powerIndex
      .sort((a, b) => b.power_index - a.power_index)
      .slice(0, 10);
    
    console.log('\nüèÜ TOP 10 POWER INDEX (CORRIGIDO):');
    topPowerIndex.forEach((team, index) => {
      console.log(`  ${index + 1}. ${team.team_name}: ${team.power_index.toFixed(1)}`);
    });

    // 3. ANALISAR RESULTADOS DA SIMULA√á√ÉO CORRIGIDA
    console.log('\nüé≤ 3. ANALISANDO RESULTADOS DA SIMULA√á√ÉO CORRIGIDA');
    
    if (!simulation.simulation_results) {
      console.log('‚ùå Resultados da simula√ß√£o n√£o encontrados!');
      return;
    }
    
    const results = simulation.simulation_results;
    console.log(`üìã Total de times nos resultados: ${results.length}`);
    
    // 4. ANALISAR PROBABILIDADES DE T√çTULO
    console.log('\nüèÜ 4. AN√ÅLISE DETALHADA - CHANCES DE T√çTULO');
    
    const titleChances = results
      .sort((a, b) => b.title_probability - a.title_probability)
      .slice(0, 10);
    
    console.log('üìä TOP 10 CHANCES DE T√çTULO (CORRIGIDAS):');
    titleChances.forEach((team, index) => {
      console.log(`  ${index + 1}. ${team.team_name}: ${team.title_probability.toFixed(1)}%`);
    });

    // 5. ANALISAR RISCOS DE REBAIXAMENTO
    console.log('\n‚ö†Ô∏è 5. AN√ÅLISE DETALHADA - RISCOS DE REBAIXAMENTO');
    
    const relegationRisks = results
      .sort((a, b) => b.relegation_probability - a.relegation_probability)
      .slice(0, 10);
    
    console.log('üìä TOP 10 RISCOS DE REBAIXAMENTO (CORRIGIDOS):');
    relegationRisks.forEach((team, index) => {
      console.log(`  ${index + 1}. ${team.team_name}: ${team.relegation_probability.toFixed(1)}%`);
    });

    // 6. VERIFICAR SE AS PROBABILIDADES FAZEM SENTIDO
    console.log('\nüîç 6. VERIFICANDO SE AS PROBABILIDADES FAZEM SENTIDO');
    
    const totalTitleProbability = results.reduce((sum, team) => sum + team.title_probability, 0);
    const totalRelegationProbability = results.reduce((sum, team) => sum + team.relegation_probability, 0);
    
    console.log(`üìä Soma total das probabilidades de t√≠tulo: ${totalTitleProbability.toFixed(1)}%`);
    console.log(`üìä Soma total dos riscos de rebaixamento: ${totalRelegationProbability.toFixed(1)}%`);
    
    if (Math.abs(totalTitleProbability - 100) > 1) {
      console.log(`‚ùå PROBLEMA: Soma das probabilidades de t√≠tulo deveria ser 100%, mas √© ${totalTitleProbability.toFixed(1)}%`);
    } else {
      console.log(`‚úÖ Soma das probabilidades de t√≠tulo est√° correta: ${totalTitleProbability.toFixed(1)}%`);
    }

    if (Math.abs(totalRelegationProbability - 100) > 1) {
      console.log(`‚ùå PROBLEMA: Soma dos riscos de rebaixamento deveria ser 100%, mas √© ${totalRelegationProbability.toFixed(1)}%`);
    } else {
      console.log(`‚úÖ Soma dos riscos de rebaixamento est√° correta: ${totalRelegationProbability.toFixed(1)}%`);
    }

    // 7. AN√ÅLISE ESPEC√çFICA DO SPORT
    console.log('\nüéØ 7. AN√ÅLISE ESPEC√çFICA DO SPORT');
    
    const sportData = results.find(team => team.team_name.toLowerCase().includes('sport'));
    if (sportData) {
      console.log(`üìä SPORT (SIMULA√á√ÉO CORRIGIDA):`);
      console.log(`     Chance de t√≠tulo: ${sportData.title_probability.toFixed(1)}%`);
      console.log(`     Risco de rebaixamento: ${sportData.relegation_probability.toFixed(1)}%`);
      console.log(`     Posi√ß√£o m√©dia: ${sportData.average_final_position.toFixed(1)}¬∞`);
      console.log(`     Pontos m√©dios: ${sportData.average_final_points.toFixed(1)}`);
      
      // Verificar se est√° mais realista
      if (sportData.relegation_probability < 95) {
        console.log(`     ‚úÖ MELHORIA: Risco de rebaixamento mais realista!`);
      } else {
        console.log(`     ‚ùå AINDA ALTO: Risco de rebaixamento ainda muito alto`);
      }
    }

    // 8. COMPARA√á√ÉO COM SIMULA√á√ÉO ANTERIOR
    console.log('\nüìä 8. COMPARA√á√ÉO COM SIMULA√á√ÉO ANTERIOR');
    
    const previousSimulation = await client.query(`
      SELECT 
        algorithm_version,
        simulation_results
      FROM simulation_results 
      WHERE competition_id = 1 AND algorithm_version = '2.0.0'
      ORDER BY execution_date DESC
      LIMIT 1
    `);
    
    if (previousSimulation.rows.length > 0) {
      const previous = previousSimulation.rows[0];
      const previousResults = previous.simulation_results;
      
      if (previousResults) {
        const previousFlamengo = previousResults.find(team => team.team_name.toLowerCase().includes('flamengo'));
        const previousSport = previousResults.find(team => team.team_name.toLowerCase().includes('sport'));
        
        const currentFlamengo = results.find(team => team.team_name.toLowerCase().includes('flamengo'));
        const currentSport = results.find(team => team.team_name.toLowerCase().includes('sport'));
        
        console.log('üìä COMPARA√á√ÉO FLAMENGO:');
        if (previousFlamengo && currentFlamengo) {
          console.log(`     Vers√£o 2.0.0: ${previousFlamengo.title_probability.toFixed(1)}%`);
          console.log(`     Vers√£o 3.0.0: ${currentFlamengo.title_probability.toFixed(1)}%`);
          console.log(`     Diferen√ßa: ${(previousFlamengo.title_probability - currentFlamengo.title_probability).toFixed(1)}%`);
        }
        
        console.log('üìä COMPARA√á√ÉO SPORT:');
        if (previousSport && currentSport) {
          console.log(`     Vers√£o 2.0.0: ${previousSport.relegation_probability.toFixed(1)}%`);
          console.log(`     Vers√£o 3.0.0: ${currentSport.relegation_probability.toFixed(1)}%`);
          console.log(`     Diferen√ßa: ${(currentSport.relegation_probability - previousSport.relegation_probability).toFixed(1)}%`);
        }
      }
    }

    // 9. AVALIA√á√ÉO FINAL DAS CORRE√á√ïES
    console.log('\nüí° 9. AVALIA√á√ÉO FINAL DAS CORRE√á√ïES');
    
    let improvements = 0;
    let totalChecks = 0;
    
    // Verificar probabilidades de t√≠tulo
    if (titleChances[0]?.title_probability < 80) {
      console.log('‚úÖ Probabilidades de t√≠tulo mais realistas');
      improvements++;
    } else {
      console.log('‚ùå Probabilidades de t√≠tulo ainda muito altas');
    }
    totalChecks++;
    
    // Verificar riscos de rebaixamento
    if (relegationRisks[0]?.relegation_probability < 95) {
      console.log('‚úÖ Riscos de rebaixamento mais realistas');
      improvements++;
    } else {
      console.log('‚ùå Riscos de rebaixamento ainda muito altos');
    }
    totalChecks++;
    
    // Verificar soma das probabilidades
    if (Math.abs(totalTitleProbability - 100) <= 1) {
      console.log('‚úÖ Soma das probabilidades de t√≠tulo correta');
      improvements++;
    } else {
      console.log('‚ùå Soma das probabilidades de t√≠tulo incorreta');
    }
    totalChecks++;
    
    if (Math.abs(totalRelegationProbability - 100) <= 1) {
      console.log('‚úÖ Soma dos riscos de rebaixamento correta');
      improvements++;
    } else {
      console.log('‚ùå Soma dos riscos de rebaixamento incorreta');
    }
    totalChecks++;
    
    console.log(`\nüìä RESULTADO FINAL: ${improvements}/${totalChecks} corre√ß√µes funcionando`);
    
    if (improvements === totalChecks) {
      console.log('üéâ TODAS AS CORRE√á√ïES FUNCIONANDO PERFEITAMENTE!');
    } else if (improvements >= totalChecks * 0.75) {
      console.log('‚úÖ MAIORIA DAS CORRE√á√ïES FUNCIONANDO!');
    } else {
      console.log('‚ö†Ô∏è ALGUMAS CORRE√á√ïES AINDA PRECISAM DE AJUSTES');
    }

  } catch (error) {
    console.error('‚ùå Erro durante a verifica√ß√£o:', error);
  } finally {
    if (client) {
      await client.end();
      console.log('\nüîå Conex√£o com banco local fechada');
    }
  }
}

// Executar a verifica√ß√£o
checkCorrectedResults();
