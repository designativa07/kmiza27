import { Injectable, Logger } from '@nestjs/common';
import { OpenAIService } from '../../chatbot/openai.service';

export interface QueryAdaptationResult {
  adapted: boolean;
  intent?: string;
  confidence: number;
  adaptedMessage?: string;
  reasoning?: string;
  extractedTeams?: string[]; // Times extra√≠dos pela IA
  extractedCompetition?: string; // Nome da competi√ß√£o extra√≠do
}

@Injectable()
export class QueryAdapterService {
  private readonly logger = new Logger(QueryAdapterService.name);

  constructor(private readonly openAIService: OpenAIService) {}

  // Mapeia perguntas naturais para intents espec√≠ficos
  private readonly queryMappings = {
    // Transmiss√µes e Canais
    'onde vai passar': 'broadcast_info',
    'que canal vai passar': 'broadcast_info',
    'em que canal': 'broadcast_info',
    'vai passar na tv': 'broadcast_info',
    'transmiss√£o do jogo': 'broadcast_info',
    'onde assistir': 'broadcast_info',
    
    // Hor√°rios e Pr√≥ximos Jogos
    'que horas √© o jogo': 'next_match',
    'quando √© o jogo': 'next_match',
    'hor√°rio do jogo': 'next_match',
    'pr√≥ximo jogo': 'next_match',
    'quando joga': 'next_match',
    'data do jogo': 'next_match',
    
    // Tabela e Classifica√ß√£o
    'tabela de classifica√ß√£o': 'table',
    'classifica√ß√£o do brasileir√£o': 'table',
    'posi√ß√£o na tabela': 'table',
    'ranking dos times': 'table',
    'pontua√ß√£o dos times': 'table',
    
    // Posi√ß√£o de Time Espec√≠fico
    'posi√ß√£o do': 'team_position',
    'em que lugar est√°': 'team_position',
    'qual a posi√ß√£o': 'team_position',
    'lugar na tabela': 'team_position',
    
    // Artilheiros
    'artilheiros': 'top_scorers',
    'gols marcados': 'top_scorers',
    'quem marcou mais gols': 'top_scorers',
    'maior artilheiro': 'top_scorers',
    'ranking de artilheiros': 'top_scorers',
    
    // Jogos de Hoje
    'jogos de hoje': 'matches_today',
    'partidas de hoje': 'matches_today',
    'o que tem hoje': 'matches_today',
    'jogos hoje': 'matches_today',
    
    // Jogos da Semana
    'jogos da semana': 'matches_week',
    'partidas da semana': 'matches_week',
    'o que tem essa semana': 'matches_week',
    
    // Informa√ß√µes de Time
    'informa√ß√µes do time': 'team_info',
    'dados do time': 'team_info',
    'sobre o time': 'team_info',
    'hist√≥ria do time': 'team_info',
    
    // Informa√ß√µes de Competi√ß√£o
    'sobre o brasileir√£o': 'competition_info',
    'informa√ß√µes da competi√ß√£o': 'competition_info',
    'regras do campeonato': 'competition_info',
    'brasileirao': 'competition_info',
    'brasileiro': 'competition_info',
    'copa do brasil': 'competition_info',
    'libertadores': 'competition_info',
    'sul-americana': 'competition_info',
    'mundial': 'competition_info',
    'serie a': 'competition_info',
    'serie b': 'competition_info',
    'serie c': 'competition_info',
    'serie d': 'competition_info',
    
    // Estat√≠sticas de Time
    'estat√≠sticas do': 'team_statistics',
    'n√∫meros do time': 'team_statistics',
    'dados estat√≠sticos': 'team_statistics',
    
    // Elenco do Time
    'elenco do': 'team_squad',
    'jogadores do': 'team_squad',
    'plantel do': 'team_squad',
    'quem joga no': 'team_squad',
    
    // Informa√ß√µes de Jogador
    'sobre o jogador': 'player_info',
    'dados do jogador': 'player_info',
    'estat√≠sticas do jogador': 'player_info',
    'quem √©': 'player_info',
    
    // Canais de TV
    'canais de tv': 'channels_info',
    'que canais tem': 'channels_info',
    'emissoras de tv': 'channels_info',
    
    // Estat√≠sticas da Competi√ß√£o
    'estat√≠sticas do brasileir√£o': 'competition_stats',
    'n√∫meros do campeonato': 'competition_stats',
    'dados da competi√ß√£o': 'competition_stats'
  };

  // Adapta a pergunta para um intent espec√≠fico
  async adaptQueryToIntent(message: string): Promise<QueryAdaptationResult> {
    try {
      this.logger.debug(`üîç Analisando query para adapta√ß√£o: "${message}"`);
      
      const lowerMessage = message.toLowerCase();
      
      // Buscar por padr√µes conhecidos
      for (const [pattern, intent] of Object.entries(this.queryMappings)) {
        if (lowerMessage.includes(pattern)) {
          const confidence = this.calculatePatternConfidence(pattern, lowerMessage);
          
          this.logger.debug(`‚úÖ Padr√£o encontrado: "${pattern}" ‚Üí intent: ${intent} (confian√ßa: ${confidence})`);
          
          // Extrair competi√ß√£o se for competition_info
          let extractedCompetition: string | undefined;
          if (intent === 'competition_info') {
            extractedCompetition = this.extractCompetitionName(message, pattern);
            this.logger.debug(`üèÜ Competi√ß√£o extra√≠da: "${extractedCompetition}"`);
          }
          
          return {
            adapted: true,
            intent,
            confidence,
            adaptedMessage: this.generateAdaptedMessage(message, intent),
            reasoning: `Padr√£o "${pattern}" mapeado para intent "${intent}"`,
            extractedCompetition
          };
        }
      }

      // Se n√£o encontrou padr√£o, tentar an√°lise sem√¢ntica
      const semanticResult = await this.semanticAnalysis(lowerMessage);
      if (semanticResult.adapted) {
        this.logger.debug(`üß† An√°lise sem√¢ntica: intent: ${semanticResult.intent} (confian√ßa: ${semanticResult.confidence})`);
        return semanticResult;
      }

      // Nenhuma adapta√ß√£o encontrada
      this.logger.debug(`‚ùå Nenhuma adapta√ß√£o encontrada para: "${message}"`);
      return {
        adapted: false,
        confidence: 0.0,
        reasoning: 'Nenhum padr√£o ou an√°lise sem√¢ntica encontrou uma adapta√ß√£o adequada'
      };

    } catch (error) {
      this.logger.error(`‚ùå Erro na adapta√ß√£o de query: ${error.message}`, error.stack);
      return {
        adapted: false,
        confidence: 0.0,
        reasoning: `Erro interno: ${error.message}`
      };
    }
  }



  // An√°lise sem√¢ntica mais avan√ßada
  private async semanticAnalysis(message: string): Promise<QueryAdaptationResult> {
    const keywords = this.extractKeywords(message);
    
    // Transmiss√µes e canais
    if (this.hasKeywords(message, ['transmiss√£o', 'canal', 'tv', 'assistir', 'passar'])) {
      return {
        adapted: true,
        intent: 'broadcast_info',
        confidence: 0.7,
        reasoning: 'Palavras-chave relacionadas a transmiss√£o detectadas'
      };
    }
    
    // Hor√°rios e datas
    if (this.hasKeywords(message, ['hor√°rio', 'hora', 'quando', 'data', 'dia', 'pr√≥ximo'])) {
      return {
        adapted: true,
        intent: 'next_match',
        confidence: 0.7,
        reasoning: 'Palavras-chave relacionadas a hor√°rios detectadas'
      };
    }
    
    // Tabela e classifica√ß√£o
    if (this.hasKeywords(message, ['tabela', 'classifica√ß√£o', 'posi√ß√£o', 'ranking', 'pontua√ß√£o'])) {
      return {
        adapted: true,
        intent: 'table',
        confidence: 0.7,
        reasoning: 'Palavras-chave relacionadas a tabela detectadas'
      };
    }
    
    // Artilheiros e gols
    if (this.hasKeywords(message, ['artilheiro', 'gols', 'marcou', 'gol', 'artilheiros'])) {
      return {
        adapted: true,
        intent: 'top_scorers',
        confidence: 0.7,
        reasoning: 'Palavras-chave relacionadas a artilheiros detectadas'
      };
    }
    
    // Jogos e partidas
    if (this.hasKeywords(message, ['jogo', 'partida', 'confronto', 'jogos', 'partidas'])) {
      if (this.hasKeywords(message, ['hoje', 'agora'])) {
        return {
          adapted: true,
          intent: 'matches_today',
          confidence: 0.7,
          reasoning: 'Palavras-chave relacionadas a jogos de hoje detectadas'
        };
      }
      if (this.hasKeywords(message, ['semana', 'semana'])) {
        return {
          adapted: true,
          intent: 'matches_week',
          confidence: 0.7,
          reasoning: 'Palavras-chave relacionadas a jogos da semana detectadas'
        };
      }
    }
    
    // Times
    if (this.hasKeywords(message, ['time', 'equipe', 'clube'])) {
      return {
        adapted: true,
        intent: 'team_info',
        confidence: 0.6,
        reasoning: 'Palavras-chave relacionadas a times detectadas'
      };
    }
    
    // Jogadores
    if (this.hasKeywords(message, ['jogador', 'atleta', 'futebolista'])) {
      return {
        adapted: true,
        intent: 'player_info',
        confidence: 0.6,
        reasoning: 'Palavras-chave relacionadas a jogadores detectadas'
      };
    }
    
    return {
      adapted: false,
      confidence: 0.0,
      reasoning: 'An√°lise sem√¢ntica n√£o encontrou padr√µes reconhec√≠veis'
    };
  }

  // Verifica se a mensagem cont√©m palavras-chave espec√≠ficas
  private hasKeywords(message: string, keywords: string[]): boolean {
    return keywords.some(keyword => message.includes(keyword));
  }

  // Extrai palavras-chave da mensagem
  private extractKeywords(message: string): string[] {
    // Remove palavras comuns (stop words)
    const stopWords = ['o', 'a', 'os', 'as', 'um', 'uma', 'e', '√©', 'de', 'da', 'do', 'das', 'dos', 'em', 'na', 'no', 'nas', 'nos', 'para', 'por', 'com', 'sem', 'que', 'qual', 'quem', 'onde', 'quando', 'como', 'porque', 'por que'];
    
    const words = message
      .toLowerCase()
      .split(/\s+/)
      .filter(word => word.length > 2 && !stopWords.includes(word));
    
    return words;
  }

  // Calcula a confian√ßa baseada no padr√£o encontrado
  private calculatePatternConfidence(pattern: string, message: string): number {
    let confidence = 0.8; // Base
    
    // Padr√µes mais espec√≠ficos t√™m maior confian√ßa
    if (pattern.length > 10) confidence += 0.1;
    if (pattern.length > 15) confidence += 0.1;
    
    // Padr√µes que aparecem no in√≠cio da mensagem t√™m maior confian√ßa
    if (message.startsWith(pattern)) confidence += 0.1;
    
    // Limitar a confian√ßa m√°xima
    return Math.min(confidence, 0.95);
  }

  // Gera uma mensagem adaptada para o intent
  private generateAdaptedMessage(originalMessage: string, intent: string): string {
    const intentDescriptions = {
      'broadcast_info': 'informa√ß√µes sobre transmiss√£o',
      'next_match': 'pr√≥ximo jogo',
      'table': 'tabela de classifica√ß√£o',
      'team_position': 'posi√ß√£o do time',
      'top_scorers': 'artilheiros',
      'matches_today': 'jogos de hoje',
      'matches_week': 'jogos da semana',
      'team_info': 'informa√ß√µes do time',
      'competition_info': 'informa√ß√µes da competi√ß√£o',
      'team_statistics': 'estat√≠sticas do time',
      'team_squad': 'elenco do time',
      'player_info': 'informa√ß√µes do jogador',
      'channels_info': 'canais de TV',
      'competition_stats': 'estat√≠sticas da competi√ß√£o'
    };

    const description = intentDescriptions[intent] || 'informa√ß√£o solicitada';
    return `üîç Adaptei sua pergunta para buscar ${description}.`;
  }

  /**
   * Extrai times de uma pergunta usando IA do OpenAI
   */
  async extractTeamsWithAI(message: string): Promise<string[]> {
    try {
      this.logger.debug(`ü§ñ Extraindo times com IA: "${message}"`);
      
      // Prompt espec√≠fico para extra√ß√£o de times
      const prompt = `
Analise a seguinte pergunta sobre futebol e extraia APENAS os nomes dos times mencionados.

PERGUNTA: "${message}"

REGRAS:
- Retorne APENAS os nomes dos times, um por linha
- N√£o inclua palavras como "hoje", "amanh√£", "canal", "onde", etc.
- Se n√£o houver times, retorne "NENHUM"
- Use nomes completos dos times (ex: "Flamengo", "S√£o Paulo", "Botafogo do Rio")

EXEMPLOS:
- "onde vai passar botafogo e bragantino?" ‚Üí Botafogo do Rio\nBragantino
- "qual canal vai transmitir o palmeiras?" ‚Üí Palmeiras
- "quando √© o jogo do flamengo?" ‚Üí Flamengo
- "onde assistir santos x corinthians?" ‚Üí Santos\nCorinthians

TIMES ENCONTRADOS:`;

      try {
        // Tentar usar OpenAI para extra√ß√£o inteligente
        this.logger.debug(`ü§ñ Chamando OpenAI para extra√ß√£o de times...`);
        
        // Usar o m√©todo analyzeMessage do OpenAI com prompt customizado
        const aiResponse = await this.openAIService.analyzeMessage(message);
        
        // Se o OpenAI retornou times, usar eles
        if (aiResponse.team) {
          const teams = [aiResponse.team];
          if (aiResponse.homeTeam) teams.push(aiResponse.homeTeam);
          if (aiResponse.awayTeam) teams.push(aiResponse.awayTeam);
          
          this.logger.debug(`‚úÖ OpenAI extraiu times: ${teams.join(', ')}`);
          return teams;
        }
        
        // Se OpenAI n√£o extraiu times, tentar com prompt espec√≠fico
        this.logger.debug(`‚ö†Ô∏è OpenAI n√£o extraiu times, tentando prompt espec√≠fico...`);
        
        // Aqui voc√™ faria uma chamada espec√≠fica para o OpenAI com o prompt customizado
        // Por enquanto, vou usar o fallback inteligente
        const extractedTeams = this.extractTeamsIntelligently(message);
        
        this.logger.debug(`üîÑ Fallback: Times extra√≠dos por l√≥gica: ${extractedTeams.join(', ')}`);
        return extractedTeams;

      } catch (openAIError) {
        this.logger.warn(`‚ö†Ô∏è OpenAI falhou, usando fallback: ${openAIError.message}`);
        
        // Fallback para l√≥gica inteligente se OpenAI falhar
        const extractedTeams = this.extractTeamsIntelligently(message);
        this.logger.debug(`üîÑ Fallback ativado: Times extra√≠dos: ${extractedTeams.join(', ')}`);
        return extractedTeams;
      }

    } catch (error) {
      this.logger.error(`‚ùå Erro na extra√ß√£o de times com IA: ${error.message}`, error.stack);
      return [];
    }
  }

  /**
   * Extrai o nome da competi√ß√£o da mensagem
   */
  private extractCompetitionName(message: string, pattern: string): string {
    const lowerMessage = message.toLowerCase();
    
    // Mapeamento de padr√µes para nomes de competi√ß√µes
    const competitionMappings: { [key: string]: string } = {
      'brasileirao': 'Brasileir√£o',
      'brasileiro': 'Brasileir√£o',
      'copa do brasil': 'Copa do Brasil',
      'libertadores': 'Libertadores',
      'sul-americana': 'Sul-Americana',
      'mundial': 'Mundial',
      'serie a': 'S√©rie A',
      'serie b': 'S√©rie B',
      'serie c': 'S√©rie C',
      'serie d': 'S√©rie D'
    };
    
    // Buscar por mapeamentos exatos
    for (const [key, value] of Object.entries(competitionMappings)) {
      if (lowerMessage.includes(key)) {
        return value;
      }
    }
    
    // Se n√£o encontrou mapeamento exato, tentar extrair do contexto
    const words = message.split(/\s+/);
    const competitionKeywords = ['brasileir√£o', 'copa', 'libertadores', 'sul-americana', 'mundial', 's√©rie'];
    
    for (const word of words) {
      const cleanWord = word.toLowerCase().replace(/[?.,!]/g, '').trim();
      if (competitionKeywords.includes(cleanWord)) {
        // Tentar encontrar o nome completo da competi√ß√£o
        const fullPattern = this.findFullCompetitionPattern(lowerMessage, cleanWord);
        if (fullPattern) {
          return fullPattern;
        }
        return word.charAt(0).toUpperCase() + word.slice(1);
      }
    }
    
    // Fallback: retornar o padr√£o encontrado capitalizado
    return pattern.charAt(0).toUpperCase() + pattern.slice(1);
  }
  
  /**
   * Encontra o padr√£o completo da competi√ß√£o na mensagem
   */
  private findFullCompetitionPattern(message: string, keyword: string): string | null {
    const patterns = [
      'copa do brasil',
      'brasileir√£o s√©rie a',
      'brasileir√£o s√©rie b',
      'conmebol libertadores',
      'conmebol sul-americana'
    ];
    
    for (const pattern of patterns) {
      if (message.includes(pattern)) {
        return pattern.charAt(0).toUpperCase() + pattern.slice(1);
      }
    }
    
    return null;
  }

  /**
   * Extra√ß√£o inteligente de times (fallback quando IA n√£o estiver dispon√≠vel)
   */
  private extractTeamsIntelligently(message: string): string[] {
    const lowerMessage = message.toLowerCase();
    const teams: string[] = [];

    console.log(`üîç DEBUG: Analisando mensagem: "${lowerMessage}"`);

    // SIMPLIFICANDO: Para "onde vai passar botafogo e bragantino?"
    // Vamos extrair diretamente as palavras que parecem nomes de times
    
    const words = lowerMessage.split(/\s+/);
    console.log(`üîç DEBUG: Palavras da mensagem: [${words.join(', ')}]`);
    
    // Palavras que N√ÉO s√£o nomes de times
    const notTeamWords = ['onde', 'vai', 'passar', 'o', 'e', 'qual', 'canal', 'que', 'em', 'hoje', 'amanh√£', 'agora', 'assistir', 'ver', 'jogo', 'partida', 'transmiss√£o'];
    
    // Filtrar palavras que podem ser nomes de times
    for (const word of words) {
      const cleanWord = word.replace(/[?.,!]/g, '').trim();
      
      // Verificar se a palavra pode ser um nome de time
      const isTeamName = cleanWord.length >= 3 && 
                        !notTeamWords.includes(cleanWord.toLowerCase()) &&
                        /[a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß]/i.test(cleanWord);
      
      console.log(`üîç DEBUG: Palavra "${word}" (limpa: "${cleanWord}") √© nome de time? ${isTeamName}`);
      
      if (isTeamName && !teams.includes(cleanWord)) {
        teams.push(cleanWord);
        console.log(`üèà DEBUG: Time adicionado: "${cleanWord}"`);
      }
    }

    console.log(`üèà DEBUG: Times finais extra√≠dos: [${teams.join(', ')}]`);
    return teams;
  }

  // Obt√©m estat√≠sticas de uso
  getStats() {
    return {
      totalPatterns: Object.keys(this.queryMappings).length,
      patterns: Object.keys(this.queryMappings),
      timestamp: new Date().toISOString()
    };
  }
}
