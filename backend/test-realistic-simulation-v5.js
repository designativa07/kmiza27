const axios = require('axios');

/**
 * TESTE DA SIMULA√á√ÉO MONTE CARLO V5.0.0
 * 
 * Este script testa a nova vers√£o 5.0.0 do algoritmo Monte Carlo
 * que foi rebalanceado para gerar previs√µes mais realistas.
 * 
 * MUDAN√áAS IMPLEMENTADAS:
 * ‚úÖ Volatilidade reduzida de 40% para 25%
 * ‚úÖ Vantagem de casa reduzida de 15% para 12%
 * ‚úÖ Limites de probabilidade mais realistas (25%-75%)
 * ‚úÖ Fator de tempo: menos bonus com muitos jogos restantes
 * ‚úÖ Probabilidade de empate din√¢mica (20%-35%)
 * ‚úÖ Power Index limitado entre 20-90
 * ‚úÖ Bonus de esperan√ßa drasticamente reduzidos
 */

const API_BASE_URL = 'http://localhost:3000';

async function testRealisticSimulation() {
  console.log('üß™ TESTANDO SIMULA√á√ÉO MONTE CARLO V5.0.0');
  console.log('==========================================\n');

  try {
    // 1. EXECUTAR NOVA SIMULA√á√ÉO
    console.log('üéØ 1. EXECUTANDO NOVA SIMULA√á√ÉO (10.000 itera√ß√µes)...');
    
    const simulationResponse = await axios.post(`${API_BASE_URL}/simulations/run`, {
      competitionId: 1, // Brasileir√£o S√©rie A
      simulationCount: 10000
    });

    if (!simulationResponse.data.success) {
      throw new Error('Falha ao executar simula√ß√£o');
    }

    console.log('‚úÖ Simula√ß√£o executada com sucesso!');
    console.log(`   Dura√ß√£o: ${simulationResponse.data.data.execution_duration_ms}ms`);
    console.log(`   ID: ${simulationResponse.data.data.id}\n`);

    // 2. BUSCAR RESULTADOS DA SIMULA√á√ÉO
    console.log('üìä 2. ANALISANDO RESULTADOS...');
    
    const latestResponse = await axios.get(`${API_BASE_URL}/simulations/latest/1`);
    
    if (!latestResponse.data.success) {
      throw new Error('Falha ao buscar simula√ß√£o mais recente');
    }

    const results = latestResponse.data.data.team_predictions;
    
    // 3. AN√ÅLISE ESPEC√çFICA DO SPORT
    console.log('üéØ 3. AN√ÅLISE DO SPORT:');
    const sportData = results.find(team => 
      team.team_name.toLowerCase().includes('sport')
    );
    
    if (sportData) {
      console.log(`   Time: ${sportData.team_name}`);
      console.log(`   Posi√ß√£o atual: ${sportData.current_position}¬∞`);
      console.log(`   Risco de rebaixamento: ${sportData.relegation_probability.toFixed(1)}%`);
      console.log(`   Posi√ß√£o m√©dia projetada: ${sportData.average_final_position.toFixed(1)}¬∞`);
      console.log(`   Pontos m√©dios projetados: ${sportData.average_final_points.toFixed(1)}`);
      
      // VALIDA√á√ÉO: Sport n√£o deve ter 100% de rebaixamento
      if (sportData.relegation_probability >= 95) {
        console.log('‚ùå PROBLEMA: Sport ainda tem risco quase certo de rebaixamento!');
        console.log('   Esperado: < 80% com 20 rodadas restantes');
      } else if (sportData.relegation_probability >= 80) {
        console.log('‚ö†Ô∏è MELHOROU: Risco alto mas n√£o mais extremo');
      } else {
        console.log('‚úÖ EXCELENTE: Risco realista considerando jogos restantes!');
      }
    } else {
      console.log('‚ùå Sport n√£o encontrado nos resultados');
    }

    // 4. AN√ÅLISE GERAL DAS PROBABILIDADES
    console.log('\nüìà 4. AN√ÅLISE GERAL:');
    
    // Top 3 chances de t√≠tulo
    const top3Title = results
      .sort((a, b) => b.title_probability - a.title_probability)
      .slice(0, 3);
    
    console.log('\nüèÜ TOP 3 - CHANCES DE T√çTULO:');
    top3Title.forEach((team, index) => {
      console.log(`   ${index + 1}¬∫ ${team.team_name}: ${team.title_probability.toFixed(1)}%`);
    });

    // Top 3 risco de rebaixamento
    const top3Relegation = results
      .sort((a, b) => b.relegation_probability - a.relegation_probability)
      .slice(0, 3);
    
    console.log('\n‚¨áÔ∏è TOP 3 - RISCO DE REBAIXAMENTO:');
    top3Relegation.forEach((team, index) => {
      console.log(`   ${index + 1}¬∫ ${team.team_name}: ${team.relegation_probability.toFixed(1)}%`);
    });

    // 5. VALIDA√á√ÉO DAS MELHORIAS
    console.log('\nüîç 5. VALIDA√á√ÉO DAS MELHORIAS:');
    
    // Contar probabilidades extremas
    const extremeTitle = results.filter(team => team.title_probability > 60);
    const extremeRelegation = results.filter(team => team.relegation_probability > 85);
    
    console.log(`   Times com >60% de t√≠tulo: ${extremeTitle.length} (ideal: ‚â§2)`);
    console.log(`   Times com >85% de rebaixamento: ${extremeRelegation.length} (ideal: ‚â§1)`);
    
    if (extremeTitle.length <= 2) {
      console.log('‚úÖ Probabilidades de t√≠tulo mais equilibradas!');
    } else {
      console.log('‚ö†Ô∏è Ainda h√° muitos favoritos extremos ao t√≠tulo');
    }
    
    if (extremeRelegation.length <= 1) {
      console.log('‚úÖ Probabilidades de rebaixamento mais realistas!');
    } else {
      console.log('‚ö†Ô∏è Ainda h√° muitos times com risco extremo');
    }

    // 6. AN√ÅLISE DE DISTRIBUI√á√ÉO
    console.log('\nüìä 6. DISTRIBUI√á√ÉO DE PROBABILIDADES:');
    
    const titleStats = {
      high: results.filter(t => t.title_probability > 30).length,
      medium: results.filter(t => t.title_probability > 10 && t.title_probability <= 30).length,
      low: results.filter(t => t.title_probability > 0 && t.title_probability <= 10).length
    };
    
    const relegationStats = {
      high: results.filter(t => t.relegation_probability > 60).length,
      medium: results.filter(t => t.relegation_probability > 20 && t.relegation_probability <= 60).length,
      low: results.filter(t => t.relegation_probability <= 20).length
    };
    
    console.log(`   T√çTULO - Alto (>30%): ${titleStats.high}, M√©dio (10-30%): ${titleStats.medium}, Baixo (<10%): ${titleStats.low}`);
    console.log(`   REBAIXAMENTO - Alto (>60%): ${relegationStats.high}, M√©dio (20-60%): ${relegationStats.medium}, Baixo (<20%): ${relegationStats.low}`);

    // 7. CONCLUS√ÉO
    console.log('\nüéâ 7. CONCLUS√ÉO:');
    console.log('================');
    
    if (sportData && sportData.relegation_probability < 80) {
      console.log('‚úÖ SIMULA√á√ÉO V5.0.0 APROVADA!');
      console.log('   ‚Ä¢ Sport com risco realista de rebaixamento');
      console.log('   ‚Ä¢ Probabilidades mais equilibradas');
      console.log('   ‚Ä¢ Algoritmo considera tempo restante adequadamente');
    } else {
      console.log('‚ö†Ô∏è SIMULA√á√ÉO MELHOROU MAS AINDA PRECISA AJUSTES');
      console.log('   ‚Ä¢ Verificar se o backend foi reiniciado');
      console.log('   ‚Ä¢ Considerar reduzir ainda mais os fatores de volatilidade');
    }

    console.log('\nüìã PR√ìXIMOS PASSOS:');
    console.log('   1. Validar no frontend que os n√∫meros est√£o realistas');
    console.log('   2. Executar mais simula√ß√µes para confirmar consist√™ncia');
    console.log('   3. Monitorar se as previs√µes se mant√™m equilibradas');

  } catch (error) {
    console.error('‚ùå ERRO NO TESTE:', error.message);
    
    if (error.response) {
      console.error('   Status:', error.response.status);
      console.error('   Dados:', error.response.data);
    }
    
    console.log('\nüîß POSS√çVEIS SOLU√á√ïES:');
    console.log('   1. Verificar se o backend est√° rodando na porta 3000');
    console.log('   2. Verificar se as altera√ß√µes foram salvas');
    console.log('   3. Reiniciar o backend para carregar as mudan√ßas');
  }
}

// Executar o teste
testRealisticSimulation();
