#!/usr/bin/env node

/**
 * Script para verificar contagens reais no banco de produ√ß√£o
 * Conecta diretamente no banco para ver quantos dados existem
 */

// Carregar vari√°veis de ambiente do arquivo correto
const envFile = process.env.NODE_ENV === 'production' ? '.env.production' : '.env.development';
require('dotenv').config({ path: envFile });
const { Client } = require('pg');

// Verificar se as credenciais est√£o configuradas
if (!process.env.PROD_DB_PASSWORD) {
  console.error('‚ùå PROD_DB_PASSWORD n√£o est√° configurado no arquivo .env');
  console.log('\nüí° Para configurar, adicione ao arquivo backend/.env:');
  console.log('PROD_DB_PASSWORD=sua_senha_de_producao_aqui');
  process.exit(1);
}

// Configura√ß√£o do banco de produ√ß√£o
const productionConfig = {
  host: process.env.PROD_DB_HOST || 'h4xd66.easypanel.host',
  port: parseInt(process.env.PROD_DB_PORT || '5433', 10),
  database: process.env.PROD_DB_DATABASE || 'kmiza27',
  user: process.env.PROD_DB_USERNAME || 'postgres',
  password: String(process.env.PROD_DB_PASSWORD), // Garantir que √© string
  ssl: false,
};

console.log('üîß Configura√ß√£o de conex√£o:');
console.log(`   Host: ${productionConfig.host}`);
console.log(`   Port: ${productionConfig.port}`);
console.log(`   Database: ${productionConfig.database}`);
console.log(`   User: ${productionConfig.user}`);
console.log(`   Password: ${productionConfig.password ? '***configurado***' : '‚ùå n√£o configurado'}`);

async function verifyProductionCounts() {
  const client = new Client(productionConfig);
  
  try {
    console.log('üîç Verificando Contagens Reais no Banco de Produ√ß√£o');
    console.log('==================================================');
    
    // Conectar ao banco
    console.log('üîå Conectando ao banco de produ√ß√£o...');
    await client.connect();
    console.log('‚úÖ Conectado com sucesso!');
    
    // Lista de tabelas para verificar
    const tablesToCheck = [
      'users',
      'matches',
      'goals', 
      'competition_teams',
      'pool_matches',
      'pool_participants',
      'pool_predictions',
      'simulation_results',
      'chatbot_conversations',
      'notifications',
      'cards',
      'teams',
      'stadiums',
      'players',
      'rounds',
      'whatsapp_menu_configs',
      'system_settings',
      'competitions'
    ];
    
    console.log('\nüìä Verificando contagens de dados...');
    console.log('=====================================');
    
    const results = [];
    
    for (const tableName of tablesToCheck) {
      try {
        // Verificar se a tabela existe
        const tableExistsQuery = `
          SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name = $1
          );
        `;
        
        const tableExists = await client.query(tableExistsQuery, [tableName]);
        
        if (!tableExists.rows[0].exists) {
          console.log(`‚ùå ${tableName}: Tabela n√£o existe`);
          results.push({ table: tableName, count: 0, exists: false });
          continue;
        }
        
        // Contar registros
        const countQuery = `SELECT COUNT(*) as count FROM "${tableName}";`;
        const countResult = await client.query(countQuery);
        const count = parseInt(countResult.rows[0].count);
        
        console.log(`${count > 0 ? '‚úÖ' : 'üì≠'} ${tableName}: ${count} registros`);
        results.push({ table: tableName, count, exists: true });
        
      } catch (error) {
        console.log(`‚ùå ${tableName}: Erro - ${error.message}`);
        results.push({ table: tableName, count: 0, exists: false, error: error.message });
      }
    }
    
    // Resumo
    console.log('\nüìã Resumo das Contagens:');
    console.log('========================');
    
    const existingTables = results.filter(r => r.exists);
    const tablesWithData = existingTables.filter(r => r.count > 0);
    const emptyTables = existingTables.filter(r => r.count === 0);
    const nonExistentTables = results.filter(r => !r.exists);
    
    console.log(`üìä Total de tabelas verificadas: ${results.length}`);
    console.log(`‚úÖ Tabelas existentes: ${existingTables.length}`);
    console.log(`üìà Tabelas com dados: ${tablesWithData.length}`);
    console.log(`üì≠ Tabelas vazias: ${emptyTables.length}`);
    console.log(`‚ùå Tabelas n√£o existentes: ${nonExistentTables.length}`);
    
    // Mostrar tabelas com mais dados
    const topTables = tablesWithData
      .sort((a, b) => b.count - a.count)
      .slice(0, 10);
    
    if (topTables.length > 0) {
      console.log('\nüèÜ Top 10 tabelas com mais dados:');
      topTables.forEach((table, index) => {
        console.log(`   ${index + 1}. ${table.table}: ${table.count} registros`);
      });
    }
    
    // Mostrar tabelas vazias
    if (emptyTables.length > 0) {
      console.log('\nüì≠ Tabelas vazias:');
      emptyTables.forEach(table => {
        console.log(`   - ${table.table}`);
      });
    }
    
    // Mostrar tabelas n√£o existentes
    if (nonExistentTables.length > 0) {
      console.log('\n‚ùå Tabelas n√£o existentes:');
      nonExistentTables.forEach(table => {
        console.log(`   - ${table.table}`);
      });
    }
    
    // An√°lise
    console.log('\nüîç An√°lise:');
    console.log('===========');
    
    if (tablesWithData.length < 5) {
      console.log('‚ö†Ô∏è  POUCOS DADOS: Muitas tabelas est√£o vazias na produ√ß√£o');
      console.log('   Isso pode indicar que o banco de produ√ß√£o n√£o tem dados suficientes');
    } else if (tablesWithData.length >= 10) {
      console.log('‚úÖ BOM: Muitas tabelas t√™m dados na produ√ß√£o');
      console.log('   O problema pode estar na sincroniza√ß√£o');
    } else {
      console.log('‚ö†Ô∏è  MODERADO: Algumas tabelas t√™m dados, outras n√£o');
      console.log('   Verifique se as tabelas vazias deveriam ter dados');
    }
    
    console.log('\nüí° Pr√≥ximos passos:');
    console.log('1. Se muitas tabelas est√£o vazias, verifique se o banco de produ√ß√£o tem dados');
    console.log('2. Se as tabelas t√™m dados mas a sincroniza√ß√£o falha, verifique os logs');
    console.log('3. Verifique se as credenciais de produ√ß√£o est√£o corretas');
    
  } catch (error) {
    console.error('‚ùå Erro ao conectar com produ√ß√£o:', error.message);
    console.log('\nüí° Verifique:');
    console.log('- Se PROD_DB_PASSWORD est√° configurado no .env');
    console.log('- Se o servidor de produ√ß√£o est√° acess√≠vel');
    console.log('- Se as credenciais est√£o corretas');
  } finally {
    await client.end();
  }
}

// Executar verifica√ß√£o
verifyProductionCounts();
