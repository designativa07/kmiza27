#!/usr/bin/env node

/**
 * Script de teste para sincroniza√ß√£o com fallback de credenciais
 * Tenta diferentes combina√ß√µes de credenciais at√© encontrar uma que funcione
 */

require('dotenv').config();
const axios = require('axios');

const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3000';

// Lista de credenciais para tentar
const CREDENTIALS_OPTIONS = [
  { username: 'antonioddd48@gmail.com', password: '@toni123' },
  { username: 'admin@kmiza27.com', password: 'admin123' },
  { username: 'admin_kmiza27', password: 'admin@kmiza27' },
  { username: 'admin', password: 'admin' },
  { username: 'admin@kmiza27.com', password: 'admin@kmiza27' },
  { username: 'admin_kmiza27', password: 'admin123' }
];

let authToken = null;

async function tryLogin() {
  console.log('üîê Tentando fazer login...');
  
  for (let i = 0; i < CREDENTIALS_OPTIONS.length; i++) {
    const credentials = CREDENTIALS_OPTIONS[i];
    console.log(`\nüìù Tentativa ${i + 1}/${CREDENTIALS_OPTIONS.length}: ${credentials.username}`);
    
    try {
      const response = await axios.post(`${API_BASE_URL}/auth/login`, credentials);
      
      if (response.data.access_token) {
        authToken = response.data.access_token;
        console.log(`‚úÖ Login bem-sucedido com: ${credentials.username}`);
        console.log(`üë§ Usu√°rio: ${response.data.user.name || response.data.user.username}`);
        console.log(`üîë Role: ${response.data.user.role || 'N/A'}`);
        return true;
      }
      
    } catch (error) {
      console.log(`‚ùå Falhou: ${error.response?.data?.message || error.message}`);
    }
  }
  
  console.log('\n‚ùå Todas as tentativas de login falharam!');
  console.log('üí° Verifique se:');
  console.log('   - O backend est√° rodando (npm run dev)');
  console.log('   - Existe um usu√°rio administrador no banco');
  console.log('   - As credenciais est√£o corretas');
  
  return false;
}

async function makeAuthenticatedRequest(method, url, data = null) {
  if (!authToken) {
    throw new Error('Token de autentica√ß√£o n√£o dispon√≠vel');
  }
  
  const config = {
    method,
    url: `${API_BASE_URL}${url}`,
    headers: {
      'Authorization': `Bearer ${authToken}`,
      'Content-Type': 'application/json'
    }
  };
  
  if (data) {
    config.data = data;
  }
  
  return await axios(config);
}

async function testSyncWithFallback() {
  try {
    console.log('üîß Teste de Sincroniza√ß√£o com Fallback de Credenciais');
    console.log('====================================================');
    
    // 0. Tentar fazer login
    console.log('\n0Ô∏è‚É£ Autenticando...');
    const loginSuccess = await tryLogin();
    
    if (!loginSuccess) {
      console.error('‚ùå N√£o foi poss√≠vel fazer login com nenhuma credencial.');
      return;
    }
    
    // 1. Verificar ambiente
    console.log('\n1Ô∏è‚É£ Verificando ambiente...');
    const envResponse = await makeAuthenticatedRequest('GET', '/sync/environment-info');
    
    console.log('‚úÖ Ambiente:', envResponse.data.currentEnvironment);
    console.log('‚úÖ Desenvolvimento:', envResponse.data.isDevelopment ? 'Sim' : 'N√£o');
    console.log('‚úÖ Credenciais de produ√ß√£o:', envResponse.data.hasProductionCredentials ? 'Sim' : 'N√£o');
    
    if (!envResponse.data.isDevelopment) {
      console.error('‚ùå Este script s√≥ funciona em ambiente de desenvolvimento');
      return;
    }
    
    if (!envResponse.data.hasProductionCredentials) {
      console.error('‚ùå Credenciais de produ√ß√£o n√£o configuradas');
      console.log('üí° Configure PROD_DB_PASSWORD no arquivo .env do backend');
      return;
    }
    
    // 2. Verificar conex√£o com produ√ß√£o
    console.log('\n2Ô∏è‚É£ Verificando conex√£o com produ√ß√£o...');
    const connectionResponse = await makeAuthenticatedRequest('GET', '/sync/check-production');
    
    if (!connectionResponse.data.success) {
      console.error('‚ùå Falha na conex√£o com produ√ß√£o:', connectionResponse.data.message);
      return;
    }
    
    console.log('‚úÖ Conex√£o com produ√ß√£o OK');
    console.log(`üìä Tabelas dispon√≠veis: ${connectionResponse.data.details.tablesCount}`);
    
    // 3. Testar tabela espec√≠fica primeiro
    console.log('\n3Ô∏è‚É£ Testando tabela system_settings...');
    
    try {
      const testResponse = await makeAuthenticatedRequest('POST', '/sync/test-table', {
        tableName: 'system_settings'
      });
      
      if (testResponse.data.success) {
        console.log(`‚úÖ system_settings: ${testResponse.data.details.rowsCopied} linhas copiadas`);
      } else {
        console.log(`‚ùå system_settings: ${testResponse.data.details.error}`);
      }
      
    } catch (error) {
      console.log(`‚ùå system_settings: Erro na requisi√ß√£o - ${error.response?.data?.message || error.message}`);
    }
    
    // 4. Executar sincroniza√ß√£o completa
    console.log('\n4Ô∏è‚É£ Executando sincroniza√ß√£o completa...');
    console.log('‚ö†Ô∏è  Esta opera√ß√£o ir√° substituir todos os dados do banco de desenvolvimento!');
    
    const syncResponse = await makeAuthenticatedRequest('POST', '/sync/from-production');
    
    console.log('\nüìä Resultado Final:');
    console.log('==================');
    console.log(`Status: ${syncResponse.data.success ? '‚úÖ Sucesso' : '‚ùå Falha'}`);
    console.log(`Mensagem: ${syncResponse.data.message}`);
    
    if (syncResponse.data.details) {
      const { tablesProcessed, totalRowsCopied, tableResults } = syncResponse.data.details;
      
      console.log(`\nüìà Estat√≠sticas:`);
      console.log(`   Tabelas processadas: ${tablesProcessed}`);
      console.log(`   Total de linhas copiadas: ${totalRowsCopied}`);
      
      // Resumo por status
      const successCount = tableResults.filter(r => r.success).length;
      const errorCount = tableResults.filter(r => !r.success).length;
      const emptyCount = tableResults.filter(r => r.success && r.rowsCopied === 0).length;
      
      console.log(`\nüìã Resumo:`);
      console.log(`   ‚úÖ Sucesso: ${successCount} tabelas`);
      console.log(`   ‚ùå Erro: ${errorCount} tabelas`);
      console.log(`   üì≠ Vazias: ${emptyCount} tabelas`);
      
      // Mostrar tabelas com erro
      if (errorCount > 0) {
        console.log(`\n‚ùå Tabelas com erro:`);
        tableResults
          .filter(r => !r.success)
          .forEach(table => {
            console.log(`   - ${table.tableName}: ${table.error}`);
          });
      }
      
      // Mostrar tabelas com mais dados
      const topTables = tableResults
        .filter(r => r.success && r.rowsCopied > 0)
        .sort((a, b) => b.rowsCopied - a.rowsCopied)
        .slice(0, 5);
      
      if (topTables.length > 0) {
        console.log(`\nüìä Top 5 tabelas com mais dados:`);
        topTables.forEach(table => {
          console.log(`   - ${table.tableName}: ${table.rowsCopied} linhas`);
        });
      }
    }
    
    console.log('\nüéâ Teste conclu√≠do!');
    
    if (syncResponse.data.success && syncResponse.data.details.totalRowsCopied > 0) {
      console.log('‚úÖ Sincroniza√ß√£o funcionando corretamente!');
    } else {
      console.log('‚ùå Ainda h√° problemas na sincroniza√ß√£o. Verifique os logs do backend.');
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.response?.data || error.message);
    process.exit(1);
  }
}

// Executar teste
testSyncWithFallback();
