const axios = require('axios');

const API_URL = 'http://localhost:3000';

async function checkCompetitionTeams() {
  try {
    console.log('üîç Verificando times da competi√ß√£o amadora...');
    
    const competitionId = 23; // ID da competi√ß√£o "Campeonato Municipal Atualizado"
    
    // 1. Verificar times da competi√ß√£o
    const teamsResponse = await axios.get(`${API_URL}/competitions/${competitionId}/teams`);
    console.log('üèÜ Times associados √† competi√ß√£o:', teamsResponse.data.length);
    
    if (teamsResponse.data.length > 0) {
      console.log('\nüìã Lista de times:');
      teamsResponse.data.forEach((team, index) => {
        console.log(`${index + 1}. ${team.team.name}`);
      });
    } else {
      console.log('‚ùå Nenhum time associado √† competi√ß√£o!');
      
      // 2. Verificar times amadores dispon√≠veis
      const amateurTeamsResponse = await axios.get(`${API_URL}/amateur/teams`);
      console.log('\nüìä Times amadores dispon√≠veis:', amateurTeamsResponse.data.length);
      
      if (amateurTeamsResponse.data.length > 0) {
        console.log('\nüìã Lista de times amadores:');
        amateurTeamsResponse.data.forEach((team, index) => {
          console.log(`${index + 1}. ${team.name} (ID: ${team.id})`);
        });
      }
    }
    
    // 3. Verificar classifica√ß√£o
    try {
      const standingsResponse = await axios.get(`${API_URL}/standings/competition/${competitionId}`);
      console.log('\nüèÜ Times na classifica√ß√£o:', standingsResponse.data.length);
    } catch (error) {
      console.log('‚ùå Erro ao buscar classifica√ß√£o:', error.response?.data || error.message);
    }
    
  } catch (error) {
    console.error('‚ùå Erro:', error.response?.data || error.message);
  }
}

checkCompetitionTeams(); 