const axios = require('axios');

/**
 * DEBUG: VERIFICAR JOGOS FUTUROS DO BRASILEIR√ÉO
 * 
 * Este script verifica se h√° jogos futuros sendo corretamente
 * identificados e simulados no algoritmo Monte Carlo.
 */

const API_BASE_URL = 'http://localhost:3000';

async function debugFutureMatches() {
  console.log('üîç DEBUG - VERIFICANDO JOGOS FUTUROS');
  console.log('=====================================\n');

  try {
    // 1. VERIFICAR JOGOS RESTANTES VIA API
    console.log('üìÖ 1. BUSCANDO JOGOS RESTANTES VIA API...');
    
    try {
      const remainingResponse = await axios.get(`${API_BASE_URL}/matches/remaining/1`);
      const remainingMatches = remainingResponse.data.data || remainingResponse.data;
      
      console.log(`‚úÖ Encontrados ${remainingMatches.length} jogos restantes`);
      
      if (remainingMatches.length > 0) {
        console.log('\nüéØ PRIMEIROS 5 JOGOS RESTANTES:');
        remainingMatches.slice(0, 5).forEach((match, index) => {
          console.log(`   ${index + 1}. ${match.home_team?.name || match.home_team_id} vs ${match.away_team?.name || match.away_team_id}`);
          console.log(`      Data: ${new Date(match.match_date).toLocaleDateString('pt-BR')}`);
          console.log(`      Status: ${match.status}`);
        });
      } else {
        console.log('‚ùå PROBLEMA: Nenhum jogo futuro encontrado!');
        console.log('   Isso explica por que o Sport tem 100% de rebaixamento');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Endpoint de jogos restantes n√£o encontrado, tentando alternativa...');
    }

    // 2. VERIFICAR TODOS OS JOGOS DA COMPETI√á√ÉO
    console.log('\nüìä 2. VERIFICANDO TODOS OS JOGOS DA COMPETI√á√ÉO...');
    
    try {
      const allMatchesResponse = await axios.get(`${API_BASE_URL}/matches/competition/1`);
      const allMatches = allMatchesResponse.data.data || allMatchesResponse.data;
      
      if (allMatches && allMatches.length > 0) {
        // Separar por status
        const finishedMatches = allMatches.filter(m => m.status === 'finished');
        const scheduledMatches = allMatches.filter(m => m.status === 'scheduled');
        const inProgressMatches = allMatches.filter(m => m.status === 'in_progress');
        
        console.log(`üìà Total de jogos: ${allMatches.length}`);
        console.log(`‚úÖ Jogos finalizados: ${finishedMatches.length}`);
        console.log(`‚è≥ Jogos agendados: ${scheduledMatches.length}`);
        console.log(`üîÑ Jogos em andamento: ${inProgressMatches.length}`);
        
        // Verificar se h√° jogos futuros suficientes
        const futureMatches = scheduledMatches.length + inProgressMatches.length;
        const expectedRemainingMatches = 20 * 20 / 2; // ~200 jogos restantes se temos 20 rodadas
        
        console.log(`\nüéØ AN√ÅLISE DE JOGOS FUTUROS:`);
        console.log(`   Jogos futuros encontrados: ${futureMatches}`);
        console.log(`   Jogos esperados (~20 rodadas): ~200`);
        
        if (futureMatches < 100) {
          console.log('‚ùå PROBLEMA IDENTIFICADO!');
          console.log('   Poucos jogos futuros cadastrados no sistema');
          console.log('   Isso faz com que times tenham poucas oportunidades de recupera√ß√£o');
        } else {
          console.log('‚úÖ Quantidade de jogos futuros parece adequada');
        }
        
        // Mostrar alguns jogos futuros
        if (scheduledMatches.length > 0) {
          console.log('\nüìÖ PRIMEIROS 5 JOGOS AGENDADOS:');
          scheduledMatches.slice(0, 5).forEach((match, index) => {
            console.log(`   ${index + 1}. ${match.home_team?.name || 'Time ' + match.home_team_id} vs ${match.away_team?.name || 'Time ' + match.away_team_id}`);
            console.log(`      Data: ${new Date(match.match_date).toLocaleDateString('pt-BR')}`);
            console.log(`      Rodada: ${match.round?.round_number || 'N/A'}`);
          });
        }
        
      } else {
        console.log('‚ùå Nenhum jogo encontrado na competi√ß√£o!');
      }
    } catch (error) {
      console.log('‚ùå Erro ao buscar jogos da competi√ß√£o:', error.message);
    }

    // 3. VERIFICAR CLASSIFICA√á√ÉO ATUAL
    console.log('\nüèÜ 3. VERIFICANDO CLASSIFICA√á√ÉO ATUAL...');
    
    try {
      const standingsResponse = await axios.get(`${API_BASE_URL}/standings/1`);
      const standings = standingsResponse.data.data || standingsResponse.data;
      
      if (standings && standings.length > 0) {
        console.log(`üìä ${standings.length} times na classifica√ß√£o`);
        
        // Encontrar Sport
        const sport = standings.find(team => 
          team.team?.name?.toLowerCase().includes('sport')
        );
        
        if (sport) {
          console.log('\nüéØ SITUA√á√ÉO ATUAL DO SPORT:');
          console.log(`   Posi√ß√£o: ${sport.position || 'N/A'}¬∞`);
          console.log(`   Pontos: ${sport.points}`);
          console.log(`   Jogos: ${sport.played}`);
          console.log(`   Vit√≥rias: ${sport.won}`);
          console.log(`   Empates: ${sport.drawn}`);
          console.log(`   Derrotas: ${sport.lost}`);
          
          const jogosRestantes = 38 - sport.played;
          const pontosRestantes = jogosRestantes * 3;
          const pontosMaximos = sport.points + pontosRestantes;
          
          console.log(`\nüìä POTENCIAL DE RECUPERA√á√ÉO:`);
          console.log(`   Jogos restantes: ${jogosRestantes}`);
          console.log(`   Pontos em disputa: ${pontosRestantes}`);
          console.log(`   Pontos m√°ximos poss√≠veis: ${pontosMaximos}`);
          
          if (jogosRestantes >= 15) {
            console.log('‚úÖ Muitos jogos restantes - recovepa√ß√£o √© poss√≠vel!');
          } else if (jogosRestantes >= 10) {
            console.log('‚ö†Ô∏è Jogos restantes razo√°veis para recupera√ß√£o');
          } else {
            console.log('‚ùå Poucos jogos restantes - situa√ß√£o cr√≠tica');
          }
        } else {
          console.log('‚ùå Sport n√£o encontrado na classifica√ß√£o');
        }
      }
    } catch (error) {
      console.log('‚ùå Erro ao buscar classifica√ß√£o:', error.message);
    }

    // 4. CONCLUS√ÉO E DIAGN√ìSTICO
    console.log('\nüî¨ 4. DIAGN√ìSTICO FINAL:');
    console.log('========================');
    
    console.log('\nüí° POSS√çVEIS CAUSAS DO PROBLEMA:');
    console.log('1. Poucos jogos futuros cadastrados no banco');
    console.log('2. Jogos com status incorreto (n√£o "scheduled")');
    console.log('3. Filtros na busca de jogos muito restritivos');
    console.log('4. Algoritmo n√£o conseguindo identificar jogos futuros');
    
    console.log('\nüîß SOLU√á√ïES SUGERIDAS:');
    console.log('1. Verificar se todas as 38 rodadas est√£o cadastradas');
    console.log('2. Confirmar status dos jogos futuros como "scheduled"');
    console.log('3. Ajustar m√©todo findAllCompetitionMatches se necess√°rio');
    console.log('4. Adicionar mais logs no algoritmo Monte Carlo');

  } catch (error) {
    console.error('‚ùå ERRO GERAL NO DEBUG:', error.message);
  }
}

// Executar o debug
debugFutureMatches();
