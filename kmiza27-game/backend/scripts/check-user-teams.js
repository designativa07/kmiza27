const { getSupabaseServiceClient } = require('../config/supabase-connection');

console.log('üîç VERIFICANDO TIMES DO USU√ÅRIO');
console.log('=' .repeat(40));

async function checkUserTeams() {
  try {
    const supabase = getSupabaseServiceClient('vps');
    
    // Verificar todos os times
    console.log('\nüìã 1. Verificando todos os times...');
    const { data: allTeams, error: allError } = await supabase
      .from('game_teams')
      .select('id, name, team_type, owner_id');
    
    if (allError) {
      console.log('‚ùå Erro ao buscar todos os times:', allError.message);
      return;
    }
    
    console.log(`üìä Total de times: ${allTeams.length}`);
    
    // Separar por tipo
    const userTeams = allTeams.filter(team => team.team_type === 'user_created');
    const machineTeams = allTeams.filter(team => team.team_type === 'machine');
    const otherTeams = allTeams.filter(team => !['user_created', 'machine'].includes(team.team_type));
    
    console.log(`üë§ Times do usu√°rio: ${userTeams.length}`);
    console.log(`ü§ñ Times da m√°quina: ${machineTeams.length}`);
    console.log(`‚ùì Outros tipos: ${otherTeams.length}`);
    
    // Verificar times do usu√°rio espec√≠fico
    console.log('\nüìã 2. Verificando times do usu√°rio padr√£o...');
    const userId = '550e8400-e29b-41d4-a716-446655440000';
    
    const { data: userTeamsFiltered, error: userError } = await supabase
      .from('game_teams')
      .select('id, name, team_type, owner_id')
      .eq('owner_id', userId)
      .eq('team_type', 'user_created');
    
    if (userError) {
      console.log('‚ùå Erro ao buscar times do usu√°rio:', userError.message);
      return;
    }
    
    console.log(`üìä Times do usu√°rio ${userId}: ${userTeamsFiltered.length}`);
    
    if (userTeamsFiltered.length > 0) {
      console.log('üìã Lista de times do usu√°rio:');
      userTeamsFiltered.forEach(team => {
        console.log(`  - ${team.name} (${team.team_type})`);
      });
    } else {
      console.log('üìã Nenhum time do usu√°rio encontrado');
    }
    
    // Verificar se h√° times da m√°quina com o mesmo owner_id
    console.log('\nüìã 3. Verificando times da m√°quina com mesmo owner_id...');
    const { data: machineTeamsSameOwner, error: machineError } = await supabase
      .from('game_teams')
      .select('id, name, team_type, owner_id')
      .eq('owner_id', userId)
      .eq('team_type', 'machine');
    
    if (machineError) {
      console.log('‚ùå Erro ao buscar times da m√°quina:', machineError.message);
      return;
    }
    
    console.log(`üìä Times da m√°quina com mesmo owner_id: ${machineTeamsSameOwner.length}`);
    
    if (machineTeamsSameOwner.length > 0) {
      console.log('‚ö†Ô∏è  ATEN√á√ÉO: Encontrados times da m√°quina com mesmo owner_id!');
      machineTeamsSameOwner.forEach(team => {
        console.log(`  - ${team.name} (${team.team_type})`);
      });
    }
    
    console.log('\n‚úÖ Verifica√ß√£o conclu√≠da!');
    console.log('üí° A corre√ß√£o deve ter funcionado se n√£o h√° times da m√°quina na lista do usu√°rio');
    
  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o:', error);
  }
}

// Executar verifica√ß√£o
if (require.main === module) {
  checkUserTeams();
}

module.exports = {
  checkUserTeams
}; 