const { getSupabaseServiceClient } = require('../config/supabase-connection');

/**
 * Script para debugar o fluxo completo de simula√ß√£o
 */
async function debugSimulationFlow() {
  try {
    console.log('üîç DEBUG: INVESTIGANDO FLUXO DE SIMULA√á√ÉO');
    console.log('=' .repeat(60));
    
    const supabase = getSupabaseServiceClient('vps');
    
    // 1. VERIFICAR USU√ÅRIO PALHOCA
    console.log('\nüë§ 1. Verificando usu√°rio PALHOCA...');
    const { data: palhocaTeam, error: palhocaError } = await supabase
      .from('game_teams')
      .select('*')
      .eq('name', 'PALHOCA')
      .single();
    
    if (palhocaError) {
      console.log('‚ùå Erro ao buscar time PALHOCA:', palhocaError);
      return;
    }
    
    console.log(`‚úÖ Time PALHOCA encontrado: ${palhocaTeam.name} (ID: ${palhocaTeam.owner_id})`);
    
    // 2. VERIFICAR PR√ìXIMA PARTIDA AGENDADA
    console.log('\nüìÖ 2. Verificando pr√≥xima partida agendada...');
    const { data: nextMatch, error: matchError } = await supabase
      .from('game_season_matches')
      .select('*')
      .eq('user_id', palhocaTeam.owner_id)
      .eq('season_year', 2025)
      .eq('status', 'scheduled')
      .order('round_number', { ascending: true })
      .limit(1)
      .single();
    
    if (matchError) {
      console.log('‚ùå Erro ao buscar pr√≥xima partida:', matchError);
      return;
    }
    
    if (!nextMatch) {
      console.log('‚ÑπÔ∏è N√£o h√° partidas agendadas para simular');
      return;
    }
    
    console.log(`‚úÖ Pr√≥xima partida encontrada: Rodada ${nextMatch.round_number}`);
    console.log(`   ${nextMatch.home_team_id ? 'PALHOCA' : 'Time da M√°quina'} vs ${nextMatch.away_team_id ? 'PALHOCA' : 'Time da M√°quina'}`);
    console.log(`   ID da partida: ${nextMatch.id}`);
    console.log(`   Temporada: ${nextMatch.season_year}, S√©rie: ${nextMatch.tier}`);
    
    // 3. VERIFICAR SE EXISTEM TIMES DA M√ÅQUINA NA S√âRIE
    console.log('\nü§ñ 3. Verificando times da m√°quina na s√©rie...');
    const { data: machineTeams, error: teamsError } = await supabase
      .from('game_machine_teams')
      .select('*')
      .eq('tier', nextMatch.tier)
      .eq('is_active', true)
      .order('display_order');
    
    if (teamsError) {
      console.log('‚ùå Erro ao buscar times da m√°quina:', teamsError);
    } else {
      console.log(`‚úÖ Encontrados ${machineTeams?.length || 0} times da m√°quina na s√©rie ${nextMatch.tier}`);
      
      if (machineTeams && machineTeams.length > 0) {
        console.log('   üìä Primeiros 5 times:');
        machineTeams.slice(0, 5).forEach((team, index) => {
          console.log(`      ${index + 1}. ${team.name} (ID: ${team.id})`);
        });
      }
    }
    
    // 4. VERIFICAR SE EXISTEM ESTAT√çSTICAS DOS TIMES DA M√ÅQUINA
    console.log('\nüìä 4. Verificando estat√≠sticas dos times da m√°quina...');
    const { data: machineStats, error: statsError } = await supabase
      .from('game_user_machine_team_stats')
      .select('*')
      .eq('user_id', palhocaTeam.owner_id)
      .eq('season_year', 2025)
      .eq('tier', nextMatch.tier)
      .limit(5);
    
    if (statsError) {
      console.log('‚ùå Erro ao buscar estat√≠sticas:', statsError);
    } else {
      console.log(`‚úÖ Encontradas ${machineStats?.length || 0} estat√≠sticas de times da m√°quina`);
      
      if (machineStats && machineStats.length > 0) {
        console.log('   üìä Primeiras 3 estat√≠sticas:');
        machineStats.slice(0, 3).forEach((stat, index) => {
          const teamName = stat.team_name || `Time ${stat.team_id.slice(0, 8)}`;
          console.log(`      ${index + 1}. ${teamName}: ${stat.points} pts, ${stat.games_played} jogos`);
        });
      }
    }
    
    // 5. VERIFICAR SE EXISTEM PARTIDAS ENTRE TIMES DA M√ÅQUINA
    console.log('\nüìã 5. Verificando partidas entre times da m√°quina...');
    const { data: machineMatches, error: machineMatchesError } = await supabase
      .from('game_season_matches')
      .select('*')
      .eq('user_id', palhocaTeam.owner_id)
      .eq('season_year', 2025)
      .not('home_machine_team_id', 'is', null)
      .not('away_machine_team_id', 'is', null)
      .order('round_number', { ascending: true });
    
    if (machineMatchesError) {
      console.log('‚ùå Erro ao buscar partidas da m√°quina:', machineMatchesError);
    } else {
      console.log(`‚úÖ Encontradas ${machineMatches?.length || 0} partidas entre times da m√°quina`);
      
      if (machineMatches && machineMatches.length > 0) {
        const roundsWithMatches = [...new Set(machineMatches.map(m => m.round_number))];
        console.log(`   üìä Rodadas com partidas simuladas: ${roundsWithMatches.join(', ')}`);
      }
    }
    
    // 6. VERIFICAR SE A FUN√á√ÉO simulateEntireRound EXISTE NO BACKEND
    console.log('\nüîß 6. Verificando se a fun√ß√£o simulateEntireRound existe...');
    console.log('   ‚ÑπÔ∏è Esta verifica√ß√£o requer acesso ao c√≥digo fonte do backend');
    console.log('   üìÅ Arquivo: backend/src/modules/seasons/seasons.service.ts');
    console.log('   üîç Fun√ß√£o: simulateEntireRound()');
    
    // 7. RECOMENDA√á√ïES
    console.log('\nüí° 7. RECOMENDA√á√ïES PARA CORRE√á√ÉO:');
    console.log('   üîß 1. Verificar se a fun√ß√£o simulateEntireRound() est√° sendo chamada');
    console.log('   üîß 2. Verificar se h√° erros nos logs do backend');
    console.log('   üîß 3. Verificar se a tabela game_user_machine_team_stats est√° correta');
    console.log('   üîß 4. Verificar se os times da m√°quina t√™m tier correto');
    
    console.log('\nüîç DEBUG COMPLETO!');
    
  } catch (error) {
    console.error('‚ùå Erro durante o debug:', error);
    process.exit(1);
  }
}

// Executar o script
if (require.main === module) {
  debugSimulationFlow()
    .then(() => {
      console.log('\n‚úÖ Script de debug executado com sucesso!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Erro na execu√ß√£o:', error);
      process.exit(1);
    });
}

module.exports = { debugSimulationFlow };
