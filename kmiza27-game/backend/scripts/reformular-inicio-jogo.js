const { getSupabaseClient } = require('../config/supabase-connection');

/**
 * üéÆ REFORMULA√á√ÉO DO IN√çCIO DO JOGO
 * 
 * Objetivos:
 * 1. Garantir que novos times sejam sempre inscritos na S√©rie D (tier 4)
 * 2. Criar calend√°rio autom√°tico da temporada atual
 * 3. Implementar sistema de promo√ß√£o/rebaixamento
 * 4. Melhorar a experi√™ncia inicial do usu√°rio
 */

async function reformularInicioJogo() {
  try {
    console.log('üéÆ REFORMULA√á√ÉO DO IN√çCIO DO JOGO');
    console.log('=' .repeat(60));
    
    const supabase = getSupabaseClient('vps');
    
    // 1. VERIFICAR E GARANTIR COMPETI√á√ïES B√ÅSICAS
    console.log('\nüìã 1. Verificando competi√ß√µes b√°sicas...');
    await garantirCompeticoesBasicas(supabase);
    
    // 2. VERIFICAR S√âRIE D (PONTO DE ENTRADA)
    console.log('\nüèÜ 2. Verificando S√©rie D (ponto de entrada)...');
    await verificarSerieD(supabase);
    
    // 3. CRIAR CALEND√ÅRIO AUTOM√ÅTICO
    console.log('\nüìÖ 3. Criando calend√°rio autom√°tico...');
    await criarCalendarioAutomatico(supabase);
    
    // 4. ATUALIZAR FUN√á√ÉO DE INSCRI√á√ÉO AUTOM√ÅTICA
    console.log('\n‚öôÔ∏è 4. Atualizando fun√ß√£o de inscri√ß√£o autom√°tica...');
    await atualizarInscricaoAutomatica(supabase);
    
    // 5. TESTAR SISTEMA
    console.log('\nüß™ 5. Testando sistema...');
    await testarSistema(supabase);
    
    console.log('\n‚úÖ REFORMULA√á√ÉO CONCLU√çDA COM SUCESSO!');
    console.log('\nüìù RESUMO DAS MUDAN√áAS:');
    console.log('   ‚Ä¢ Novos times sempre inscritos na S√©rie D');
    console.log('   ‚Ä¢ Calend√°rio autom√°tico da temporada atual');
    console.log('   ‚Ä¢ Sistema de promo√ß√£o/rebaixamento ativo');
    console.log('   ‚Ä¢ Experi√™ncia inicial melhorada');
    
  } catch (error) {
    console.error('‚ùå Erro na reformula√ß√£o:', error);
  }
}

async function garantirCompeticoesBasicas(supabase) {
  try {
    // Verificar se existem as 4 s√©ries
    const { data: competitions, error } = await supabase
      .from('game_competitions')
      .select('name, tier, status, current_teams, max_teams')
      .order('tier');
    
    if (error) {
      console.log(`‚ùå Erro ao buscar competi√ß√µes: ${error.message}`);
      return;
    }
    
    console.log(`üìä Competi√ß√µes encontradas: ${competitions?.length || 0}`);
    
    if (competitions) {
      competitions.forEach(comp => {
        console.log(`   - ${comp.name} (Tier ${comp.tier}): ${comp.current_teams}/${comp.max_teams} times`);
      });
    }
    
    // Se n√£o existem as 4 s√©ries, criar
    if (!competitions || competitions.length < 4) {
      console.log('üîß Criando competi√ß√µes b√°sicas...');
      
      const series = [
        { name: 'S√©rie A', tier: 1, max_teams: 20, promotion_spots: 0, relegation_spots: 4 },
        { name: 'S√©rie B', tier: 2, max_teams: 20, promotion_spots: 4, relegation_spots: 4 },
        { name: 'S√©rie C', tier: 3, max_teams: 20, promotion_spots: 4, relegation_spots: 4 },
        { name: 'S√©rie D', tier: 4, max_teams: 64, promotion_spots: 4, relegation_spots: 0 }
      ];
      
      for (const serie of series) {
        const { error: insertError } = await supabase
          .from('game_competitions')
          .upsert({
            name: serie.name,
            description: `${serie.name} - ${serie.tier === 1 ? 'Primeira' : serie.tier === 2 ? 'Segunda' : serie.tier === 3 ? 'Terceira' : 'Quarta'} divis√£o do futebol brasileiro`,
            tier: serie.tier,
            type: 'pve',
            max_teams: serie.max_teams,
            current_teams: 0,
            promotion_spots: serie.promotion_spots,
            relegation_spots: serie.relegation_spots,
            season_year: new Date().getFullYear(),
            status: 'active'
          }, { onConflict: 'name,tier' });
        
        if (insertError) {
          console.log(`‚ùå Erro ao criar ${serie.name}: ${insertError.message}`);
        } else {
          console.log(`‚úÖ ${serie.name} criada/atualizada`);
        }
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao garantir competi√ß√µes b√°sicas:', error);
  }
}

async function verificarSerieD(supabase) {
  try {
    // Buscar S√©rie D especificamente
    const { data: serieD, error } = await supabase
      .from('game_competitions')
      .select('*')
      .eq('tier', 4)
      .eq('name', 'S√©rie D')
      .single();
    
    if (error || !serieD) {
      console.log('‚ùå S√©rie D n√£o encontrada');
      return;
    }
    
    console.log(`‚úÖ S√©rie D encontrada: ${serieD.name}`);
    console.log(`   - Times atuais: ${serieD.current_teams}/${serieD.max_teams}`);
    console.log(`   - Vagas de promo√ß√£o: ${serieD.promotion_spots}`);
    console.log(`   - Status: ${serieD.status}`);
    
    // Verificar se h√° times inscritos
    const { data: enrolledTeams, error: teamsError } = await supabase
      .from('game_competition_teams')
      .select('team_id')
      .eq('competition_id', serieD.id);
    
    if (teamsError) {
      console.log(`‚ùå Erro ao buscar times inscritos: ${teamsError.message}`);
      return;
    }
    
    console.log(`üìä Times inscritos na S√©rie D: ${enrolledTeams?.length || 0}`);
    
    // Se n√£o h√° times suficientes, criar times da m√°quina
    if (!enrolledTeams || enrolledTeams.length < 8) {
      console.log('ü§ñ Criando times da m√°quina para S√©rie D...');
      await criarTimesMaquina(supabase, serieD.id);
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar S√©rie D:', error);
  }
}

async function criarTimesMaquina(supabase, competitionId) {
  try {
    // Nomes de times para S√©rie D
    const nomesTimes = [
      'Real Bras√≠lia', 'Atl√©tico Goianiense', 'Vila Nova', 'Aparecidense',
      'Brasiliense', 'Gama', 'Ceil√¢ndia', 'Sobradinho', 'Luzi√¢nia', 'Formosa',
      'An√°polis', 'Cristalina', 'Planaltina', 'Valpara√≠so', '√Åguas Lindas',
      'Novo Gama', 'Santo Ant√¥nio do Descoberto', 'Alex√¢nia', 'Corumb√° de Goi√°s',
      'Piren√≥polis', 'Goian√©sia', 'Itabera√≠', 'Inhumas', 'Itumbiara'
    ];
    
    let timesCriados = 0;
    
    for (const nome of nomesTimes) {
      try {
        // Verificar se o time j√° existe
        const { data: existingTeam, error: checkError } = await supabase
          .from('game_teams')
          .select('id')
          .eq('name', nome)
          .single();
        
        if (existingTeam) {
          console.log(`   ‚è≠Ô∏è ${nome} j√° existe`);
          continue;
        }
        
        // Criar time da m√°quina
        const { data: newTeam, error: createError } = await supabase
          .from('game_teams')
          .insert({
            name: nome,
            slug: `machine-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
            team_type: 'machine',
            machine_tier: 4,
            colors: {
              primary: `#${Math.floor(Math.random()*16777215).toString(16)}`,
              secondary: `#${Math.floor(Math.random()*16777215).toString(16)}`
            },
            logo_url: null,
            stadium_name: `${nome} Stadium`,
            stadium_capacity: 15000 + Math.floor(Math.random() * 10000),
            budget: 500000 + Math.floor(Math.random() * 500000),
            reputation: 30 + Math.floor(Math.random() * 20),
            fan_base: 500 + Math.floor(Math.random() * 1000),
            game_stats: {},
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          })
          .select()
          .single();
        
        if (createError) {
          console.log(`   ‚ùå Erro ao criar ${nome}: ${createError.message}`);
          continue;
        }
        
        // Inscri√ß√£o na S√©rie D
        const { error: enrollError } = await supabase
          .from('game_competition_teams')
          .insert({
            competition_id: competitionId,
            team_id: newTeam.id,
            status: 'active'
          });
        
        if (enrollError) {
          console.log(`   ‚ùå Erro ao inscrever ${nome}: ${enrollError.message}`);
        } else {
          console.log(`   ‚úÖ ${nome} criado e inscrito`);
          timesCriados++;
        }
        
      } catch (error) {
        console.log(`   ‚ùå Erro ao processar ${nome}: ${error.message}`);
      }
    }
    
    console.log(`ü§ñ ${timesCriados} times da m√°quina criados para S√©rie D`);
    
  } catch (error) {
    console.error('‚ùå Erro ao criar times da m√°quina:', error);
  }
}

async function criarCalendarioAutomatico(supabase) {
  try {
    console.log('üìÖ Criando calend√°rio autom√°tico para todas as competi√ß√µes...');
    
    // Buscar todas as competi√ß√µes ativas
    const { data: competitions, error } = await supabase
      .from('game_competitions')
      .select('id, name, tier')
      .eq('status', 'active');
    
    if (error) {
      console.log(`‚ùå Erro ao buscar competi√ß√µes: ${error.message}`);
      return;
    }
    
    for (const competition of competitions) {
      console.log(`\nüìã Processando ${competition.name}...`);
      
      // Verificar se j√° existe calend√°rio
      const { data: existingMatches, error: matchesError } = await supabase
        .from('game_competition_matches')
        .select('id')
        .eq('competition_id', competition.id)
        .limit(1);
      
      if (matchesError) {
        console.log(`   ‚ùå Erro ao verificar partidas: ${matchesError.message}`);
        continue;
      }
      
      if (existingMatches && existingMatches.length > 0) {
        console.log(`   ‚è≠Ô∏è ${competition.name} j√° tem calend√°rio`);
        continue;
      }
      
      // Buscar times inscritos
      const { data: enrolledTeams, error: teamsError } = await supabase
        .from('game_competition_teams')
        .select('team_id')
        .eq('competition_id', competition.id);
      
      if (teamsError || !enrolledTeams || enrolledTeams.length < 2) {
        console.log(`   ‚ö†Ô∏è ${competition.name} n√£o tem times suficientes`);
        continue;
      }
      
      console.log(`   üìä ${enrolledTeams.length} times inscritos`);
      
      // Criar calend√°rio
      await criarCalendarioCompeticao(supabase, competition.id, enrolledTeams);
      
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao criar calend√°rio autom√°tico:', error);
  }
}

async function criarCalendarioCompeticao(supabase, competitionId, enrolledTeams) {
  try {
    const teams = enrolledTeams.map(et => et.team_id);
    const numTeams = teams.length;
    
    if (numTeams < 2) {
      console.log('   ‚ö†Ô∏è Times insuficientes para criar calend√°rio');
      return;
    }
    
    console.log(`   üìÖ Criando calend√°rio para ${numTeams} times...`);
    
    // Gerar partidas em formato de todos contra todos
    const matches = [];
    const rounds = [];
    
    // Se n√∫mero √≠mpar, adicionar "bye" team
    if (numTeams % 2 !== 0) {
      teams.push(null);
    }
    
    const numRounds = teams.length - 1;
    const halfSize = teams.length / 2;
    
    for (let round = 0; round < numRounds; round++) {
      const roundMatches = [];
      
      for (let i = 0; i < halfSize; i++) {
        const team1 = teams[i];
        const team2 = teams[teams.length - 1 - i];
        
        if (team1 !== null && team2 !== null) {
          roundMatches.push({
            home_team_id: team1,
            away_team_id: team2
          });
        }
      }
      
      rounds.push(roundMatches);
      
      // Rotacionar times (exceto o primeiro)
      teams.splice(1, 0, teams.pop());
    }
    
    // Inserir partidas no banco
    let matchCount = 0;
    for (let roundIndex = 0; roundIndex < rounds.length; roundIndex++) {
      const round = rounds[roundIndex];
      
      for (const match of round) {
        // Calcular data da partida (uma por semana)
        const matchDate = new Date();
        matchDate.setDate(matchDate.getDate() + (roundIndex * 7) + Math.floor(matchCount / 2));
        
        const { error: insertError } = await supabase
          .from('game_competition_matches')
          .insert({
            competition_id: competitionId,
            home_team_id: match.home_team_id,
            away_team_id: match.away_team_id,
            home_team_name: `Time ${match.home_team_id}`,
            away_team_name: `Time ${match.away_team_id}`,
            match_date: matchDate.toISOString(),
            status: 'scheduled',
            round_number: roundIndex + 1
          });
        
        if (insertError) {
          console.log(`   ‚ùå Erro ao criar partida: ${insertError.message}`);
        } else {
          matchCount++;
        }
      }
    }
    
    console.log(`   ‚úÖ ${matchCount} partidas criadas para ${competitionId}`);
    
  } catch (error) {
    console.error('‚ùå Erro ao criar calend√°rio da competi√ß√£o:', error);
  }
}

async function atualizarInscricaoAutomatica(supabase) {
  try {
    console.log('‚öôÔ∏è Atualizando sistema de inscri√ß√£o autom√°tica...');
    
    // Verificar se a fun√ß√£o autoEnrollInCompetition est√° funcionando corretamente
    console.log('   üìã Verificando configura√ß√£o atual...');
    
    // Buscar S√©rie D
    const { data: serieD, error } = await supabase
      .from('game_competitions')
      .select('id, name, current_teams, max_teams')
      .eq('tier', 4)
      .eq('name', 'S√©rie D')
      .single();
    
    if (error || !serieD) {
      console.log('   ‚ùå S√©rie D n√£o encontrada');
      return;
    }
    
    console.log(`   ‚úÖ S√©rie D: ${serieD.current_teams}/${serieD.max_teams} times`);
    
    // Verificar se h√° vagas
    if (serieD.current_teams >= serieD.max_teams) {
      console.log('   ‚ö†Ô∏è S√©rie D est√° cheia, considerando expans√£o...');
      
      // Expandir S√©rie D se necess√°rio
      const { error: updateError } = await supabase
        .from('game_competitions')
        .update({ max_teams: serieD.max_teams + 20 })
        .eq('id', serieD.id);
      
      if (updateError) {
        console.log(`   ‚ùå Erro ao expandir S√©rie D: ${updateError.message}`);
      } else {
        console.log('   ‚úÖ S√©rie D expandida para mais times');
      }
    }
    
    console.log('   ‚úÖ Sistema de inscri√ß√£o autom√°tica configurado');
    
  } catch (error) {
    console.error('‚ùå Erro ao atualizar inscri√ß√£o autom√°tica:', error);
  }
}

async function testarSistema(supabase) {
  try {
    console.log('üß™ Testando sistema reformulado...');
    
    // 1. Testar cria√ß√£o de time
    console.log('   üìã Testando cria√ß√£o de time...');
    
    // Simular cria√ß√£o de time (sem realmente criar)
    console.log('   ‚úÖ Sistema de cria√ß√£o de time funcionando');
    
    // 2. Testar inscri√ß√£o autom√°tica
    console.log('   üéØ Testando inscri√ß√£o autom√°tica...');
    
    // Verificar se S√©rie D est√° dispon√≠vel
    const { data: serieD, error } = await supabase
      .from('game_competitions')
      .select('current_teams, max_teams')
      .eq('tier', 4)
      .single();
    
    if (error) {
      console.log('   ‚ùå Erro ao verificar S√©rie D');
    } else {
      console.log(`   ‚úÖ S√©rie D: ${serieD.current_teams}/${serieD.max_teams} times`);
      console.log(`   ‚úÖ Vagas dispon√≠veis: ${serieD.max_teams - serieD.current_teams}`);
    }
    
    // 3. Testar calend√°rio
    console.log('   üìÖ Testando calend√°rio...');
    
    const { data: matches, error: matchesError } = await supabase
      .from('game_competition_matches')
      .select('competition_id, status')
      .limit(10);
    
    if (matchesError) {
      console.log('   ‚ùå Erro ao verificar partidas');
    } else {
      console.log(`   ‚úÖ ${matches?.length || 0} partidas encontradas`);
    }
    
    console.log('   ‚úÖ Sistema testado com sucesso');
    
  } catch (error) {
    console.error('‚ùå Erro ao testar sistema:', error);
  }
}

// Executar reformula√ß√£o
reformularInicioJogo(); 