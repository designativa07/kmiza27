const axios = require('axios');

const API_BASE_URL = 'http://localhost:3004/api/v1';

async function criarPartidasTodasSeries() {
  console.log('üéØ Criando partidas em todas as s√©ries...\n');

  try {
    // Buscar todas as competi√ß√µes
    const competitionsResponse = await axios.get(`${API_BASE_URL}/competitions`);
    const competitions = competitionsResponse.data.data || [];

    console.log(`üìã Encontradas ${competitions.length} competi√ß√µes`);

    for (const competition of competitions) {
      console.log(`\nüèÜ Processando ${competition.name} (Tier ${competition.tier})`);
      
      // Verificar partidas existentes
      try {
        const matchesResponse = await axios.get(`${API_BASE_URL}/competitions/${competition.id}/matches`);
        const existingMatches = matchesResponse.data.data || [];
        
        console.log(`   üìÖ Partidas existentes: ${existingMatches.length}`);
        
        if (existingMatches.length > 0) {
          console.log(`   ‚úÖ ${competition.name} j√° tem partidas criadas`);
          continue;
        }
      } catch (error) {
        console.log(`   ‚ö†Ô∏è Erro ao verificar partidas da ${competition.name}:`, error.response?.data?.message || error.message);
      }

      // Verificar classifica√ß√£o para confirmar que h√° times
      try {
        const standingsResponse = await axios.get(`${API_BASE_URL}/competitions/${competition.id}/standings`);
        const standings = standingsResponse.data.data || [];
        
        console.log(`   üë• Times na classifica√ß√£o: ${standings.length}`);
        
        if (standings.length < 2) {
          console.log(`   ‚ö†Ô∏è ${competition.name} n√£o tem times suficientes para criar partidas`);
          continue;
        }
      } catch (error) {
        console.log(`   ‚ö†Ô∏è Erro ao verificar classifica√ß√£o da ${competition.name}:`, error.response?.data?.message || error.message);
        continue;
      }

      // Tentar criar rodadas para for√ßar a cria√ß√£o de partidas
      console.log(`   üéØ Criando rodadas para ${competition.name}...`);
      
      const totalRounds = 38; // 19 times = 18 rodadas no turno + 18 no returno = 36 rodadas
      
      for (let round = 1; round <= totalRounds; round++) {
        try {
          await axios.post(`${API_BASE_URL}/competitions/${competition.id}/rounds`, {
            roundNumber: round,
            name: `Rodada ${round}`
          });
        } catch (error) {
          if (error.response?.data?.message?.includes('already exists')) {
            console.log(`   ‚ÑπÔ∏è Rodada ${round} j√° existe`);
          } else {
            console.log(`   ‚ö†Ô∏è Erro ao criar rodada ${round}:`, error.response?.data?.message || error.message);
          }
        }
      }

      // Aguardar um momento e verificar se as partidas foram criadas
      console.log(`   ‚è≥ Aguardando cria√ß√£o de partidas para ${competition.name}...`);
      await new Promise(resolve => setTimeout(resolve, 3000));

      try {
        const finalMatchesResponse = await axios.get(`${API_BASE_URL}/competitions/${competition.id}/matches`);
        const finalMatches = finalMatchesResponse.data.data || [];
        
        console.log(`   üìÖ Partidas criadas para ${competition.name}: ${finalMatches.length}`);
        
        if (finalMatches.length > 0) {
          console.log(`   ‚úÖ ${competition.name} - Partidas criadas com sucesso!`);
          finalMatches.slice(0, 5).forEach((match, index) => {
            console.log(`      ${index + 1}. ${match.home_team_name} vs ${match.away_team_name} - Rodada ${match.round_number}`);
          });
          if (finalMatches.length > 5) {
            console.log(`      ... e mais ${finalMatches.length - 5} partidas`);
          }
        } else {
          console.log(`   ‚ö†Ô∏è ${competition.name} - Nenhuma partida foi criada automaticamente`);
        }
      } catch (error) {
        console.log(`   ‚ùå Erro ao verificar partidas finais da ${competition.name}:`, error.response?.data?.message || error.message);
      }
    }

    console.log('\nüéâ Processamento de todas as s√©ries conclu√≠do!');
    console.log('üìã Resumo:');
    console.log('   - Todas as s√©ries foram verificadas');
    console.log('   - Rodadas foram criadas onde necess√°rio');
    console.log('   - Partidas devem aparecer no frontend');

  } catch (error) {
    console.error('‚ùå Erro geral:', error.response?.data || error.message);
  }
}

criarPartidasTodasSeries(); 