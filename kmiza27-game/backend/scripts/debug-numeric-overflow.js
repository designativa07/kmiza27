const { getSupabaseServiceClient } = require('../config/supabase-connection.js');

async function debugNumericOverflow() {
  console.log('üîç DEBUGANDO OVERFLOW NUM√âRICO - IDENTIFICANDO CAMPO PROBLEM√ÅTICO');
  console.log('==================================================================\n');

  const supabase = getSupabaseServiceClient('vps');

  try {
    // 1. Verificar estrutura da tabela
    console.log('üìã 1. Verificando estrutura da tabela game_players...');
    
    const { data: tableInfo, error: tableError } = await supabase
      .from('game_players')
      .select('*')
      .limit(1);

    if (tableError) {
      console.log('‚ùå Erro ao acessar tabela:', tableError.message);
      return;
    }

    if (tableInfo && tableInfo.length > 0) {
      console.log('‚úÖ Tabela acess√≠vel');
      console.log('üìä Colunas dispon√≠veis:', Object.keys(tableInfo[0]).length);
    } else {
      console.log('‚ÑπÔ∏è Tabela vazia, tentando inser√ß√£o m√≠nima...');
    }

    // 2. Testar inser√ß√£o com campos m√≠nimos
    console.log('\nüß™ 2. Testando inser√ß√£o m√≠nima...');
    
    const minimalPlayer = {
      id: require('crypto').randomUUID(),
      team_id: '00000000-0000-0000-0000-000000000001', // ID fict√≠cio para teste
      name: 'Teste Overflow',
      age: 25,
      nationality: 'BRA',
      position: 'GK',
      potential: 50,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };

    console.log('üìù Tentando inserir jogador com campos m√≠nimos...');
    const { error: minimalError } = await supabase
      .from('game_players')
      .insert(minimalPlayer);

    if (minimalError) {
      console.log('‚ùå Erro na inser√ß√£o m√≠nima:', minimalError.message);
      
      // 3. Se falhar, tentar identificar o campo problem√°tico
      if (minimalError.message.includes('numeric field overflow')) {
        console.log('\nüîç 3. Identificando campo com overflow...');
        
        // Testar cada campo num√©rico individualmente
        const numericFields = ['age', 'potential'];
        
        for (const field of numericFields) {
          console.log(`   üß™ Testando campo: ${field}`);
          
          const testData = { ...minimalPlayer };
          testData[field] = 1; // Valor m√≠nimo
          
          const { error: fieldError } = await supabase
            .from('game_players')
            .insert(testData);
          
          if (fieldError) {
            console.log(`      ‚ùå ${field} = 1: ${fieldError.message}`);
          } else {
            console.log(`      ‚úÖ ${field} = 1: OK`);
          }
        }
      }
    } else {
      console.log('‚úÖ Inser√ß√£o m√≠nima bem-sucedida!');
    }

    // 4. Verificar constraints da tabela
    console.log('\nüîß 4. Verificando constraints...');
    
    try {
      const { data: constraints, error: constraintsError } = await supabase
        .rpc('get_table_constraints', { table_name: 'game_players' });
      
      if (constraintsError) {
        console.log('‚ÑπÔ∏è N√£o foi poss√≠vel verificar constraints via RPC');
      } else {
        console.log('üìã Constraints encontradas:', constraints);
      }
    } catch (error) {
      console.log('‚ÑπÔ∏è RPC n√£o dispon√≠vel');
    }

    // 5. Tentar inser√ß√£o com valores extremos
    console.log('\nüß™ 5. Testando valores extremos...');
    
    const extremePlayer = {
      id: require('crypto').randomUUID(),
      team_id: '00000000-0000-0000-0000-000000000001',
      name: 'Teste Extremo',
      age: 1, // Valor m√≠nimo
      nationality: 'BRA',
      position: 'GK',
      potential: 1, // Valor m√≠nimo
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };

    const { error: extremeError } = await supabase
      .from('game_players')
      .insert(extremePlayer);

    if (extremeError) {
      console.log('‚ùå Erro com valores extremos:', extremeError.message);
    } else {
      console.log('‚úÖ Valores extremos funcionaram!');
    }

    // 6. Verificar se h√° campos calculados/gerados
    console.log('\nüîç 6. Verificando campos calculados...');
    
    const { data: existingPlayer, error: existingError } = await supabase
      .from('game_players')
      .select('*')
      .limit(1);

    if (existingPlayer && existingPlayer.length > 0) {
      const player = existingPlayer[0];
      console.log('üìä Campos do jogador existente:');
      
      // Verificar campos que podem ser calculados
      const possibleCalculatedFields = ['current_ability', 'overall_rating', 'market_value'];
      
      possibleCalculatedFields.forEach(field => {
        if (player.hasOwnProperty(field)) {
          console.log(`   ‚Ä¢ ${field}: ${player[field]} (tipo: ${typeof player[field]})`);
        }
      });
    }

    // 7. Recomenda√ß√µes
    console.log('\nüí° RECOMENDA√á√ïES:');
    console.log('   ‚Ä¢ O erro "numeric field overflow" indica um campo SMALLINT ou similar');
    console.log('   ‚Ä¢ Poss√≠veis campos problem√°ticos: age, potential, salary, market_value');
    console.log('   ‚Ä¢ Verificar se h√° campos calculados que n√£o podem ser inseridos');
    console.log('   ‚Ä¢ Verificar se h√° triggers ou constraints que modificam valores');

  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

debugNumericOverflow();
