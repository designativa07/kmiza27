const { getSupabaseClient } = require('../config/supabase-connection');

async function fixMachineTeamsDuplicates() {
  try {
    console.log('üß™ CORRE√á√ÉO: Removendo duplicatas e organizando times da m√°quina\n');
    
    const supabase = getSupabaseClient('vps');
    
    // 1. Buscar todos os times existentes
    console.log('1Ô∏è‚É£ Verificando todos os times existentes...');
    const { data: allTeams } = await supabase
      .from('game_machine_teams')
      .select('*')
      .order('tier', { ascending: true })
      .order('created_at', { ascending: true });
    
    console.log(`‚úÖ Encontrados ${allTeams?.length || 0} times no total`);
    
    // 2. Agrupar por s√©rie
    const teamsByTier = {};
    allTeams?.forEach(team => {
      if (!teamsByTier[team.tier]) {
        teamsByTier[team.tier] = [];
      }
      teamsByTier[team.tier].push(team);
    });
    
    console.log('üìä Times por s√©rie (antes da corre√ß√£o):');
    [1, 2, 3, 4].forEach(tier => {
      const count = teamsByTier[tier]?.length || 0;
      console.log(`   S√©rie ${getTierName(tier)}: ${count} times`);
    });
    
    // 3. Definir times corretos por s√©rie (conforme GUIA_IA_GAME.md)
    const correctTeamsByTier = {
      4: [ // S√©rie D (Entrada)
        'Atl√©tico Brasiliense', 'Real DF', 'Gama FC', 'Vila Nova GO',
        'Aparecidense', 'Brasiliense FC', 'Ceil√¢ndia EC', 'Sobradinho EC',
        'Luzi√¢nia EC', 'Formosa EC', 'An√°polis FC', 'Cristalina FC',
        'Planaltina EC', 'Valpara√≠so FC', '√Åguas Lindas FC', 'Novo Gama FC',
        'Santo Ant√¥nio EC', 'Alex√¢nia FC', 'Goian√©sia EC'
      ],
      3: [ // S√©rie C
        'Guarani SP', 'Ponte Preta', 'Ituano', 'Mirassol', 'Novorizontino',
        'Botafogo SP', 'Portuguesa', 'Santo Andr√©', 'S√£o Jos√© SP',
        'Vila Nova GO', 'Goi√°s', 'Atl√©tico GO', 'Tombense', 'Caldense',
        'Am√©rica MG', 'Villa Nova MG', 'URT', 'Patrocinense', 'Athletic Club'
      ],
      2: [ // S√©rie B
        'Santos', 'Guarani', 'Ponte Preta', 'Novorizontino', 'Mirassol',
        'Sport', 'N√°utico', 'Vila Nova', 'Goi√°s', 'Coritiba', 'Ava√≠',
        'Chapecoense', 'Londrina', 'Oper√°rio PR', 'CRB', 'CSA',
        'Botafogo PB', 'Sampaio Corr√™a', 'Paysandu'
      ],
      1: [ // S√©rie A (Elite)
        'Flamengo', 'Palmeiras', 'S√£o Paulo', 'Corinthians', 'Santos',
        'Gr√™mio', 'Internacional', 'Atl√©tico MG', 'Cruzeiro', 'Botafogo',
        'Fluminense', 'Vasco', 'Fortaleza', 'Cear√°', 'Bahia', 'Vit√≥ria',
        'Athletico PR', 'Coritiba', 'Cuiab√°'
      ]
    };
    
    // 4. Limpar e recriar cada s√©rie
    console.log('\n2Ô∏è‚É£ Limpando e recriando s√©ries...');
    
    for (const [tier, correctNames] of Object.entries(correctTeamsByTier)) {
      const tierNum = parseInt(tier);
      const tierName = getTierName(tierNum);
      
      console.log(`\nüìã Processando S√©rie ${tierName}...`);
      
      // Remover todos os times desta s√©rie
      const { error: deleteError } = await supabase
        .from('game_machine_teams')
        .delete()
        .eq('tier', tierNum);
      
      if (deleteError) {
        console.log(`   ‚ùå Erro ao limpar S√©rie ${tierName}: ${deleteError.message}`);
        continue;
      }
      
      console.log(`   üóëÔ∏è Times antigos removidos`);
      
      // Criar os 19 times corretos
      for (let i = 0; i < correctNames.length; i++) {
        const teamName = correctNames[i];
        const baseAttributes = getBaseAttributesByTier(tierNum);
        
        const teamData = {
          name: teamName,
          tier: tierNum,
          attributes: baseAttributes,
          stadium_name: `Est√°dio ${teamName}`,
          stadium_capacity: 20000 + Math.floor(Math.random() * 30000),
          colors: generateTeamColors(),
          display_order: i + 1,
          is_active: true
        };
        
        const { error: insertError } = await supabase
          .from('game_machine_teams')
          .insert(teamData);
        
        if (insertError) {
          console.log(`   ‚ùå Erro ao criar ${teamName}: ${insertError.message}`);
        } else {
          console.log(`   ‚úÖ ${teamName} criado (${i + 1}/19)`);
        }
      }
    }
    
    // 5. Verificar resultado final
    console.log('\n3Ô∏è‚É£ Verificando resultado final...');
    const { data: finalTeams } = await supabase
      .from('game_machine_teams')
      .select('tier, name')
      .order('tier')
      .order('name');
    
    const finalCounts = {};
    finalTeams?.forEach(team => {
      finalCounts[team.tier] = (finalCounts[team.tier] || 0) + 1;
    });
    
    console.log('üìä Times finais por s√©rie:');
    let allCorrect = true;
    [1, 2, 3, 4].forEach(tier => {
      const count = finalCounts[tier] || 0;
      const tierName = getTierName(tier);
      const isCorrect = count === 19;
      if (!isCorrect) allCorrect = false;
      console.log(`   S√©rie ${tierName}: ${count}/19 times ${isCorrect ? '‚úÖ' : '‚ùå'}`);
    });
    
    console.log('\nüéØ RESULTADO FINAL:');
    if (allCorrect) {
      console.log('‚úÖ PERFEITO! Todas as s√©ries t√™m exatamente 19 times da m√°quina');
      console.log('‚úÖ Sistema reformulado funcionando conforme GUIA_IA_GAME.md');
      console.log('‚úÖ Algoritmo round-robin corrigido pronto para usar');
      console.log('üéÆ Agora voc√™ pode jogar e todos os times ter√£o n√∫mero igual de jogos!');
    } else {
      console.log('‚ùå Ainda h√° problemas com o n√∫mero de times');
      console.log('üí° Verifique os erros acima e execute novamente se necess√°rio');
    }
    
  } catch (error) {
    console.error('‚ùå Erro na corre√ß√£o:', error);
  }
}

function getTierName(tier) {
  const tierNames = { 1: 'A', 2: 'B', 3: 'C', 4: 'D' };
  return tierNames[tier] || `${tier}`;
}

function getBaseAttributesByTier(tier) {
  const baseByTier = {
    1: 87.5, // S√©rie A: 80-95
    2: 77.5, // S√©rie B: 70-85  
    3: 67.5, // S√©rie C: 60-75
    4: 57.5  // S√©rie D: 50-65
  };
  
  const base = baseByTier[tier] || 57.5;
  const variation = 7.5;
  
  return Math.round((base + (Math.random() - 0.5) * variation * 2) * 10) / 10;
}

function generateTeamColors() {
  const colors = [
    { primary: '#FF0000', secondary: '#FFFFFF' },
    { primary: '#0000FF', secondary: '#FFFFFF' },
    { primary: '#008000', secondary: '#FFFFFF' },
    { primary: '#000000', secondary: '#FFFFFF' },
    { primary: '#FFD700', secondary: '#000000' },
    { primary: '#800080', secondary: '#FFFFFF' },
    { primary: '#FFA500', secondary: '#000000' },
    { primary: '#FF69B4', secondary: '#FFFFFF' }
  ];
  
  return colors[Math.floor(Math.random() * colors.length)];
}

// Executar
fixMachineTeamsDuplicates();