const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://your-project.supabase.co';
const supabaseServiceKey = 'your-service-role-key';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function fixSerieDCapacity() {
  try {
    console.log('üîß Corrigindo capacidade da S√©rie D...');
    
    // 1. Verificar times inscritos na S√©rie D
    const serieDId = '045a3b64-59fc-48fd-ad8f-828b4f1a5319';
    
    const { data: enrolledTeams, error: teamsError } = await supabase
      .from('game_competition_teams')
      .select(`
        *,
        game_teams!inner(id, name, team_type)
      `)
      .eq('competition_id', serieDId);
    
    if (teamsError) {
      console.error('‚ùå Erro ao buscar times inscritos:', teamsError);
      return;
    }
    
    console.log(`üìä Times inscritos na S√©rie D: ${enrolledTeams.length}`);
    
    // 2. Separar times da m√°quina dos times de usu√°rio
    const machineTeams = enrolledTeams.filter(team => team.game_teams.team_type === 'machine');
    const userTeams = enrolledTeams.filter(team => team.game_teams.team_type === 'user_created');
    
    console.log(`ü§ñ Times da m√°quina: ${machineTeams.length}`);
    console.log(`üë§ Times de usu√°rio: ${userTeams.length}`);
    
    // 3. Se h√° muitos times da m√°quina, remover alguns para liberar espa√ßo
    if (machineTeams.length > 10) {
      const teamsToRemove = machineTeams.slice(0, 5); // Remover 5 times da m√°quina
      
      console.log(`üóëÔ∏è Removendo ${teamsToRemove.length} times da m√°quina para liberar espa√ßo:`);
      
      for (const team of teamsToRemove) {
        console.log(`  - ${team.game_teams.name} (${team.game_teams.team_type})`);
        
        // Remover da competi√ß√£o
        const { error: deleteError } = await supabase
          .from('game_competition_teams')
          .delete()
          .eq('competition_id', serieDId)
          .eq('team_id', team.team_id);
        
        if (deleteError) {
          console.error(`    ‚ùå Erro ao remover ${team.game_teams.name}:`, deleteError);
        } else {
          console.log(`    ‚úÖ ${team.game_teams.name} removido`);
        }
      }
      
      // 4. Atualizar contador da competi√ß√£o
      const newCount = enrolledTeams.length - teamsToRemove.length;
      const { error: updateError } = await supabase
        .from('game_competitions')
        .update({ current_teams: newCount })
        .eq('id', serieDId);
      
      if (updateError) {
        console.error('‚ùå Erro ao atualizar contador da competi√ß√£o:', updateError);
      } else {
        console.log(`‚úÖ Contador da S√©rie D atualizado para ${newCount} times`);
      }
      
      // 5. Remover standings dos times removidos
      for (const team of teamsToRemove) {
        const { error: standingsError } = await supabase
          .from('game_standings')
          .delete()
          .eq('competition_id', serieDId)
          .eq('team_id', team.team_id);
        
        if (standingsError) {
          console.error(`    ‚ùå Erro ao remover standings de ${team.game_teams.name}:`, standingsError);
        }
      }
      
      console.log('üéâ Espa√ßo liberado na S√©rie D! Agora novos usu√°rios podem se inscrever.');
      
    } else {
      console.log('‚ö†Ô∏è N√£o h√° times da m√°quina suficientes para remover. A S√©rie D est√° cheia com times de usu√°rio.');
      console.log('üí° Solu√ß√µes poss√≠veis:');
      console.log('   1. Criar mais competi√ß√µes');
      console.log('   2. Permitir inscri√ß√£o em outras s√©ries temporariamente');
      console.log('   3. Aumentar o limite de times por competi√ß√£o');
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao corrigir capacidade da S√©rie D:', error);
  }
}

fixSerieDCapacity(); 