const { getSupabaseClient } = require('../config/supabase-connection');

async function completarMigracaoReformulada() {
  console.log('üîÑ MIGRA√á√ÉO: Completando migra√ß√£o para sistema reformulado');
  console.log('='.repeat(60));

  const supabase = getSupabaseClient('vps');

  try {
    // Passo 1: Sincronizar times da m√°quina
    console.log('\nü§ñ PASSO 1: Sincronizando times da m√°quina...');
    await sincronizarTimesMaquina(supabase);
    
    // Passo 2: Limpar dados √≥rf√£os
    console.log('\nüßπ PASSO 2: Limpando dados √≥rf√£os...');
    await limparDadosOrfaos(supabase);
    
    // Passo 3: Reinscrever times nas competi√ß√µes
    console.log('\nüìù PASSO 3: Reinscrevendo times nas competi√ß√µes...');
    await reinscreverTimesCompeticoes(supabase);
    
    // Passo 4: Recriar calend√°rios
    console.log('\nüìÖ PASSO 4: Recriando calend√°rios...');
    await recriarCalendarios(supabase);
    
    // Passo 5: Verificar integridade
    console.log('\n‚úÖ PASSO 5: Verificando integridade...');
    await verificarIntegridade(supabase);

    console.log('\n' + '='.repeat(60));
    console.log('üéâ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!');
    console.log('‚úÖ Sistema reformulado est√° operacional');
    console.log('üéÆ Usu√°rios podem criar times e jogar normalmente');

  } catch (error) {
    console.error('\nüí• ERRO CR√çTICO na migra√ß√£o:', error);
    throw error;
  }
}

async function sincronizarTimesMaquina(supabase) {
  try {
    console.log('üîç Verificando sincroniza√ß√£o...');
    
    // Buscar times da m√°quina
    const { data: machineTeams, error: machineError } = await supabase
      .from('game_machine_teams')
      .select('*')
      .eq('is_active', true)
      .order('tier', { ascending: true });

    if (machineError) {
      throw new Error(`Erro ao buscar times da m√°quina: ${machineError.message}`);
    }

    // Verificar quantos j√° existem em game_teams
    const { data: gameTeams, error: gameError } = await supabase
      .from('game_teams')
      .select('id')
      .eq('team_type', 'machine');

    if (gameError) {
      throw new Error(`Erro ao buscar game_teams: ${gameError.message}`);
    }

    console.log(`üìä Times da m√°quina: ${machineTeams.length}`);
    console.log(`üìä Times em game_teams: ${gameTeams.length}`);

    if (gameTeams.length === 0) {
      console.log('üîÑ Migrando todos os times da m√°quina para game_teams...');
      
      // Converter e inserir times da m√°quina em game_teams
      const gameTeamsToInsert = machineTeams.map(team => ({
        id: team.id, // Manter mesmo ID para refer√™ncias
        name: team.name,
        team_type: 'machine',
        logo_url: null,
        owner_id: null, // Times da m√°quina n√£o t√™m dono
        kit_colors: team.colors,
        stadium_name: team.stadium_name,
        stadium_capacity: team.stadium_capacity,
        is_active: team.is_active,
        created_at: team.created_at,
        updated_at: team.created_at
      }));

      // Inserir em lotes
      const batchSize = 20;
      let insertedCount = 0;
      
      for (let i = 0; i < gameTeamsToInsert.length; i += batchSize) {
        const batch = gameTeamsToInsert.slice(i, i + batchSize);
        
        const { error: insertError } = await supabase
          .from('game_teams')
          .insert(batch);

        if (insertError) {
          console.error(`‚ùå Erro ao inserir lote:`, insertError);
          continue;
        }
        
        insertedCount += batch.length;
        console.log(`   ‚úÖ Inseridos ${insertedCount}/${gameTeamsToInsert.length} times`);
      }

      console.log(`üéâ ${insertedCount} times da m√°quina sincronizados com sucesso!`);
      
    } else if (gameTeams.length < machineTeams.length) {
      console.log(`‚ö†Ô∏è Faltam ${machineTeams.length - gameTeams.length} times para sincronizar`);
      // Aqui poderia implementar sincroniza√ß√£o parcial se necess√°rio
    } else {
      console.log('‚úÖ Times da m√°quina j√° est√£o sincronizados');
    }

  } catch (error) {
    console.error('‚ùå Erro na sincroniza√ß√£o de times:', error);
    throw error;
  }
}

async function limparDadosOrfaos(supabase) {
  try {
    console.log('üîç Identificando dados √≥rf√£os...');
    
    // Limpar inscri√ß√µes √≥rf√£s em game_competition_teams
    const { data: orphanedEnrollments, error: orphanError } = await supabase
      .from('game_competition_teams')
      .select(`
        id,
        team_id,
        competition_id,
        game_teams!left(id)
      `)
      .is('game_teams.id', null);

    if (!orphanError && orphanedEnrollments && orphanedEnrollments.length > 0) {
      console.log(`üóëÔ∏è Removendo ${orphanedEnrollments.length} inscri√ß√µes √≥rf√£s...`);
      
      const orphanIds = orphanedEnrollments.map(e => e.id);
      const { error: deleteError } = await supabase
        .from('game_competition_teams')
        .delete()
        .in('id', orphanIds);

      if (deleteError) {
        console.error('‚ùå Erro ao remover √≥rf√£os:', deleteError);
      } else {
        console.log('‚úÖ Inscri√ß√µes √≥rf√£s removidas');
      }
    } else {
      console.log('‚úÖ Nenhuma inscri√ß√£o √≥rf√£ encontrada');
    }

    // Limpar progresso de usu√°rios sem times
    const { data: orphanedProgress, error: progressError } = await supabase
      .from('game_user_competition_progress')
      .select(`
        id,
        team_id,
        user_id,
        game_teams!left(id)
      `)
      .is('game_teams.id', null);

    if (!progressError && orphanedProgress && orphanedProgress.length > 0) {
      console.log(`üóëÔ∏è Removendo ${orphanedProgress.length} progressos √≥rf√£os...`);
      
      const progressIds = orphanedProgress.map(p => p.id);
      const { error: deleteProgressError } = await supabase
        .from('game_user_competition_progress')
        .delete()
        .in('id', progressIds);

      if (deleteProgressError) {
        console.error('‚ùå Erro ao remover progressos √≥rf√£os:', deleteProgressError);
      } else {
        console.log('‚úÖ Progressos √≥rf√£os removidos');
      }
    } else {
      console.log('‚úÖ Nenhum progresso √≥rf√£o encontrado');
    }

  } catch (error) {
    console.error('‚ùå Erro na limpeza de √≥rf√£os:', error);
    throw error;
  }
}

async function reinscreverTimesCompeticoes(supabase) {
  try {
    console.log('üîç Verificando inscri√ß√µes nas competi√ß√µes...');
    
    // Buscar todas as competi√ß√µes ativas
    const { data: competitions, error: compError } = await supabase
      .from('game_competitions')
      .select('*')
      .eq('status', 'active')
      .order('tier');

    if (compError) {
      throw new Error(`Erro ao buscar competi√ß√µes: ${compError.message}`);
    }

    for (const competition of competitions) {
      console.log(`\nüìã Processando ${competition.name}...`);
      
      // Verificar times inscritos
      const { data: enrolledTeams, error: enrollError } = await supabase
        .from('game_competition_teams')
        .select('team_id')
        .eq('competition_id', competition.id);

      if (enrollError) {
        console.log(`   ‚ùå Erro ao verificar inscri√ß√µes: ${enrollError.message}`);
        continue;
      }

      console.log(`   üìä Times inscritos: ${enrolledTeams.length}`);

      // Se a competi√ß√£o n√£o tem times suficientes, inscrever times da m√°quina
      if (enrolledTeams.length < 20) {
        const needed = 20 - enrolledTeams.length;
        console.log(`   ü§ñ Inscrevendo ${needed} times da m√°quina...`);
        
        // Buscar times da m√°quina da s√©rie correspondente
        const currentTeamIds = enrolledTeams.map(e => e.team_id);
        
        const { data: availableMachineTeams, error: machineError } = await supabase
          .from('game_teams')
          .select('id')
          .eq('team_type', 'machine')
          .not('id', 'in', `(${currentTeamIds.join(',') || 'NULL'})`)
          .limit(needed);

        if (!machineError && availableMachineTeams && availableMachineTeams.length > 0) {
          const enrollments = availableMachineTeams.map(team => ({
            competition_id: competition.id,
            team_id: team.id,
            enrolled_at: new Date().toISOString(),
            status: 'active'
          }));

          const { error: insertError } = await supabase
            .from('game_competition_teams')
            .insert(enrollments);

          if (insertError) {
            console.log(`   ‚ùå Erro ao inscrever times: ${insertError.message}`);
          } else {
            console.log(`   ‚úÖ ${enrollments.length} times da m√°quina inscritos`);
          }
        }
      } else {
        console.log(`   ‚úÖ Competi√ß√£o j√° tem times suficientes`);
      }
    }

  } catch (error) {
    console.error('‚ùå Erro na reinscri√ß√£o:', error);
    throw error;
  }
}

async function recriarCalendarios(supabase) {
  try {
    console.log('üîç Verificando calend√°rios...');
    
    // Buscar competi√ß√µes ativas
    const { data: competitions, error: compError } = await supabase
      .from('game_competitions')
      .select('*')
      .eq('status', 'active');

    if (compError) {
      throw new Error(`Erro ao buscar competi√ß√µes: ${compError.message}`);
    }

    for (const competition of competitions) {
      console.log(`\nüìÖ Verificando calend√°rio de ${competition.name}...`);
      
      // Verificar se j√° tem partidas
      const { data: existingMatches, error: matchError } = await supabase
        .from('game_matches')
        .select('id')
        .eq('competition_id', competition.id);

      if (matchError) {
        console.log(`   ‚ùå Erro ao verificar partidas: ${matchError.message}`);
        continue;
      }

      // Verificar times inscritos
      const { data: enrolledTeams, error: teamsError } = await supabase
        .from('game_competition_teams')
        .select('team_id')
        .eq('competition_id', competition.id);

      if (teamsError) {
        console.log(`   ‚ùå Erro ao verificar times: ${teamsError.message}`);
        continue;
      }

      const expectedMatches = enrolledTeams.length > 1 ? 
        enrolledTeams.length * (enrolledTeams.length - 1) : 0;

      console.log(`   üìä Partidas: ${existingMatches.length}/${expectedMatches}`);

      if (existingMatches.length < expectedMatches && enrolledTeams.length >= 2) {
        console.log(`   üîß Recriando calend√°rio...`);
        // Aqui voc√™ pode chamar a fun√ß√£o de cria√ß√£o de calend√°rio
        // que j√° existe no seu sistema
      } else {
        console.log(`   ‚úÖ Calend√°rio est√° completo`);
      }
    }

  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o de calend√°rios:', error);
    throw error;
  }
}

async function verificarIntegridade(supabase) {
  try {
    console.log('üîç Verificando integridade final...');
    
    // Verificar times
    const { data: gameTeams, error: teamsError } = await supabase
      .from('game_teams')
      .select('team_type')
      .eq('team_type', 'machine');

    const machineTeamsCount = gameTeams?.length || 0;
    console.log(`ü§ñ Times da m√°quina em game_teams: ${machineTeamsCount}/76`);

    // Verificar competi√ß√µes
    const { data: competitions, error: compError } = await supabase
      .from('game_competitions')
      .select('id, name, tier')
      .eq('status', 'active');

    console.log(`üèÜ Competi√ß√µes ativas: ${competitions?.length || 0}`);

    // Verificar inscri√ß√µes por competi√ß√£o
    if (competitions) {
      for (const comp of competitions) {
        const { data: enrollments, error: enrollError } = await supabase
          .from('game_competition_teams')
          .select('team_id')
          .eq('competition_id', comp.id);

        const enrollmentsCount = enrollments?.length || 0;
        const status = enrollmentsCount >= 19 ? '‚úÖ' : '‚ö†Ô∏è';
        console.log(`   ${status} ${comp.name}: ${enrollmentsCount} times inscritos`);
      }
    }

    console.log('\nüìä RESUMO DA INTEGRIDADE:');
    console.log(`   Times da m√°quina: ${machineTeamsCount === 76 ? '‚úÖ' : '‚ùå'} (${machineTeamsCount}/76)`);
    console.log(`   Competi√ß√µes ativas: ${competitions?.length === 4 ? '‚úÖ' : '‚ùå'} (${competitions?.length || 0}/4)`);

  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o de integridade:', error);
    throw error;
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  completarMigracaoReformulada()
    .then(() => {
      console.log('\nüèÅ Migra√ß√£o finalizada!');
      process.exit(0);
    })
    .catch(error => {
      console.error('üí• Erro fatal na migra√ß√£o:', error);
      process.exit(1);
    });
}

module.exports = { completarMigracaoReformulada };