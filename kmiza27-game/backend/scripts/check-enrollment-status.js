const { getSupabaseServiceClient } = require('../config/supabase-connection');

const supabase = getSupabaseServiceClient('vps');

async function checkEnrollmentStatus() {
  console.log('üîç Verificando status da inscri√ß√£o...\n');

  try {
    // 1. Verificar times criados pelo usu√°rio
    console.log('1. Verificando times criados pelo usu√°rio...');
    const { data: userTeams, error: userTeamsError } = await supabase
      .from('game_teams')
      .select('*')
      .eq('team_type', 'user_created')
      .order('created_at', { ascending: false })
      .limit(5);

    if (userTeamsError) {
      console.error('‚ùå Erro ao buscar times do usu√°rio:', userTeamsError);
      return;
    }

    console.log(`‚úÖ Encontrados ${userTeams.length} times criados pelo usu√°rio:`);
    userTeams.forEach(team => {
      console.log(`   - ${team.name} (ID: ${team.id}, Criado: ${team.created_at})`);
    });

    if (userTeams.length === 0) {
      console.log('‚ùå Nenhum time criado pelo usu√°rio encontrado');
      return;
    }

    const latestTeam = userTeams[0];
    console.log(`\nüîç Analisando time mais recente: ${latestTeam.name}`);

    // 2. Verificar se o time est√° inscrito em alguma competi√ß√£o
    console.log('\n2. Verificando inscri√ß√µes em competi√ß√µes...');
    const { data: enrollments, error: enrollmentsError } = await supabase
      .from('game_competition_teams')
      .select('*')
      .eq('team_id', latestTeam.id);

    if (enrollmentsError) {
      console.error('‚ùå Erro ao buscar inscri√ß√µes:', enrollmentsError);
      return;
    }

    console.log(`‚úÖ Encontradas ${enrollments.length} inscri√ß√µes para o time:`);
    enrollments.forEach(enrollment => {
      console.log(`   - Competi√ß√£o ID: ${enrollment.competition_id}`);
    });

    if (enrollments.length === 0) {
      console.log('‚ùå Time n√£o est√° inscrito em nenhuma competi√ß√£o');
      console.log('üîß Isso indica que o m√©todo autoEnrollInCompetition n√£o funcionou');
      return;
    }

    const competitionId = enrollments[0].competition_id;
    console.log(`\nüîç Analisando competi√ß√£o: ${competitionId}`);

    // 3. Verificar detalhes da competi√ß√£o
    console.log('\n3. Verificando detalhes da competi√ß√£o...');
    const { data: competition, error: competitionError } = await supabase
      .from('game_competitions')
      .select('*')
      .eq('id', competitionId)
      .single();

    if (competitionError) {
      console.error('‚ùå Erro ao buscar competi√ß√£o:', competitionError);
      return;
    }

    console.log(`‚úÖ Competi√ß√£o: ${competition.name} (Tier: ${competition.tier})`);
    console.log(`   - Times atuais: ${competition.current_teams}/${competition.max_teams}`);

    // 4. Verificar todos os times inscritos na competi√ß√£o
    console.log('\n4. Verificando todos os times inscritos na competi√ß√£o...');
    const { data: allEnrollments, error: allEnrollmentsError } = await supabase
      .from('game_competition_teams')
      .select(`
        *,
        game_teams!inner(id, name, team_type)
      `)
      .eq('competition_id', competitionId);

    if (allEnrollmentsError) {
      console.error('‚ùå Erro ao buscar todos os times inscritos:', allEnrollmentsError);
      return;
    }

    console.log(`‚úÖ Total de times inscritos: ${allEnrollments.length}`);
    allEnrollments.forEach(enrollment => {
      console.log(`   - ${enrollment.game_teams.name} (${enrollment.game_teams.team_type})`);
    });

    // 5. Verificar se h√° partidas criadas
    console.log('\n5. Verificando partidas...');
    const { data: matches, error: matchesError } = await supabase
      .from('game_matches')
      .select('*')
      .eq('competition_id', competitionId);

    if (matchesError) {
      console.error('‚ùå Erro ao buscar partidas:', matchesError);
      return;
    }

    console.log(`‚úÖ Partidas encontradas: ${matches.length}`);
    if (matches.length === 0) {
      console.log('‚ö†Ô∏è  Nenhuma partida foi criada');
      console.log('üîß Isso pode indicar um problema no m√©todo checkAndCreateMatches');
      
      // Verificar se h√° pelo menos 2 times para criar partidas
      if (allEnrollments.length >= 2) {
        console.log('‚úÖ H√° times suficientes para criar partidas (m√≠nimo: 2)');
        console.log('üîß O problema pode estar na l√≥gica de cria√ß√£o de partidas');
      } else {
        console.log('‚ö†Ô∏è  N√£o h√° times suficientes para criar partidas (m√≠nimo: 2)');
      }
    } else {
      console.log('‚úÖ Partidas criadas automaticamente!');
      matches.slice(0, 5).forEach(match => {
        console.log(`   - ${match.home_team_name} vs ${match.away_team_name} (Rodada ${match.round})`);
      });
    }

    // 6. Verificar rodadas
    console.log('\n6. Verificando rodadas...');
    const { data: rounds, error: roundsError } = await supabase
      .from('game_rounds')
      .select('*')
      .eq('competition_id', competitionId);

    if (roundsError) {
      console.error('‚ùå Erro ao buscar rodadas:', roundsError);
      return;
    }

    console.log(`‚úÖ Rodadas encontradas: ${rounds.length}`);
    if (rounds.length > 0) {
      rounds.slice(0, 5).forEach(round => {
        console.log(`   - Rodada ${round.round_number}: ${round.name}`);
      });
    }

    // 7. Verificar classifica√ß√µes
    console.log('\n7. Verificando classifica√ß√µes...');
    const { data: standings, error: standingsError } = await supabase
      .from('game_standings')
      .select('*')
      .eq('competition_id', competitionId);

    if (standingsError) {
      console.error('‚ùå Erro ao buscar classifica√ß√µes:', standingsError);
      return;
    }

    console.log(`‚úÖ Entradas de classifica√ß√£o: ${standings.length}`);
    if (standings.length > 0) {
      standings.slice(0, 5).forEach(standing => {
        console.log(`   - Time ID: ${standing.team_id}, Pontos: ${standing.points}`);
      });
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

checkEnrollmentStatus(); 