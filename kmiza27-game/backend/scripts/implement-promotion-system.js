const { getSupabaseServiceClient } = require('../config/supabase-connection');

console.log('üèÜ IMPLEMENTANDO SISTEMA DE PROMO√á√ÉO/REBAIXAMENTO');
console.log('=' .repeat(50));

async function implementPromotionSystem() {
  try {
    const supabase = getSupabaseServiceClient('vps');
    
    console.log('\nüìã 1. Verificando competi√ß√µes...');
    
    // Buscar todas as competi√ß√µes
    const { data: competitions, error: compError } = await supabase
      .from('game_competitions')
      .select('id, name, tier, promotion_spots, relegation_spots')
      .order('tier');
    
    if (compError) {
      console.log('‚ùå Erro ao buscar competi√ß√µes:', compError.message);
      return;
    }
    
    console.log(`üìä Competi√ß√µes encontradas: ${competitions.length}`);
    
    // Para cada competi√ß√£o, processar promo√ß√£o/rebaixamento
    for (const competition of competitions) {
      console.log(`\nüìã 2. Processando ${competition.name}...`);
      
      // Buscar classifica√ß√£o atual
      const { data: standings, error: standingsError } = await supabase
        .from('game_standings')
        .select(`
          id,
          team_id,
          points,
          wins,
          draws,
          losses,
          goals_for,
          goals_against,
          game_teams!inner(name, team_type, owner_id)
        `)
        .eq('competition_id', competition.id)
        .order('points', { ascending: false })
        .order('goals_for', { ascending: false })
        .order('goals_against', { ascending: true });
      
      if (standingsError) {
        console.log(`‚ùå Erro ao buscar classifica√ß√£o: ${standingsError.message}`);
        continue;
      }
      
      if (!standings || standings.length === 0) {
        console.log(`üìä ${competition.name} n√£o tem times inscritos`);
        continue;
      }
      
      console.log(`üìä ${competition.name}: ${standings.length} times`);
      
      // Separar times da m√°quina e times do usu√°rio
      const machineTeams = standings.filter(s => s.game_teams.team_type === 'machine');
      const userTeams = standings.filter(s => s.game_teams.team_type === 'user_created');
      
      console.log(`üìä Times da m√°quina: ${machineTeams.length}`);
      console.log(`üìä Times do usu√°rio: ${userTeams.length}`);
      
      // Processar promo√ß√£o (apenas times do usu√°rio podem subir)
      if (competition.promotion_spots > 0) {
        console.log(`üèÜ Processando promo√ß√£o: ${competition.promotion_spots} vagas`);
        
        const teamsToPromote = userTeams.slice(0, competition.promotion_spots);
        
        for (const team of teamsToPromote) {
          console.log(`‚úÖ ${team.game_teams.name} promovido para S√©rie ${competition.tier - 1}`);
          
          // Remover da competi√ß√£o atual
          await supabase
            .from('game_competition_teams')
            .delete()
            .eq('competition_id', competition.id)
            .eq('team_id', team.team_id);
          
          // Remover da classifica√ß√£o atual
          await supabase
            .from('game_standings')
            .delete()
            .eq('competition_id', competition.id)
            .eq('team_id', team.team_id);
          
          // Encontrar competi√ß√£o superior
          const upperCompetition = competitions.find(c => c.tier === competition.tier - 1);
          if (upperCompetition) {
            // Inscrever na competi√ß√£o superior
            await supabase
              .from('game_competition_teams')
              .insert({
                competition_id: upperCompetition.id,
                team_id: team.team_id
              });
            
            // Criar entrada na classifica√ß√£o da competi√ß√£o superior
            await supabase
              .from('game_standings')
              .insert({
                competition_id: upperCompetition.id,
                team_id: team.team_id,
                points: 0,
                wins: 0,
                draws: 0,
                losses: 0,
                goals_for: 0,
                goals_against: 0,
                season_year: 2025
              });
            
            console.log(`‚úÖ ${team.game_teams.name} inscrito na ${upperCompetition.name}`);
          }
        }
      }
      
      // Processar rebaixamento (apenas times da m√°quina podem descer)
      if (competition.relegation_spots > 0) {
        console.log(`‚¨áÔ∏è  Processando rebaixamento: ${competition.relegation_spots} vagas`);
        
        const teamsToRelegate = machineTeams.slice(-competition.relegation_spots);
        
        for (const team of teamsToRelegate) {
          console.log(`‚¨áÔ∏è  ${team.game_teams.name} rebaixado para S√©rie ${competition.tier + 1}`);
          
          // Remover da competi√ß√£o atual
          await supabase
            .from('game_competition_teams')
            .delete()
            .eq('competition_id', competition.id)
            .eq('team_id', team.team_id);
          
          // Remover da classifica√ß√£o atual
          await supabase
            .from('game_standings')
            .delete()
            .eq('competition_id', competition.id)
            .eq('team_id', team.team_id);
          
          // Encontrar competi√ß√£o inferior
          const lowerCompetition = competitions.find(c => c.tier === competition.tier + 1);
          if (lowerCompetition) {
            // Inscrever na competi√ß√£o inferior
            await supabase
              .from('game_competition_teams')
              .insert({
                competition_id: lowerCompetition.id,
                team_id: team.team_id
              });
            
            // Criar entrada na classifica√ß√£o da competi√ß√£o inferior
            await supabase
              .from('game_standings')
              .insert({
                competition_id: lowerCompetition.id,
                team_id: team.team_id,
                points: 0,
                wins: 0,
                draws: 0,
                losses: 0,
                goals_for: 0,
                goals_against: 0,
                season_year: 2025
              });
            
            console.log(`‚¨áÔ∏è  ${team.game_teams.name} inscrito na ${lowerCompetition.name}`);
          }
        }
      }
    }
    
    // Atualizar contadores das competi√ß√µes
    console.log('\nüìã 3. Atualizando contadores das competi√ß√µes...');
    
    for (const competition of competitions) {
      const { data: enrolledTeams, error: countError } = await supabase
        .from('game_competition_teams')
        .select('id')
        .eq('competition_id', competition.id);
      
      if (countError) {
        console.log(`‚ùå Erro ao contar times: ${countError.message}`);
        continue;
      }
      
      const actualCount = enrolledTeams ? enrolledTeams.length : 0;
      
      const { error: updateError } = await supabase
        .from('game_competitions')
        .update({ current_teams: actualCount })
        .eq('id', competition.id);
      
      if (updateError) {
        console.log(`‚ùå Erro ao atualizar contador: ${updateError.message}`);
      } else {
        console.log(`‚úÖ ${competition.name}: ${actualCount} times`);
      }
    }
    
    // Verificar resultado final
    console.log('\nüìã 4. Verificando resultado final...');
    const { data: finalCompetitions, error: finalError } = await supabase
      .from('game_competitions')
      .select('id, name, tier, current_teams, max_teams, promotion_spots, relegation_spots');
    
    if (finalError) {
      console.log('‚ùå Erro ao verificar resultado:', finalError.message);
      return;
    }
    
    console.log('üìä Status final das competi√ß√µes:');
    finalCompetitions.forEach(comp => {
      console.log(`  - ${comp.name} (S√©rie ${comp.tier}): ${comp.current_teams}/${comp.max_teams} times`);
    });
    
    console.log('\n‚úÖ Sistema de promo√ß√£o/rebaixamento implementado!');
    console.log('üèÜ Times promovidos e rebaixados com sucesso');
    
  } catch (error) {
    console.error('‚ùå Erro na implementa√ß√£o:', error);
  }
}

// Executar implementa√ß√£o
if (require.main === module) {
  implementPromotionSystem();
}

module.exports = {
  implementPromotionSystem
}; 