const { getSupabaseServiceClient } = require('../config/supabase-connection');
const { handleUserEnrollment } = require('./auto-enroll-when-user-joins');

console.log('üîß INTEGRA√á√ÉO COM BACKEND NESTJS');
console.log('=' .repeat(50));

async function integrateWithBackend() {
  try {
    console.log('\nüìã 1. Verificando estrutura do backend...');
    
    // Verificar se o arquivo do service existe
    const fs = require('fs');
    const path = require('path');
    
    const servicePath = path.join(__dirname, '../src/modules/competitions/competitions.service.ts');
    
    if (!fs.existsSync(servicePath)) {
      console.log('‚ùå Arquivo competitions.service.ts n√£o encontrado');
      return;
    }
    
    console.log('‚úÖ Arquivo competitions.service.ts encontrado');
    
    // Ler o arquivo atual
    const currentContent = fs.readFileSync(servicePath, 'utf8');
    
    console.log('\nüìù 2. Gerando c√≥digo de integra√ß√£o...');
    
    // Gerar o c√≥digo de integra√ß√£o
    const integrationCode = generateIntegrationCode();
    
    console.log('\nüìã 3. Verificando se j√° existe integra√ß√£o...');
    
    if (currentContent.includes('handleUserEnrollment')) {
      console.log('‚ö†Ô∏è  Integra√ß√£o j√° existe no c√≥digo');
      console.log('üí° Para atualizar, edite manualmente o arquivo competitions.service.ts');
    } else {
      console.log('‚úÖ Integra√ß√£o n√£o existe, pronta para implementar');
    }
    
    console.log('\nüìã 4. C√≥digo de integra√ß√£o gerado:');
    console.log('=' .repeat(50));
    console.log(integrationCode);
    console.log('=' .repeat(50));
    
    console.log('\nüìã 5. Instru√ß√µes de implementa√ß√£o:');
    console.log('1. Abra o arquivo: src/modules/competitions/competitions.service.ts');
    console.log('2. Adicione o import no topo do arquivo:');
    console.log('   import { handleUserEnrollment } from "../../../scripts/auto-enroll-when-user-joins";');
    console.log('3. Substitua o m√©todo registerTeamInCompetition pelo c√≥digo gerado acima');
    console.log('4. Reinicie o servidor NestJS');
    
    console.log('\n‚úÖ Integra√ß√£o preparada!');
    
  } catch (error) {
    console.error('‚ùå Erro na integra√ß√£o:', error);
  }
}

function generateIntegrationCode() {
  return `  async registerTeamInCompetition(teamId: string, competitionId: string) {
    try {
      // Verificar se o time j√° est√° inscrito
      const { data: existingRegistration, error: checkError } = await supabase
        .from('game_competition_teams')
        .select('id')
        .eq('competition_id', competitionId)
        .eq('team_id', teamId)
        .single();

      if (existingRegistration) {
        throw new Error('Time j√° est√° inscrito nesta competi√ß√£o');
      }

      // Verificar se a competi√ß√£o est√° cheia
      const { data: competition, error: compError } = await supabase
        .from('game_competitions')
        .select('max_teams, current_teams, min_teams, tier')
        .eq('id', competitionId)
        .single();

      if (compError) throw new Error(\`Error fetching competition: \${compError.message}\`);

      if (competition.current_teams >= competition.max_teams) {
        throw new Error('Competi√ß√£o est√° cheia');
      }

      // Inserir inscri√ß√£o do usu√°rio
      const { data: registration, error: insertError } = await supabase
        .from('game_competition_teams')
        .insert({
          competition_id: competitionId,
          team_id: teamId
        })
        .select()
        .single();

      if (insertError) throw new Error(\`Error registering team: \${insertError.message}\`);

      // Criar entrada na classifica√ß√£o para o usu√°rio
      await supabase
        .from('game_standings')
        .insert({
          competition_id: competitionId,
          team_id: teamId,
          season_year: 2024
        });

      // ATIVA√á√ÉO DO SISTEMA AUTOM√ÅTICO
      this.logger.log(\`üéØ Ativando sistema autom√°tico para competi√ß√£o \${competitionId}\`);
      
      try {
        // Importar e chamar o sistema autom√°tico
        const { handleUserEnrollment } = require('../../../scripts/auto-enroll-when-user-joins');
        const result = await handleUserEnrollment(competitionId, teamId);
        
        if (result.success) {
          this.logger.log('‚úÖ Sistema autom√°tico ativado com sucesso!');
          this.logger.log(\`üìä Resultado: \${result.message}\`);
        } else {
          this.logger.warn('‚ö†Ô∏è Sistema autom√°tico falhou, mas inscri√ß√£o foi realizada');
          this.logger.warn(\`‚ùå Erro: \${result.message}\`);
        }
      } catch (autoError) {
        this.logger.error('‚ùå Erro no sistema autom√°tico:', autoError);
        this.logger.log('‚ö†Ô∏è Inscri√ß√£o foi realizada, mas sistema autom√°tico falhou');
      }

      this.logger.log(\`Team \${teamId} registered in competition \${competitionId}\`);
      return registration;
    } catch (error) {
      this.logger.error('Error registering team in competition:', error);
      throw error;
    }
  }`;
}

async function testIntegration() {
  console.log('\nüß™ TESTE DE INTEGRA√á√ÉO');
  console.log('=' .repeat(30));
  
  try {
    // Simular uma inscri√ß√£o
    const competitionId = 'test-competition';
    const teamId = 'test-team';
    
    console.log('üìã Testando handleUserEnrollment...');
    const result = await handleUserEnrollment(competitionId, teamId);
    
    console.log('üìä Resultado do teste:', result);
    
  } catch (error) {
    console.log('‚ùå Erro no teste:', error.message);
  }
}

async function checkSystemStatus() {
  console.log('\nüìä STATUS DO SISTEMA');
  console.log('=' .repeat(30));
  
  try {
    const supabase = getSupabaseServiceClient('vps');
    
    // Verificar competi√ß√µes
    const { data: competitions, error: compError } = await supabase
      .from('game_competitions')
      .select('id, name, tier, current_teams, max_teams, min_teams');
    
    if (compError) {
      console.log('‚ùå Erro ao buscar competi√ß√µes:', compError.message);
      return;
    }
    
    console.log('üìã Competi√ß√µes encontradas:', competitions.length);
    competitions.forEach(comp => {
      console.log(`  - ${comp.name} (S√©rie ${comp.tier}): ${comp.current_teams}/${comp.max_teams} times`);
    });
    
    // Verificar times da m√°quina
    const { data: machineTeams, error: teamsError } = await supabase
      .from('game_teams')
      .select('id, name, team_type, machine_tier')
      .eq('team_type', 'machine');
    
    if (teamsError) {
      console.log('‚ùå Erro ao buscar times da m√°quina:', teamsError.message);
      return;
    }
    
    console.log('ü§ñ Times da m√°quina encontrados:', machineTeams.length);
    
    // Verificar jogadores
    const { data: players, error: playersError } = await supabase
      .from('youth_players')
      .select('id, team_id');
    
    if (playersError) {
      console.log('‚ùå Erro ao buscar jogadores:', playersError.message);
      return;
    }
    
    console.log('üë• Jogadores encontrados:', players.length);
    
    console.log('\n‚úÖ Sistema verificado com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar sistema:', error);
  }
}

// Executar integra√ß√£o
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.includes('--test')) {
    testIntegration();
  } else if (args.includes('--status')) {
    checkSystemStatus();
  } else {
    integrateWithBackend();
  }
}

module.exports = {
  integrateWithBackend,
  generateIntegrationCode,
  testIntegration,
  checkSystemStatus
}; 