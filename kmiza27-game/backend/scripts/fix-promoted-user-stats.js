const { getSupabaseServiceClient } = require('../config/supabase-connection');
const supabase = getSupabaseServiceClient('vps');

async function fixPromotedUserStats() {
  try {
    // Usu√°rio promovido para S√©rie C
    const userId = '22fa9e4b-858e-49b5-b80c-1390f9665ac9';
    const tier = 3; // S√©rie C
    const seasonYear = 2026;
    
    console.log('üîß CORRIGINDO ESTAT√çSTICAS DO USU√ÅRIO PROMOVIDO');
    console.log('======================================================================\n');
    console.log(`üë§ Usu√°rio: ${userId}`);
    console.log(`üèÜ S√©rie: C (${tier})`);
    console.log(`üìÖ Temporada: ${seasonYear}`);
    
    // 1. Buscar times da m√°quina da S√©rie C
    console.log('\nüìã Passo 1: Buscando times da m√°quina da S√©rie C...');
    const { data: machineTeams, error: teamsError } = await supabase
      .from('game_machine_teams')
      .select('id, name')
      .eq('tier', tier)
      .eq('is_active', true);
    
    if (teamsError) {
      console.log('‚ùå Erro ao buscar times da m√°quina:', teamsError.message);
      return;
    }
    
    if (!machineTeams || machineTeams.length === 0) {
      console.log('‚ùå Nenhum time da m√°quina encontrado para S√©rie C');
      return;
    }
    
    console.log(`‚úÖ Encontrados ${machineTeams.length} times da m√°quina da S√©rie C`);
    
    // 2. Criar estat√≠sticas zeradas para cada time da m√°quina
    console.log('\nüìã Passo 2: Criando estat√≠sticas zeradas...');
    let created = 0;
    let existing = 0;
    let errors = 0;
    
    for (const team of machineTeams) {
      try {
        const { data, error: insertError } = await supabase
          .from('game_user_machine_team_stats')
          .insert({
            user_id: userId,
            team_id: team.id,
            season_year: seasonYear,
            tier: tier,
            games_played: 0,
            wins: 0,
            draws: 0,
            losses: 0,
            goals_for: 0,
            goals_against: 0,
            points: 0
          })
          .select();
        
        if (insertError) {
          if (insertError.code === '23505') {
            // Registro j√° existe
            existing++;
            console.log(`   ‚ö†Ô∏è ${team.name} - estat√≠sticas j√° existem`);
          } else {
            errors++;
            console.log(`   ‚ùå ${team.name} - erro:`, insertError.message);
          }
        } else {
          created++;
          console.log(`   ‚úÖ ${team.name} - estat√≠sticas zeradas criadas`);
        }
      } catch (error) {
        errors++;
        console.log(`   ‚ùå ${team.name} - erro:`, error.message);
      }
    }
    
    // 3. Resultado final
    console.log('\nüìä RESULTADO FINAL:');
    console.log(`   - Estat√≠sticas criadas: ${created}`);
    console.log(`   - J√° existiam: ${existing}`);
    console.log(`   - Erros: ${errors}`);
    console.log(`   - Total de times: ${machineTeams.length}`);
    
    if (created > 0) {
      console.log('\nüéâ CORRE√á√ÉO CONCLU√çDA!');
      console.log('üí° Agora o usu√°rio promovido tem estat√≠sticas dos times da m√°quina da S√©rie C');
    } else if (existing > 0) {
      console.log('\n‚úÖ ESTAT√çSTICAS J√Å EXISTEM!');
      console.log('üí° O usu√°rio promovido j√° tem as estat√≠sticas corretas');
    } else {
      console.log('\n‚ö†Ô∏è NENHUMA ESTAT√çSTICA FOI CRIADA');
      console.log('üí° Verifique se h√° erros no processo');
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante a corre√ß√£o:', error);
  }
}

fixPromotedUserStats(); 