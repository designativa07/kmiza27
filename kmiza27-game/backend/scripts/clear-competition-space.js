const { getSupabaseServiceClient } = require('../config/supabase-connection');

console.log('üßπ LIMPANDO ESPA√áO NAS COMPETI√á√ïES');
console.log('=' .repeat(40));

async function clearCompetitionSpace() {
  try {
    const supabase = getSupabaseServiceClient('vps');
    
    // Buscar todas as competi√ß√µes
    console.log('\nüìã 1. Buscando competi√ß√µes...');
    const { data: competitions, error: compError } = await supabase
      .from('game_competitions')
      .select('id, name, tier, current_teams, max_teams, min_teams');
    
    if (compError) {
      console.log('‚ùå Erro ao buscar competi√ß√µes:', compError.message);
      return;
    }
    
    console.log(`üìä Competi√ß√µes encontradas: ${competitions.length}`);
    
    // Para cada competi√ß√£o, remover alguns times da m√°quina para deixar espa√ßo
    for (const competition of competitions) {
      console.log(`\nüìã 2. Processando ${competition.name}...`);
      console.log(`üìä Status atual: ${competition.current_teams}/${competition.max_teams}`);
      
      // Se a competi√ß√£o est√° cheia, remover alguns times da m√°quina
      if (competition.current_teams >= competition.max_teams) {
        const excessTeams = competition.current_teams - competition.max_teams + 5; // Deixar 5 vagas
        console.log(`üìä Removendo ${excessTeams} times para deixar espa√ßo...`);
        
        // Buscar times da m√°quina inscritos nesta competi√ß√£o
        const { data: machineTeams, error: teamsError } = await supabase
          .from('game_competition_teams')
          .select(`
            id,
            team_id,
            game_teams!inner(name, team_type)
          `)
          .eq('competition_id', competition.id)
          .eq('game_teams.team_type', 'machine')
          .limit(excessTeams);
        
        if (teamsError) {
          console.log(`‚ùå Erro ao buscar times da m√°quina: ${teamsError.message}`);
          continue;
        }
        
        if (machineTeams && machineTeams.length > 0) {
          console.log(`üìä Encontrados ${machineTeams.length} times da m√°quina para remover`);
          
          // Remover times da m√°quina
          for (const team of machineTeams) {
            const { error: deleteError } = await supabase
              .from('game_competition_teams')
              .delete()
              .eq('id', team.id);
            
            if (deleteError) {
              console.log(`‚ùå Erro ao remover time ${team.team_id}: ${deleteError.message}`);
            } else {
              console.log(`‚úÖ Time ${team.game_teams.name} removido`);
            }
          }
        } else {
          console.log(`üìä Nenhum time da m√°quina encontrado para remover`);
        }
      } else {
        console.log(`‚úÖ Competi√ß√£o j√° tem espa√ßo dispon√≠vel`);
      }
    }
    
    // Atualizar contadores
    console.log('\nüìã 3. Atualizando contadores...');
    for (const competition of competitions) {
      const { data: enrolledTeams, error: countError } = await supabase
        .from('game_competition_teams')
        .select('id')
        .eq('competition_id', competition.id);
      
      if (countError) {
        console.log(`‚ùå Erro ao contar times: ${countError.message}`);
        continue;
      }
      
      const actualCount = enrolledTeams ? enrolledTeams.length : 0;
      
      const { error: updateError } = await supabase
        .from('game_competitions')
        .update({ current_teams: actualCount })
        .eq('id', competition.id);
      
      if (updateError) {
        console.log(`‚ùå Erro ao atualizar contador: ${updateError.message}`);
      } else {
        console.log(`‚úÖ ${competition.name}: ${actualCount}/${competition.max_teams}`);
      }
    }
    
    // Verificar resultado final
    console.log('\nüìã 4. Verificando resultado final...');
    const { data: finalCompetitions, error: finalError } = await supabase
      .from('game_competitions')
      .select('id, name, tier, current_teams, max_teams, min_teams');
    
    if (finalError) {
      console.log('‚ùå Erro ao verificar resultado:', finalError.message);
      return;
    }
    
    console.log('üìä Status final das competi√ß√µes:');
    finalCompetitions.forEach(comp => {
      console.log(`  - ${comp.name} (S√©rie ${comp.tier}): ${comp.current_teams}/${comp.max_teams} times`);
    });
    
    console.log('\n‚úÖ Limpeza conclu√≠da!');
    console.log('üí° Agora h√° espa√ßo para novos times se inscreverem');
    
  } catch (error) {
    console.error('‚ùå Erro na limpeza:', error);
  }
}

// Executar limpeza
if (require.main === module) {
  clearCompetitionSpace();
}

module.exports = {
  clearCompetitionSpace
}; 