const { getSupabaseServiceClient } = require('../config/supabase-connection');

/**
 * Script de debug para investigar a estrutura das tabelas
 * e entender por que a simula√ß√£o autom√°tica n√£o est√° funcionando
 */
async function debugMachineTeamsStructure() {
  try {
    console.log('üîç DEBUG: INVESTIGANDO ESTRUTURA DAS TABELAS');
    console.log('=' .repeat(60));
    
    const supabase = getSupabaseServiceClient('vps');
    
    // 1. VERIFICAR ESTRUTURA DA TABELA game_user_competition_progress
    console.log('\nüìã 1. Verificando estrutura de game_user_competition_progress...');
    const { data: progressSample, error: progressError } = await supabase
      .from('game_user_competition_progress')
      .select('*')
      .limit(5);
    
    if (progressError) {
      console.log('‚ùå Erro ao buscar progresso:', progressError);
    } else {
      console.log(`‚úÖ Encontrados ${progressSample?.length || 0} registros de progresso`);
      if (progressSample && progressSample.length > 0) {
        console.log('üìä Exemplo de registro:', JSON.stringify(progressSample[0], null, 2));
      }
    }
    
    // 2. VERIFICAR ESTRUTURA DA TABELA game_season_matches
    console.log('\nüìã 2. Verificando estrutura de game_season_matches...');
    const { data: matchesSample, error: matchesError } = await supabase
      .from('game_season_matches')
      .select('*')
      .limit(5);
    
    if (matchesError) {
      console.log('‚ùå Erro ao buscar partidas:', matchesError);
    } else {
      console.log(`‚úÖ Encontrados ${matchesSample?.length || 0} registros de partidas`);
      if (matchesSample && matchesSample.length > 0) {
        console.log('üìä Exemplo de registro:', JSON.stringify(matchesSample[0], null, 2));
      }
    }
    
    // 3. VERIFICAR TIMES DA M√ÅQUINA
    console.log('\nüìã 3. Verificando times da m√°quina...');
    const { data: machineTeams, error: teamsError } = await supabase
      .from('game_machine_teams')
      .select('*')
      .eq('tier', 4) // S√©rie D
      .limit(5);
    
    if (teamsError) {
      console.log('‚ùå Erro ao buscar times da m√°quina:', teamsError);
    } else {
      console.log(`‚úÖ Encontrados ${machineTeams?.length || 0} times da m√°quina na S√©rie D`);
      if (machineTeams && machineTeams.length > 0) {
        console.log('üìä Exemplo de time:', JSON.stringify(machineTeams[0], null, 2));
      }
    }
    
    // 4. VERIFICAR ESTAT√çSTICAS DOS TIMES DA M√ÅQUINA
    console.log('\nüìã 4. Verificando estat√≠sticas dos times da m√°quina...');
    const { data: machineStats, error: statsError } = await supabase
      .from('game_user_machine_team_stats')
      .select('*')
      .limit(5);
    
    if (statsError) {
      console.log('‚ùå Erro ao buscar estat√≠sticas:', statsError);
    } else {
      console.log(`‚úÖ Encontrados ${machineStats?.length || 0} registros de estat√≠sticas`);
      if (machineStats && machineStats.length > 0) {
        console.log('üìä Exemplo de estat√≠stica:', JSON.stringify(machineStats[0], null, 2));
      }
    }
    
    // 5. VERIFICAR USU√ÅRIO ESPEC√çFICO (PALHOCA)
    console.log('\nüìã 5. Verificando usu√°rio PALHOCA especificamente...');
    const { data: palhocaTeam, error: palhocaError } = await supabase
      .from('game_teams')
      .select('*')
      .eq('name', 'PALHOCA')
      .single();
    
    if (palhocaError) {
      console.log('‚ùå Erro ao buscar time PALHOCA:', palhocaError);
    } else if (palhocaTeam) {
      console.log('‚úÖ Time PALHOCA encontrado:', JSON.stringify(palhocaTeam, null, 2));
      
      // Verificar progresso deste usu√°rio
      const { data: palhocaProgress, error: palhocaProgressError } = await supabase
        .from('game_user_competition_progress')
        .select('*')
        .eq('user_id', palhocaTeam.owner_id)
        .limit(5);
      
      if (palhocaProgressError) {
        console.log('‚ùå Erro ao buscar progresso do PALHOCA:', palhocaProgressError);
      } else {
        console.log(`üìä Progresso do PALHOCA: ${palhocaProgress?.length || 0} registros`);
        if (palhocaProgress && palhocaProgress.length > 0) {
          console.log('üìä Dados de progresso:', JSON.stringify(palhocaProgress, null, 2));
        }
      }
      
      // Verificar partidas deste usu√°rio
      const { data: palhocaMatches, error: palhocaMatchesError } = await supabase
        .from('game_season_matches')
        .select('*')
        .eq('user_id', palhocaTeam.owner_id)
        .limit(10);
      
      if (palhocaMatchesError) {
        console.log('‚ùå Erro ao buscar partidas do PALHOCA:', palhocaMatchesError);
      } else {
        console.log(`üìä Partidas do PALHOCA: ${palhocaMatches?.length || 0} registros`);
        if (palhocaMatches && palhocaMatches.length > 0) {
          console.log('üìä Exemplo de partida:', JSON.stringify(palhocaMatches[0], null, 2));
        }
      }
    }
    
    // 6. VERIFICAR SE EXISTEM PARTIDAS ENTRE TIMES DA M√ÅQUINA
    console.log('\nüìã 6. Verificando partidas entre times da m√°quina...');
    const { data: machineMatches, error: machineMatchesError } = await supabase
      .from('game_season_matches')
      .select('*')
      .not('home_machine_team_id', 'is', null)
      .not('away_machine_team_id', 'is', null)
      .limit(5);
    
    if (machineMatchesError) {
      console.log('‚ùå Erro ao buscar partidas da m√°quina:', machineMatchesError);
    } else {
      console.log(`‚úÖ Encontradas ${machineMatches?.length || 0} partidas entre times da m√°quina`);
      if (machineMatches && machineMatches.length > 0) {
        console.log('üìä Exemplo de partida da m√°quina:', JSON.stringify(machineMatches[0], null, 2));
      }
    }
    
    console.log('\nüîç DEBUG COMPLETO! Verifique os dados acima para identificar o problema.');
    
  } catch (error) {
    console.error('‚ùå Erro durante o debug:', error);
    process.exit(1);
  }
}

// Executar o script
if (require.main === module) {
  debugMachineTeamsStructure()
    .then(() => {
      console.log('\n‚úÖ Script de debug executado com sucesso!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Erro na execu√ß√£o:', error);
      process.exit(1);
    });
}

module.exports = { debugMachineTeamsStructure };
