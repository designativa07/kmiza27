const { getSupabaseServiceClient } = require('../config/supabase-connection');

const supabase = getSupabaseServiceClient('vps');

async function checkSerieDCapacity() {
  console.log('üîç Verificando capacidade da S√©rie D...\n');

  try {
    const serieDId = '045a3b64-59fc-48fd-ad8f-828b4f1a5319';

    // 1. Verificar detalhes da S√©rie D
    console.log('1. Verificando detalhes da S√©rie D...');
    const { data: serieD, error: serieDError } = await supabase
      .from('game_competitions')
      .select('*')
      .eq('id', serieDId)
      .single();

    if (serieDError) {
      console.error('‚ùå Erro ao buscar S√©rie D:', serieDError);
      return;
    }

    console.log(`‚úÖ S√©rie D: ${serieD.name}`);
    console.log(`   - Times atuais: ${serieD.current_teams}/${serieD.max_teams}`);
    console.log(`   - Vagas dispon√≠veis: ${serieD.max_teams - serieD.current_teams}`);

    // 2. Verificar todos os times inscritos
    console.log('\n2. Verificando times inscritos...');
    const { data: enrollments, error: enrollmentsError } = await supabase
      .from('game_competition_teams')
      .select(`
        *,
        game_teams!inner(id, name, team_type)
      `)
      .eq('competition_id', serieDId);

    if (enrollmentsError) {
      console.error('‚ùå Erro ao buscar inscri√ß√µes:', enrollmentsError);
      return;
    }

    console.log(`‚úÖ Total de times inscritos: ${enrollments.length}`);

    // Separar times da m√°quina e times do usu√°rio
    const machineTeams = enrollments.filter(e => e.game_teams.team_type === 'machine');
    const userTeams = enrollments.filter(e => e.game_teams.team_type === 'user_created');

    console.log(`   - Times da m√°quina: ${machineTeams.length}`);
    console.log(`   - Times do usu√°rio: ${userTeams.length}`);

    // 3. Mostrar times da m√°quina
    if (machineTeams.length > 0) {
      console.log('\n3. Times da m√°quina inscritos:');
      machineTeams.forEach(enrollment => {
        console.log(`   - ${enrollment.game_teams.name} (ID: ${enrollment.game_teams.id})`);
      });
    }

    // 4. Mostrar times do usu√°rio
    if (userTeams.length > 0) {
      console.log('\n4. Times do usu√°rio inscritos:');
      userTeams.forEach(enrollment => {
        console.log(`   - ${enrollment.game_teams.name} (ID: ${enrollment.game_teams.id})`);
      });
    }

    // 5. Verificar se h√° espa√ßo para novos usu√°rios
    if (serieD.current_teams >= serieD.max_teams) {
      console.log('\n‚ö†Ô∏è  S√©rie D est√° cheia!');
      
      if (machineTeams.length > 10) {
        console.log('üîß H√° muitos times da m√°quina. Podemos remover alguns para liberar espa√ßo.');
        console.log('üí° Recomenda√ß√£o: Manter apenas 10 times da m√°quina para novos usu√°rios.');
        
        const teamsToRemove = machineTeams.slice(10);
        console.log(`üìã Times que podem ser removidos: ${teamsToRemove.length}`);
        
        if (teamsToRemove.length > 0) {
          console.log('\n5. Removendo times da m√°quina para liberar espa√ßo...');
          
          for (const enrollment of teamsToRemove) {
            console.log(`   - Removendo ${enrollment.game_teams.name}...`);
            
            // Remover da inscri√ß√£o
            const { error: deleteError } = await supabase
              .from('game_competition_teams')
              .delete()
              .eq('team_id', enrollment.game_teams.id)
              .eq('competition_id', serieDId);

            if (deleteError) {
              console.error(`‚ùå Erro ao remover inscri√ß√£o de ${enrollment.game_teams.name}:`, deleteError);
              continue;
            }

            // Remover da classifica√ß√£o
            const { error: standingsError } = await supabase
              .from('game_standings')
              .delete()
              .eq('team_id', enrollment.game_teams.id)
              .eq('competition_id', serieDId);

            if (standingsError) {
              console.error(`‚ùå Erro ao remover classifica√ß√£o de ${enrollment.game_teams.name}:`, standingsError);
            }

            console.log(`   ‚úÖ ${enrollment.game_teams.name} removido`);
          }

          // Atualizar contador da competi√ß√£o
          const newCount = serieD.current_teams - teamsToRemove.length;
          const { error: updateError } = await supabase
            .from('game_competitions')
            .update({ current_teams: newCount })
            .eq('id', serieDId);

          if (updateError) {
            console.error('‚ùå Erro ao atualizar contador da competi√ß√£o:', updateError);
          } else {
            console.log(`‚úÖ Contador atualizado: ${newCount}/${serieD.max_teams}`);
          }
        }
      } else {
        console.log('‚ö†Ô∏è  N√£o h√° times da m√°quina suficientes para remover.');
        console.log('üí° Considere aumentar o max_teams da S√©rie D ou criar uma nova competi√ß√£o.');
      }
    } else {
      console.log('\n‚úÖ S√©rie D tem vagas dispon√≠veis!');
      console.log(`   - Vagas: ${serieD.max_teams - serieD.current_teams}`);
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

checkSerieDCapacity(); 