const { getSupabaseServiceClient } = require('../config/supabase-connection');

async function checkPromotedUserStatus() {
  try {
    console.log('üîç Verificando status do usu√°rio promovido...');
    const supabase = getSupabaseServiceClient('vps');
    
    const userId = '22fa9e4b-858e-49b5-b80c-1390f9665ac9';
    
    // Buscar todas as temporadas do usu√°rio
    const { data: allProgress, error: progressError } = await supabase
      .from('game_user_competition_progress')
      .select(`user_id, team_id, current_tier, season_year, points, games_played, wins, draws, losses, goals_for, goals_against, position, season_status`)
      .eq('user_id', userId)
      .order('season_year', { ascending: false });
    
    if (progressError) {
      console.log('‚ùå Erro ao buscar progresso:', progressError.message);
      return;
    }
    
    console.log(`üìä Encontradas ${allProgress.length} temporadas para o usu√°rio ${userId}`);
    
    for (const progress of allProgress) {
      console.log(`\nüìÖ Temporada ${progress.season_year}:`);
      console.log(`   S√©rie: ${progress.current_tier} (${getTierName(progress.current_tier)})`);
      console.log(`   Status: ${progress.season_status}`);
      console.log(`   Posi√ß√£o: ${progress.position}¬∫ lugar`);
      console.log(`   Pontos: ${progress.points}`);
      console.log(`   Jogos: ${progress.games_played}/38`);
      
      // Verificar partidas da temporada
      const { data: matches, error: matchesError } = await supabase
        .from('game_season_matches')
        .select('status, tier')
        .eq('user_id', userId)
        .eq('season_year', progress.season_year);
      
      if (matchesError) {
        console.log(`   ‚ùå Erro ao buscar partidas: ${matchesError.message}`);
      } else {
        const totalMatches = matches?.length || 0;
        const finishedMatches = matches?.filter(m => m.status === 'finished').length || 0;
        const tier = matches?.[0]?.tier || progress.current_tier;
        
        console.log(`   üìä Partidas: ${finishedMatches}/${totalMatches} finalizadas`);
        console.log(`   üèÜ S√©rie das partidas: ${tier} (${getTierName(tier)})`);
        
        if (tier !== progress.current_tier) {
          console.log(`   ‚ö†Ô∏è INCONSIST√äNCIA: Progresso diz S√©rie ${progress.current_tier} mas partidas s√£o da S√©rie ${tier}`);
        }
      }
      
      // Verificar estat√≠sticas de times da m√°quina
      const { data: machineStats, error: statsError } = await supabase
        .from('game_user_machine_team_stats')
        .select('team_id, points, goals_for, goals_against')
        .eq('user_id', userId)
        .eq('season_year', progress.season_year)
        .eq('tier', progress.current_tier);
      
      if (statsError) {
        console.log(`   ‚ùå Erro ao buscar estat√≠sticas: ${statsError.message}`);
      } else {
        console.log(`   ü§ñ Estat√≠sticas de times da m√°quina: ${machineStats?.length || 0} times`);
      }
    }
    
    // Verificar hist√≥rico de temporadas
    const { data: history, error: historyError } = await supabase
      .from('game_season_history')
      .select('*')
      .eq('user_id', userId)
      .order('season_year', { ascending: false });
    
    if (historyError) {
      console.log('‚ùå Erro ao buscar hist√≥rico:', historyError.message);
    } else {
      console.log(`\nüìú Hist√≥rico de temporadas: ${history?.length || 0} registros`);
      for (const record of history || []) {
        console.log(`   ${record.season_year}: ${record.result} - S√©rie ${getTierName(record.tier)} ‚Üí S√©rie ${getTierName(record.next_tier)}`);
      }
    }
    
    console.log('\n‚úÖ Verifica√ß√£o do usu√°rio promovido conclu√≠da');
  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o:', error);
  }
}

function getTierName(tier) {
  const tierNames = { 1: 'A', 2: 'B', 3: 'C', 4: 'D' };
  return tierNames[tier] || 'Desconhecida';
}

checkPromotedUserStatus(); 