#!/bin/bash

# üöÄ Script de Deploy para Produ√ß√£o - Kmiza27 Game
# Dom√≠nios: gameapi.kmiza27.com e game.kmiza27.com

echo "üéÆ Iniciando deploy para produ√ß√£o..."
echo "üåê Backend: gameapi.kmiza27.com"
echo "üåê Frontend: game.kmiza27.com"

# Verificar se estamos no diret√≥rio correto
if [ ! -f "docker/easypanel-game.yml" ]; then
    echo "‚ùå Erro: Execute este script do diret√≥rio kmiza27-game/"
    exit 1
fi

# Verificar se o Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Erro: Docker n√£o est√° rodando!"
    exit 1
fi

# Verificar imports do frontend antes do deploy
echo "üîç Verificando imports do frontend..."
chmod +x check-imports.sh
./check-imports.sh

if [ $? -ne 0 ]; then
    echo "‚ö†Ô∏è Problemas de imports encontrados. Tentando corrigir..."
    echo "üîß Corrigindo imports incorretos..."
    
    # Corrigir imports conhecidos
    sed -i 's|import { ATTRIBUTE_LABELS, OVERALL_COLORS } from '\''./PlayerCardCompact'\'';|import { ATTRIBUTE_LABELS } from '\''@/types/player'\'';\nimport { OVERALL_COLORS } from '\''./PlayerCardCompact'\'';|g' frontend/src/components/PlayerAttributesLegend.tsx
    
    echo "‚úÖ Imports corrigidos!"
fi

# Verificar propriedades obrigat√≥rias
echo "üîç Verificando propriedades obrigat√≥rias..."
cd frontend

# Verificar se PlayerCardCompact est√° sendo usado com playerType
echo "Verificando PlayerCardCompact..."
grep -r "PlayerCardCompact" src/components/ --include="*.tsx" | while read -r line; do
    if [[ $line == *"<PlayerCardCompact"* ]]; then
        file=$(echo "$line" | cut -d: -f1)
        line_num=$(echo "$line" | cut -d: -f2)
        
        # Verificar se tem playerType
        if ! grep -A 20 -B 5 "PlayerCardCompact" "$file" | grep -q "playerType"; then
            echo "‚ö†Ô∏è  $file:$line_num - PlayerCardCompact sem playerType"
            echo "üîß Corrigindo automaticamente..."
            
            # Adicionar playerType baseado no contexto
            if [[ $file == *"YouthAcademy"* ]]; then
                sed -i 's|size="small"|size="small"\n                      playerType="youth"|g' "$file"
            elif [[ $file == *"PlayersManager"* ]]; then
                sed -i 's|size="medium"|size="medium"\n              playerType={activeTab === '\''academia'\'' ? '\''youth'\'' : '\''professional'\''}|g' "$file"
            else
                sed -i 's|size="medium"|size="medium"\n              playerType="professional"|g' "$file"
            fi
            
            echo "‚úÖ Corrigido em $file"
        fi
    fi
done

cd ..

# Parar servi√ßos existentes
echo "üõë Parando servi√ßos existentes..."
docker-compose -f docker/easypanel-game.yml down

# Limpar containers e imagens antigas
echo "üßπ Limpando containers e imagens antigas..."
docker system prune -f

# Build das imagens
echo "üî® Fazendo build das imagens..."

echo "üì¶ Build do Backend..."
docker-compose -f docker/easypanel-game.yml build --no-cache kmiza27-game-backend

if [ $? -ne 0 ]; then
    echo "‚ùå Erro no build do backend!"
    echo "üîÑ Tentando build alternativo..."
    cd backend
    chmod +x build-backend.sh
    ./build-backend.sh
    cd ..
fi

echo "üì¶ Build do Frontend..."
docker-compose -f docker/easypanel-game.yml build --no-cache kmiza27-game-frontend

if [ $? -ne 0 ]; then
    echo "‚ùå Erro no build do frontend!"
    echo "üîÑ Tentando build alternativo..."
    cd frontend
    chmod +x build-frontend.sh
    ./build-frontend.sh
    cd ..
fi

# Iniciar servi√ßos
echo "üöÄ Iniciando servi√ßos..."
docker-compose -f docker/easypanel-game.yml up -d

# Aguardar inicializa√ß√£o
echo "‚è≥ Aguardando inicializa√ß√£o dos servi√ßos..."
sleep 30

# Verificar status
echo "üìä Verificando status dos servi√ßos..."
docker-compose -f docker/easypanel-game.yml ps

# Testar endpoints
echo "üß™ Testando endpoints..."
echo "Backend Health Check:"
curl -f http://localhost:3004/api/v1/health || echo "‚ùå Backend n√£o respondeu"

echo "Frontend:"
curl -f http://localhost:3005 || echo "‚ùå Frontend n√£o respondeu"

echo ""
echo "‚úÖ Deploy conclu√≠do!"
echo "üåê Backend: https://gameapi.kmiza27.com"
echo "üåê Frontend: https://game.kmiza27.com"
echo ""
echo "üìù Para ver logs: docker-compose -f docker/easypanel-game.yml logs -f"
echo "üìù Para parar: docker-compose -f docker/easypanel-game.yml down"
echo ""
echo "üîç Para verificar status: ./check-production-status.sh"
